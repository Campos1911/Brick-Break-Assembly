     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0500]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  reset_game:
    21                                  ; Desenhando o campo (bordas brancas)
    22 0000001A C606[0000]0F            		mov		byte[cor],branco_intenso
    23 0000001F B80000                  		mov		ax, 0
    24 00000022 50                      		push 	ax
    25 00000023 B80000                  		mov		ax, 0
    26 00000026 50                      		push	ax
    27 00000027 B80000                  		mov		ax, 0
    28 0000002A 50                      		push 	ax
    29 0000002B B8DF01                  		mov		ax, 479
    30 0000002E 50                      		push	ax
    31 0000002F E8DD06                  		call	line
    32                                  
    33 00000032 B80000                  		mov		ax, 0
    34 00000035 50                      		push 	ax
    35 00000036 B8DF01                  		mov		ax, 479
    36 00000039 50                      		push	ax
    37 0000003A B87F02                  		mov		ax, 639
    38 0000003D 50                      		push 	ax
    39 0000003E B8DF01                  		mov		ax, 479
    40 00000041 50                      		push	ax
    41 00000042 E8CA06                  		call	line
    42                                  		
    43 00000045 B87F02                  		mov		ax, 639
    44 00000048 50                      		push 	ax
    45 00000049 B8DF01                  		mov		ax, 479
    46 0000004C 50                      		push	ax
    47 0000004D B87F02                  		mov		ax, 639
    48 00000050 50                      		push 	ax
    49 00000051 B80000                  		mov		ax, 0
    50 00000054 50                      		push	ax
    51 00000055 E8B706                  		call	line
    52                                  
    53                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    54 00000058 B90600                  		mov		cx, 6
    55 0000005B C606[0000]01            		mov		byte[cor], azul
    56                                  	
    57                                  ; Primeira linha de quadrados (linha superior)
    58                                  fazQuadrado1:
    59 00000060 FE06[0000]              		inc		byte[cor]
    60 00000064 A1[0600]                		mov		ax, word[x1A]
    61 00000067 50                      		push 	ax
    62 00000068 B8DD01                  		mov		ax, 477
    63 0000006B 50                      		push	ax
    64 0000006C A1[0800]                		mov		ax, word[x2A]
    65 0000006F 50                      		push 	ax
    66 00000070 B8DD01                  		mov		ax, 477
    67 00000073 50                      		push	ax
    68 00000074 E89806                  		call	line
    69                                  		
    70 00000077 A1[0800]                		mov		ax, word[x2A]
    71 0000007A 50                      		push 	ax
    72 0000007B B8DD01                  		mov		ax, 477
    73 0000007E 50                      		push	ax
    74 0000007F A1[0800]                		mov		ax, word[x2A]
    75 00000082 50                      		push 	ax
    76 00000083 B8B501                  		mov		ax, 437
    77 00000086 50                      		push	ax
    78 00000087 E88506                  		call	line
    79                                  		
    80 0000008A A1[0800]                		mov		ax, word[x2A]
    81 0000008D 50                      		push 	ax
    82 0000008E B8B501                  		mov		ax, 437
    83 00000091 50                      		push	ax
    84 00000092 A1[0600]                		mov		ax, word[x1A]
    85 00000095 50                      		push 	ax
    86 00000096 B8B501                  		mov		ax, 437
    87 00000099 50                      		push	ax
    88 0000009A E87206                  		call	line
    89                                  		
    90 0000009D A1[0600]                		mov		ax, word[x1A]
    91 000000A0 50                      		push 	ax
    92 000000A1 B8B501                  		mov		ax, 437
    93 000000A4 50                      		push	ax
    94 000000A5 A1[0600]                		mov		ax, word[x1A]
    95 000000A8 50                      		push 	ax
    96 000000A9 B8DD01                  		mov		ax, 477
    97 000000AC 50                      		push	ax
    98 000000AD E85F06                  		call	line
    99 000000B0 8106[0800]6900          		add		word[x2A], 105
   100 000000B6 8106[0600]6900          		add		word[x1A] , 105
   101 000000BC E2A2                    		loop 	fazQuadrado1
   102                                  		
   103                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   104 000000BE B90600                  		mov		cx, 6
   105 000000C1 C606[0000]08            		mov		byte[cor], cinza
   106                                  		
   107                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   108 000000C6 FE06[0000]              		inc		byte[cor]
   109 000000CA A1[0A00]                		mov		ax, word[x1B]
   110 000000CD 50                      		push 	ax
   111 000000CE B8AB01                  		mov		ax, 427
   112 000000D1 50                      		push	ax
   113 000000D2 A1[0C00]                		mov		ax, word[x2B]
   114 000000D5 50                      		push 	ax
   115 000000D6 B8AB01                  		mov		ax, 427
   116 000000D9 50                      		push	ax
   117 000000DA E83206                  		call	line
   118                                  		
   119 000000DD A1[0C00]                		mov		ax, word[x2B]
   120 000000E0 50                      		push 	ax
   121 000000E1 B8AB01                  		mov		ax, 427
   122 000000E4 50                      		push	ax
   123 000000E5 A1[0C00]                		mov		ax, word[x2B]
   124 000000E8 50                      		push 	ax
   125 000000E9 B88301                  		mov		ax, 387
   126 000000EC 50                      		push	ax
   127 000000ED E81F06                  		call	line
   128                                  		
   129 000000F0 A1[0C00]                		mov		ax, word[x2B]
   130 000000F3 50                      		push 	ax
   131 000000F4 B88301                  		mov		ax, 387
   132 000000F7 50                      		push	ax
   133 000000F8 A1[0A00]                		mov		ax, word[x1B]
   134 000000FB 50                      		push 	ax
   135 000000FC B88301                  		mov		ax, 387
   136 000000FF 50                      		push	ax
   137 00000100 E80C06                  		call	line
   138                                  		
   139 00000103 A1[0A00]                		mov		ax, word[x1B]
   140 00000106 50                      		push 	ax
   141 00000107 B88301                  		mov		ax, 387
   142 0000010A 50                      		push	ax
   143 0000010B A1[0A00]                		mov		ax, word[x1B]
   144 0000010E 50                      		push 	ax
   145 0000010F B8AB01                  		mov		ax, 427
   146 00000112 50                      		push	ax
   147 00000113 E8F905                  		call	line
   148 00000116 8106[0C00]6900          		add		word[x2B], 105
   149 0000011C 8106[0A00]6900          		add		word[x1B] , 105
   150 00000122 E2A2                    		loop 	fazQuadrado2
   151                                  
   152                                  
   153                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   154                                  
   155                                  continua:
   156 00000124 E89D00                      	call limpa_bola
   157                                  
   158 00000127 8B1E[2A00]                      mov bx, [vx]
   159 0000012B 011E[1600]                      add [px], bx
   160 0000012F 8B1E[2C00]                      mov bx, [vy]
   161 00000133 011E[1800]                      add [py], bx
   162                                  
   163 00000137 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   164 0000013C A1[1600]                		mov		ax,[px]
   165 0000013F 50                      		push		ax
   166 00000140 A1[1800]                		mov		ax,[py]
   167 00000143 50                      		push		ax
   168 00000144 B81000                  		mov		ax,16
   169 00000147 50                      		push		ax
   170 00000148 E80705                  		call	full_circle
   171                                  
   172 0000014B A1[1200]                		mov		ax, [player_x1] ; Desenhando a raquete
   173 0000014E 50                      		push 	ax
   174 0000014F B80A00                  		mov		ax, 10
   175 00000152 50                      		push	ax
   176 00000153 A1[1400]                		mov		ax, [player_x2]
   177 00000156 50                      		push 	ax
   178 00000157 B80A00                  		mov		ax, 10
   179 0000015A 50                      		push	ax
   180 0000015B E8B105                  		call	line
   181                                  
   182 0000015E 59                              pop cx ; Recupera cx da pilha
   183 0000015F E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   184 00000161 E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   185 00000163 C3                              ret
   186                                  
   187                                  del2:
   188 00000164 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   189 00000165 B90008                          mov cx, 0800h ; Teste modificando este valor
   190                                  
   191                                  del1:
   192 00000168 BB6702                          mov bx, 615 ;Limita o campo na parte da direita
   193 0000016B 391E[1600]                      cmp [px], bx
   194 0000016F 7D68                            jge moveesquerda
   195                                  
   196 00000171 BB1400                          mov bx, 20 ; Limita o campo na parte da esquerda
   197 00000174 391E[1600]                      cmp [px], bx
   198 00000178 7E70                            jle movedireita
   199                                  
   200 0000017A BB6C01                          mov bx, 364 ; Limita o campo na parte de cima
   201 0000017D C706[2600]AB01          		mov	word[yToDelete1], 427
   202 00000183 C706[2800]8301          		mov	word[yToDelete2], 387
   203 00000189 391E[1800]                      cmp [py], bx
   204 0000018D 7D7A                    		jge intermediateMoveBaixo2
   205                                  
   206                                  sobe_mais:
   207 0000018F BB9E01                  		mov	bx, 414
   208 00000192 C706[2600]DD01          		mov	word[yToDelete1], 477
   209 00000198 C706[2800]B501          		mov	word[yToDelete2], 437
   210 0000019E 391E[1800]              		cmp	[py], bx
   211 000001A2 7D65                    		jge	intermediateMoveBaixo2
   212                                  
   213 000001A4 BB0A00                          mov bx, 10 ; Limita o campo na parte de baixo
   214 000001A7 391E[1800]                      cmp [py], bx
   215 000001AB 7E4E                            jle movecima
   216                                  
   217 000001AD B40B                            mov ah, 0bh      
   218 000001AF CD21                            int 21h
   219 000001B1 3C00                            cmp al,0
   220 000001B3 755A                            jne intermediateVerifTeclas
   221 000001B5 E8A502                  		call calcular_colisao_raquete
   222 000001B8 E969FF                          jmp continua
   223                                  
   224 000001BB E866FF                  		call delay
   225 000001BE E8A7FF                  		call del1
   226 000001C1 E8A0FF                  		call del2
   227                                  
   228                                  limpa_bola:
   229 000001C4 C606[0000]00                    mov     byte[cor],preto ; limpa bola
   230 000001C9 A1[1600]                        mov     ax,[px]
   231 000001CC 50                              push        ax
   232 000001CD A1[1800]                        mov     ax,[py]
   233 000001D0 50                              push        ax
   234 000001D1 B81400                          mov     ax,20
   235 000001D4 50                              push        ax
   236 000001D5 E87A04                          call    full_circle
   237 000001D8 C3                              ret
   238                                  
   239                                  moveesquerda:
   240 000001D9 E8E8FF                          call limpa_bola
   241 000001DC A1[2A00]                		mov ax, [vx]
   242 000001DF F7D8                            neg ax
   243 000001E1 89C3                            mov bx, ax
   244 000001E3 891E[2A00]                      mov [vx], bx
   245 000001E7 E93AFF                          jmp continua
   246                                  
   247                                  movedireita:
   248 000001EA E8D7FF                  		call limpa_bola
   249 000001ED A1[2A00]                        mov ax, [vx]
   250 000001F0 F7D8                            neg ax
   251 000001F2 89C3                            mov bx, ax
   252 000001F4 891E[2A00]                      mov [vx], bx
   253 000001F8 E929FF                          jmp continua
   254                                  
   255                                  movecima:
   256 000001FB A1[2C00]                        mov ax, [vy]
   257 000001FE F7D8                            neg ax
   258 00000200 89C3                            mov bx, ax
   259 00000202 891E[2C00]                      mov [vy], bx
   260 00000206 E91BFF                          jmp continua
   261                                  
   262                                  ;  PONTOS INTERMEDIÁRIOS PARA AS FUNÇÕES
   263                                  intermediateMoveBaixo2
   264 00000209 E90900                  	jmp movebaixo2
   265                                  
   266                                  intermediateNaoApaga
   267 0000020C E9C801                  	jmp	nao_apaga
   268                                  
   269                                  intermediateVerifTeclas: ;	Função intermediária para pular para outra parte do código
   270 0000020F E9DF01                  	jmp verificar_teclas
   271                                  
   272                                  intermediateSobeMais:
   273 00000212 E97AFF                  	jmp	sobe_mais
   274                                  
   275                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   276                                  
   277                                  ;movebaixo1:
   278                                  ;		mov ax, 5 ; Quadrado 1
   279                                  ;		cmp [px], ax
   280                                  ;		jge	verifica_quad_cima1 ; Pula para verificar se acertou no limite do quadrado (todos repetem essa lógica)
   281                                  
   282                                  movebaixo2:
   283 00000215 B80500                  		mov ax, 5 ; Quadrado 1
   284 00000218 3906[1600]              		cmp [px], ax
   285 0000021C 7D2D                    		jge	verifica_quad1 ; Pula para verificar se acertou no limite do quadrado (todos repetem essa lógica)
   286                                  volta1:
   287 0000021E B86E00                  		mov ax, 110 ; Quadrado 2
   288 00000221 3906[1600]              		cmp [px], ax
   289 00000225 7D57                    		jge	verifica_quad2
   290                                  volta2:
   291 00000227 B8D700                  		mov ax, 215 ; Quadrado 3
   292 0000022A 3906[1600]              		cmp [px], ax
   293 0000022E 7D7E                    		jge	intermediateVerificaQuad3
   294                                  volta3:
   295 00000230 B84001                  		mov ax, 320 ; Quadrado 4
   296 00000233 3906[1600]              		cmp [px], ax
   297 00000237 7D7E                    		jge	intermediateVerificaQuad4
   298                                  volta4:
   299 00000239 B8A901                  		mov ax, 425 ; Quadrado 5
   300 0000023C 3906[1600]              		cmp [px], ax
   301 00000240 7D7B                    		jge	intermediateVerificaQuad5
   302                                  volta5:
   303 00000242 B81202                  		mov ax, 530 ; Quadrado 6
   304 00000245 3906[1600]              		cmp [px], ax
   305 00000249 7D75                    		jge	intermediateVerificaQuad6
   306                                  
   307                                  
   308                                  verifica_quad1:
   309 0000024B B86900                  		mov ax, 105
   310 0000024E 3906[1600]              		cmp	[px], ax
   311 00000252 7FCA                    		jg volta1 ; Se não acertou, volta para verificar o próximo quadrado
   312 00000254 B8DD01                  		mov	ax, 477
   313 00000257 3B06[2600]              		cmp ax, word[yToDelete1]
   314 0000025B 7409                    		je	ignora1
   315 0000025D B80100                  		mov	ax, 1
   316 00000260 3B06[1A00]              		cmp ax, word[bloco_quebrado1]
   317 00000264 74AC                    		je	intermediateSobeMais
   318                                  ignora1:
   319 00000266 C706[0E00]0500          		mov word[apaga1], 5
   320 0000026C C706[1000]6900          		mov word[apaga2], 105
   321 00000272 B80100                  		mov	ax, 1
   322 00000275 A3[1A00]                		mov	word[bloco_quebrado1], ax
   323 00000278 E90B01                  		jmp	apaga_quad ; Se acertou no limite, apaga o quadrado e rebate a bola
   324                                  
   325                                  intermediateSobeMais2:
   326 0000027B E994FF                  	jmp intermediateSobeMais
   327                                  
   328                                  verifica_quad2:
   329 0000027E B8D200                  		mov ax, 210
   330 00000281 3906[1600]              		cmp	[px], ax
   331 00000285 7FA0                    		jg volta2
   332 00000287 B8DD01                  		mov	ax, 477
   333 0000028A 3B06[2600]              		cmp ax, word[yToDelete1]
   334 0000028E 7409                    		je	ignora2
   335 00000290 B80100                  		mov	ax, 1
   336 00000293 3B06[1C00]              		cmp ax, [bloco_quebrado2]
   337 00000297 74E2                    		je	intermediateSobeMais2
   338                                  ignora2:
   339 00000299 C706[0E00]6E00          		mov word[apaga1], 110
   340 0000029F C706[1000]D200          		mov word[apaga2], 210
   341 000002A5 B80100                  		mov ax, 1
   342 000002A8 A3[1C00]                		mov	word[bloco_quebrado2], ax
   343 000002AB E9D800                  		jmp	apaga_quad
   344                                  
   345                                  intermediateVerificaQuad3:
   346 000002AE E91200                  	jmp verifica_quad3
   347                                  ;	Funções intermediárias para resolver o 'short jump'
   348                                  intermediateVolta4:
   349 000002B1 E985FF                  	jmp	volta4
   350                                  
   351                                  
   352                                  intermediateVolta3:
   353 000002B4 E979FF                  	jmp	volta3
   354                                  
   355                                  
   356                                  intermediateVerificaQuad4:
   357 000002B7 E93C00                  	jmp verifica_quad4
   358                                  intermediateVolta5:
   359 000002BA E985FF                  	jmp	volta5
   360                                  
   361                                  
   362                                  intermediateVerificaQuad5:
   363 000002BD E96600                  	jmp verifica_quad5
   364                                  
   365                                  intermediateVerificaQuad6:
   366 000002C0 E99300                  	jmp verifica_quad6
   367                                  
   368                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   369                                  
   370                                  verifica_quad3:
   371 000002C3 B83B01                  		mov ax, 315
   372 000002C6 3906[1600]              		cmp	[px], ax
   373 000002CA 7DE8                    		jge intermediateVolta3
   374 000002CC B8DD01                  		mov	ax, 477
   375 000002CF 3B06[2600]              		cmp ax, word[yToDelete1]
   376 000002D3 7409                    		je	ignora3
   377 000002D5 B80100                  		mov	ax, 1
   378 000002D8 3B06[1E00]              		cmp ax, [bloco_quebrado3]
   379 000002DC 749D                    		je	intermediateSobeMais2
   380                                  ignora3:
   381 000002DE C706[0E00]D700          		mov word[apaga1], 215
   382 000002E4 C706[1000]3B01          		mov word[apaga2], 315
   383 000002EA B80100                  		mov	ax, 1
   384 000002ED A3[1E00]                		mov	word[bloco_quebrado3], ax
   385 000002F0 E99300                  		jmp	apaga_quad
   386                                  
   387                                  intermediateSobeMais3
   388 000002F3 E985FF                  	jmp intermediateSobeMais2
   389                                  
   390                                  verifica_quad4:
   391 000002F6 B8A401                  		mov ax, 420
   392 000002F9 3906[1600]              		cmp	[px], ax
   393 000002FD 7DB2                    		jge intermediateVolta4
   394 000002FF B8DD01                  		mov	ax, 477
   395 00000302 3B06[2600]              		cmp ax, word[yToDelete1]
   396 00000306 7409                    		je	ignora4
   397 00000308 B80100                  		mov	ax, 1
   398 0000030B 3B06[2000]              		cmp ax, [bloco_quebrado4]
   399 0000030F 74E2                    		je	intermediateSobeMais3
   400                                  ignora4:
   401 00000311 C706[0E00]4001          		mov word[apaga1], 320
   402 00000317 C706[1000]A401          		mov word[apaga2], 420
   403 0000031D B80100                  		mov	ax, 1
   404 00000320 A3[2000]                		mov	word[bloco_quebrado4], ax
   405 00000323 E96000                  		jmp	apaga_quad
   406                                  
   407                                  verifica_quad5:
   408 00000326 B80D02                  		mov ax, 525
   409 00000329 3906[1600]              		cmp	[px], ax
   410 0000032D 7D8B                    		jge intermediateVolta5
   411 0000032F B8DD01                  		mov	ax, 477
   412 00000332 3B06[2600]              		cmp ax, word[yToDelete1]
   413 00000336 7409                    		je	ignora5
   414 00000338 B80100                  		mov	ax, 1
   415 0000033B 3B06[2200]              		cmp ax, [bloco_quebrado5]
   416 0000033F 74B2                    		je	intermediateSobeMais3
   417                                  ignora5:
   418 00000341 C706[0E00]A901          		mov word[apaga1], 425
   419 00000347 C706[1000]0D02          		mov word[apaga2], 525
   420 0000034D B80100                  		mov	ax, 1
   421 00000350 A3[2200]                		mov	word[bloco_quebrado5], ax
   422 00000353 E93000                  		jmp	apaga_quad
   423                                  
   424                                  verifica_quad6:
   425 00000356 B87602                  		mov ax, 630
   426 00000359 3906[1600]              		cmp	[px], ax
   427 0000035D 7D78                    		jge nao_apaga
   428 0000035F B8DD01                  		mov	ax, 477
   429 00000362 3B06[2600]              		cmp ax, word[yToDelete1]
   430 00000366 7409                    		je	ignora6
   431 00000368 B80100                  		mov	ax, 1
   432 0000036B 3B06[2400]              		cmp ax, [bloco_quebrado6]
   433 0000036F 7482                    		je	intermediateSobeMais3
   434                                  ignora6:
   435 00000371 C706[0E00]1202          		mov word[apaga1], 530
   436 00000377 C706[1000]7602          		mov word[apaga2], 630
   437 0000037D B80100                  		mov	ax, 1
   438 00000380 A3[2400]                		mov	word[bloco_quebrado6], ax
   439 00000383 E90000                  		jmp	apaga_quad
   440                                  
   441                                  
   442                                  apaga_quad:
   443 00000386 C606[0000]00            		mov		byte[cor], preto
   444 0000038B A1[0E00]                		mov		ax, word[apaga1]
   445 0000038E 50                      		push 	ax
   446 0000038F A1[2600]                		mov		ax, word[yToDelete1]
   447 00000392 50                      		push	ax
   448 00000393 A1[1000]                		mov		ax, word[apaga2]
   449 00000396 50                      		push 	ax
   450 00000397 A1[2600]                		mov		ax, word[yToDelete1]
   451 0000039A 50                      		push	ax
   452 0000039B E87103                  		call	line
   453                                  		
   454 0000039E A1[1000]                		mov		ax, word[apaga2]
   455 000003A1 50                      		push 	ax
   456 000003A2 A1[2600]                		mov		ax, word[yToDelete1]
   457 000003A5 50                      		push	ax
   458 000003A6 A1[1000]                		mov		ax, word[apaga2]
   459 000003A9 50                      		push 	ax
   460 000003AA A1[2800]                		mov		ax, word[yToDelete2]
   461 000003AD 50                      		push	ax
   462 000003AE E85E03                  		call	line
   463                                  		
   464 000003B1 A1[1000]                		mov		ax, word[apaga2]
   465 000003B4 50                      		push 	ax
   466 000003B5 A1[2800]                		mov		ax, word[yToDelete2]
   467 000003B8 50                      		push	ax
   468 000003B9 A1[0E00]                		mov		ax, word[apaga1]
   469 000003BC 50                      		push 	ax
   470 000003BD A1[2800]                		mov		ax, word[yToDelete2]
   471 000003C0 50                      		push	ax
   472 000003C1 E84B03                  		call	line
   473                                  		
   474 000003C4 A1[0E00]                		mov		ax, word[apaga1]
   475 000003C7 50                      		push 	ax
   476 000003C8 A1[2800]                		mov		ax, word[yToDelete2]
   477 000003CB 50                      		push	ax
   478 000003CC A1[0E00]                		mov		ax, word[apaga1]
   479 000003CF 50                      		push 	ax
   480 000003D0 A1[2600]                		mov		ax, word[yToDelete1]
   481 000003D3 50                      		push	ax
   482 000003D4 E83803                  		call	line
   483                                  
   484                                  nao_apaga:
   485 000003D7 A1[2C00]                        mov ax, [vy]
   486 000003DA F7D8                            neg ax
   487 000003DC 89C3                            mov bx, ax
   488 000003DE 891E[2C00]                      mov [vy], bx
   489 000003E2 E93FFD                          jmp continua
   490                                  
   491                                  sai:
   492 000003E5 B400                            mov ah,0 ; set video mode
   493 000003E7 A0[0500]                        mov al,[modo_anterior] ; recupera o modo anterior
   494 000003EA CD10                            int 10h
   495 000003EC B8004C                          mov ax,4c00h
   496 000003EF CD21                            int 21h
   497                                  		
   498                                  
   499                                  verificar_teclas: ;Estrutura para decidir o que será feito durante o jogo
   500 000003F1 55                              push bp
   501 000003F2 89E5                            mov bp, sp
   502 000003F4 B408                            mov ah, 08h
   503 000003F6 CD21                            int 21h
   504 000003F8 3C70                    		cmp al, 70h ; Código ASCII para a tecla 'p'
   505 000003FA 742B                    		je	pausa
   506 000003FC 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   507 000003FE 74E5                            je sai
   508 00000400 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   509 00000402 752E                            jne verificar_baixo
   510 00000404 E8B500                          call limpa_raquete ;Se 'd' não for pressionado, ele pula para baixo e mexe a raquete
   511 00000407 B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   512 0000040A BB7602                          mov bx, 630 ;testa se já chegou no limite
   513 0000040D 391E[1400]                      cmp [player_x2], bx
   514 00000411 7D46                            jge fim_verificar_teclas
   515 00000413 0306[1200]                      add ax, [player_x1]
   516 00000417 A3[1200]                        mov [player_x1], ax
   517 0000041A B81400                          mov ax, 20
   518 0000041D 0306[1400]                      add ax, [player_x2]
   519 00000421 A3[1400]                        mov [player_x2], ax
   520 00000424 E93200                          jmp fim_verificar_teclas
   521                                  
   522                                  
   523                                  pausa:
   524 00000427 B408                            mov ah, 08h
   525 00000429 CD21                            int 21h
   526 0000042B 3C70                    		cmp al, 70h ;Compara a tecla com a letra 'p', fica parado aqui até apertar 'p' novamente
   527 0000042D 75F8                    		jne pausa
   528 0000042F E9F2FC                  		jmp continua
   529                                  
   530                                  verificar_baixo:
   531 00000432 3C61                            cmp al, 61h
   532 00000434 7523                            jne fim_verificar_teclas
   533 00000436 E88300                          call limpa_raquete
   534 00000439 B8ECFF                          mov ax, -20
   535 0000043C BB0A00                          mov bx, 10
   536 0000043F 391E[1200]                      cmp [player_x1], bx
   537 00000443 7E14                            jle fim_verificar_teclas
   538 00000445 0306[1200]                      add ax, [player_x1]
   539 00000449 A3[1200]                        mov [player_x1], ax
   540 0000044C B8ECFF                          mov ax, -20
   541 0000044F 0306[1400]                      add ax, [player_x2]
   542 00000453 A3[1400]                        mov [player_x2], ax
   543 00000456 E90000                          jmp fim_verificar_teclas
   544                                  
   545                                  fim_verificar_teclas:
   546 00000459 5D                              pop bp
   547 0000045A E9C7FC                          jmp continua
   548                                  
   549                                  calcular_colisao_raquete:
   550 0000045D B81E00                          mov ax, 30
   551 00000460 3906[1800]                      cmp [py], ax
   552 00000464 7403                            je verifica_colisao_raquete
   553 00000466 7C6D                    		jl game_over
   554 00000468 C3                              ret
   555                                  
   556                                  verifica_colisao_raquete:
   557 00000469 8B1E[1400]                      mov bx, [player_x2]
   558 0000046D 81C31000                        add bx, 16
   559 00000471 391E[1600]                      cmp [px], bx
   560 00000475 7E0F                            jle rebate_cima1
   561 00000477 8B1E[1200]                      mov bx, [player_x1]
   562 0000047B 81EB1000                        sub bx, 16
   563 0000047F 391E[1600]                      cmp [px], bx
   564 00000483 7D1C                            jge rebate_baixo1
   565 00000485 C3                              ret
   566                                  
   567                                  ;FUNÇÕES RESPONSÁVEIS POR REBATER A BOLA E ALTERAR A DIREÇÃO (ESQUERDA OU DIREITA)
   568                                  rebate_cima1:
   569 00000486 8B1E[1200]              		mov bx, [player_x1]
   570 0000048A 81EB1000                		sub bx, 16
   571 0000048E 391E[1600]              		cmp [px], bx
   572 00000492 7D01                    		jge rebate_cima2
   573 00000494 C3                              ret
   574                                  
   575                                  rebate_cima2:
   576 00000495 A1[2C00]                        mov ax, [vy]
   577 00000498 F7D8                            neg ax
   578 0000049A 89C3                            mov bx, ax
   579 0000049C 891E[2C00]              		mov [vy], bx
   580 000004A0 C3                              ret
   581                                  
   582                                  rebate_baixo1:
   583 000004A1 8B1E[1400]                      mov bx, [player_x2]
   584 000004A5 81C31000                        add bx, 16
   585 000004A9 391E[1600]                      cmp [px], bx
   586 000004AD 7E01                            jle rebate_baixo2
   587 000004AF C3                              ret
   588                                  
   589                                  rebate_baixo2:
   590 000004B0 A1[2C00]                        mov ax, [vy]
   591 000004B3 F7D8                            neg ax
   592 000004B5 89C3                            mov bx, ax
   593 000004B7 891E[2C00]                      mov [vy], bx
   594 000004BB C3                              ret
   595                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   596                                  
   597                                  limpa_raquete: ;FUNÇÃO UTILIZADA PARA ATUALIZAR A POSIÇÃO DA RAQUETE 
   598 000004BC C606[0000]00                    mov     byte[cor], preto
   599 000004C1 A1[1200]                        mov     ax,[player_x1]
   600 000004C4 50                              push    ax
   601 000004C5 B80A00                          mov     ax,10
   602 000004C8 50                              push    ax
   603 000004C9 A1[1400]                        mov     ax,[player_x2]
   604 000004CC 50                              push    ax
   605 000004CD B80A00                          mov     ax,10
   606 000004D0 50                              push    ax
   607 000004D1 E83B02                          call    line
   608 000004D4 C3                              ret
   609                                  
   610                                  game_over: ;;Escreve a mensagem na tela e espera a tecla do jogador
   611 000004D5 B92300                  		mov     	cx,35			;número de caracteres
   612 000004D8 BB0000                      	mov     	bx,0
   613 000004DB B60A                        	mov     	dh,10			
   614 000004DD B20A                        	mov     	dl,10
   615 000004DF C606[0000]0F            		mov		byte[cor],branco_intenso
   616                                  
   617                                  repete_para_escrever:
   618 000004E4 E83100                  		call	cursor
   619 000004E7 8A87[2E00]                  	mov     al,[bx+mens_3]
   620 000004EB E84100                  		call	caracter
   621 000004EE 43                          	inc     bx			;proximo caracter
   622 000004EF FEC2                    		inc		dl			;avanca a coluna
   623 000004F1 E2F1                        	loop    repete_para_escrever
   624                                  
   625                                  verfica_continua_ou_nao:
   626 000004F3 55                      		push bp
   627 000004F4 89E5                            mov bp, sp
   628                                  
   629 000004F6 B408                    		mov ah, 08h
   630 000004F8 CD21                            int 21h
   631 000004FA 3C6E                    		cmp al, 6eh
   632 000004FC 7407                    		je	acaba
   633 000004FE 3C79                    		cmp al, 79h
   634 00000500 7413                    		je limpa_tudo
   635 00000502 E9EEFF                  		jmp	verfica_continua_ou_nao
   636                                  
   637                                  acaba: ;Finalizando o programa
   638 00000505 B408                    		mov    	ah,08h
   639 00000507 CD21                    		int     21h
   640 00000509 B400                    	    mov  	ah,0   					; set video mode
   641 0000050B A0[0500]                	    mov  	al,[modo_anterior]   	; modo anterior
   642 0000050E CD10                    	    int  	10h
   643 00000510 B8004C                  		mov     ax,4c00h
   644 00000513 CD21                    		int     21h
   645                                  
   646                                  limpa_tudo: ;FUNÇÃO PARA LIMPAR O CAMPO TODO E VOLTAR PARA O ZERO
   647 00000515 E802FB                  	call reset_game
   648                                  
   649                                  ;***************************************************************************
   650                                  ;
   651                                  ;   função cursor
   652                                  ;
   653                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   654                                  cursor:
   655 00000518 9C                      		pushf
   656 00000519 50                      		push 		ax
   657 0000051A 53                      		push 		bx
   658 0000051B 51                      		push		cx
   659 0000051C 52                      		push		dx
   660 0000051D 56                      		push		si
   661 0000051E 57                      		push		di
   662 0000051F 55                      		push		bp
   663 00000520 B402                    		mov     	ah,2
   664 00000522 B700                    		mov     	bh,0
   665 00000524 CD10                    		int     	10h
   666 00000526 5D                      		pop		bp
   667 00000527 5F                      		pop		di
   668 00000528 5E                      		pop		si
   669 00000529 5A                      		pop		dx
   670 0000052A 59                      		pop		cx
   671 0000052B 5B                      		pop		bx
   672 0000052C 58                      		pop		ax
   673 0000052D 9D                      		popf
   674 0000052E C3                      		ret
   675                                  ;_____________________________________________________________________________
   676                                  ;
   677                                  ;   fun��o caracter escrito na posi��o do cursor
   678                                  ;
   679                                  ; al= caracter a ser escrito
   680                                  ; cor definida na variavel cor
   681                                  caracter:
   682 0000052F 9C                      		pushf
   683 00000530 50                      		push 		ax
   684 00000531 53                      		push 		bx
   685 00000532 51                      		push		cx
   686 00000533 52                      		push		dx
   687 00000534 56                      		push		si
   688 00000535 57                      		push		di
   689 00000536 55                      		push		bp
   690 00000537 B409                        	mov     	ah,9
   691 00000539 B700                        	mov     	bh,0
   692 0000053B B90100                      	mov     	cx,1
   693 0000053E 8A1E[0000]                 		mov     	bl,[cor]
   694 00000542 CD10                        	int     	10h
   695 00000544 5D                      		pop			bp
   696 00000545 5F                      		pop			di
   697 00000546 5E                      		pop			si
   698 00000547 5A                      		pop			dx
   699 00000548 59                      		pop			cx
   700 00000549 5B                      		pop			bx
   701 0000054A 58                      		pop			ax
   702 0000054B 9D                      		popf
   703 0000054C C3                      		ret
   704                                  ;_____________________________________________________________________________
   705                                  ;
   706                                  ;   fun��o plot_xy
   707                                  ;
   708                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   709                                  ; cor definida na variavel cor
   710                                  plot_xy:
   711 0000054D 55                      		push		bp
   712 0000054E 89E5                    		mov			bp,sp
   713 00000550 9C                      		pushf
   714 00000551 50                      		push 		ax
   715 00000552 53                      		push 		bx
   716 00000553 51                      		push		cx
   717 00000554 52                      		push		dx
   718 00000555 56                      		push		si
   719 00000556 57                      		push		di
   720 00000557 B40C                    	    mov     	ah,0ch
   721 00000559 A0[0000]                	    mov     	al,[cor]
   722 0000055C B700                    	    mov     	bh,0
   723 0000055E BADF01                  	    mov     	dx,479
   724 00000561 2B5604                  		sub			dx,[bp+4]
   725 00000564 8B4E06                  	    mov     	cx,[bp+6]
   726 00000567 CD10                    	    int     	10h
   727 00000569 5F                      		pop			di
   728 0000056A 5E                      		pop			si
   729 0000056B 5A                      		pop			dx
   730 0000056C 59                      		pop			cx
   731 0000056D 5B                      		pop			bx
   732 0000056E 58                      		pop			ax
   733 0000056F 9D                      		popf	
   734 00000570 5D                      		pop			bp
   735 00000571 C20400                  		ret			4
   736                                  ;_____________________________________________________________________________
   737                                  ;    fun��o circle
   738                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   739                                  ; cor definida na variavel cor
   740                                  circle:
   741 00000574 55                      		push 	bp
   742 00000575 89E5                    		mov	 	bp,sp
   743 00000577 9C                      		pushf                        ;coloca os flags na pilha
   744 00000578 50                      		push 	ax
   745 00000579 53                      		push 	bx
   746 0000057A 51                      		push	cx
   747 0000057B 52                      		push	dx
   748 0000057C 56                      		push	si
   749 0000057D 57                      		push	di
   750                                  		
   751 0000057E 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   752 00000581 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   753 00000584 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   754                                  		
   755 00000587 89DA                    		mov 	dx,bx	
   756 00000589 01CA                    		add		dx,cx       ;ponto extremo superior
   757 0000058B 50                      		push    ax			
   758 0000058C 52                      		push	dx
   759 0000058D E8BDFF                  		call plot_xy
   760                                  		
   761 00000590 89DA                    		mov		dx,bx
   762 00000592 29CA                    		sub		dx,cx       ;ponto extremo inferior
   763 00000594 50                      		push    ax			
   764 00000595 52                      		push	dx
   765 00000596 E8B4FF                  		call plot_xy
   766                                  		
   767 00000599 89C2                    		mov 	dx,ax	
   768 0000059B 01CA                    		add		dx,cx       ;ponto extremo direita
   769 0000059D 52                      		push    dx			
   770 0000059E 53                      		push	bx
   771 0000059F E8ABFF                  		call plot_xy
   772                                  		
   773 000005A2 89C2                    		mov		dx,ax
   774 000005A4 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   775 000005A6 52                      		push    dx			
   776 000005A7 53                      		push	bx
   777 000005A8 E8A2FF                  		call plot_xy
   778                                  			
   779 000005AB 89CF                    		mov		di,cx
   780 000005AD 81EF0100                		sub		di,1	 ;di=r-1
   781 000005B1 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   782                                  		
   783                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   784                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   785                                  ;valores positivos para d
   786                                  
   787                                  stay:				;loop
   788 000005B4 89FE                    		mov		si,di
   789 000005B6 81FE0000                		cmp		si,0
   790 000005BA 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   791 000005BC 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   792 000005BE D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   793 000005C0 81C60300                		add		si,3
   794 000005C4 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   795 000005C6 42                      		inc		dx		;incrementa dx
   796 000005C7 E90E00                  		jmp		plotar
   797                                  inf:	
   798 000005CA 89D6                    		mov		si,dx
   799 000005CC 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   800 000005CE D1E6                    		sal		si,1
   801 000005D0 81C60500                		add		si,5
   802 000005D4 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   803 000005D6 42                      		inc		dx		;incrementa x (dx)
   804 000005D7 49                      		dec		cx		;decrementa y (cx)
   805                                  	
   806                                  plotar:	
   807 000005D8 89D6                    		mov		si,dx
   808 000005DA 01C6                    		add		si,ax
   809 000005DC 56                      		push    si			;coloca a abcisa x+xc na pilha
   810 000005DD 89CE                    		mov		si,cx
   811 000005DF 01DE                    		add		si,bx
   812 000005E1 56                      		push    si			;coloca a ordenada y+yc na pilha
   813 000005E2 E868FF                  		call plot_xy		;toma conta do segundo octante
   814 000005E5 89C6                    		mov		si,ax
   815 000005E7 01D6                    		add		si,dx
   816 000005E9 56                      		push    si			;coloca a abcisa xc+x na pilha
   817 000005EA 89DE                    		mov		si,bx
   818 000005EC 29CE                    		sub		si,cx
   819 000005EE 56                      		push    si			;coloca a ordenada yc-y na pilha
   820 000005EF E85BFF                  		call plot_xy		;toma conta do s�timo octante
   821 000005F2 89C6                    		mov		si,ax
   822 000005F4 01CE                    		add		si,cx
   823 000005F6 56                      		push    si			;coloca a abcisa xc+y na pilha
   824 000005F7 89DE                    		mov		si,bx
   825 000005F9 01D6                    		add		si,dx
   826 000005FB 56                      		push    si			;coloca a ordenada yc+x na pilha
   827 000005FC E84EFF                  		call plot_xy		;toma conta do segundo octante
   828 000005FF 89C6                    		mov		si,ax
   829 00000601 01CE                    		add		si,cx
   830 00000603 56                      		push    si			;coloca a abcisa xc+y na pilha
   831 00000604 89DE                    		mov		si,bx
   832 00000606 29D6                    		sub		si,dx
   833 00000608 56                      		push    si			;coloca a ordenada yc-x na pilha
   834 00000609 E841FF                  		call plot_xy		;toma conta do oitavo octante
   835 0000060C 89C6                    		mov		si,ax
   836 0000060E 29D6                    		sub		si,dx
   837 00000610 56                      		push    si			;coloca a abcisa xc-x na pilha
   838 00000611 89DE                    		mov		si,bx
   839 00000613 01CE                    		add		si,cx
   840 00000615 56                      		push    si			;coloca a ordenada yc+y na pilha
   841 00000616 E834FF                  		call plot_xy		;toma conta do terceiro octante
   842 00000619 89C6                    		mov		si,ax
   843 0000061B 29D6                    		sub		si,dx
   844 0000061D 56                      		push    si			;coloca a abcisa xc-x na pilha
   845 0000061E 89DE                    		mov		si,bx
   846 00000620 29CE                    		sub		si,cx
   847 00000622 56                      		push    si			;coloca a ordenada yc-y na pilha
   848 00000623 E827FF                  		call plot_xy		;toma conta do sexto octante
   849 00000626 89C6                    		mov		si,ax
   850 00000628 29CE                    		sub		si,cx
   851 0000062A 56                      		push    si			;coloca a abcisa xc-y na pilha
   852 0000062B 89DE                    		mov		si,bx
   853 0000062D 29D6                    		sub		si,dx
   854 0000062F 56                      		push    si			;coloca a ordenada yc-x na pilha
   855 00000630 E81AFF                  		call plot_xy		;toma conta do quinto octante
   856 00000633 89C6                    		mov		si,ax
   857 00000635 29CE                    		sub		si,cx
   858 00000637 56                      		push    si			;coloca a abcisa xc-y na pilha
   859 00000638 89DE                    		mov		si,bx
   860 0000063A 01D6                    		add		si,dx
   861 0000063C 56                      		push    si			;coloca a ordenada yc-x na pilha
   862 0000063D E80DFF                  		call plot_xy		;toma conta do quarto octante
   863                                  		
   864 00000640 39D1                    		cmp		cx,dx
   865 00000642 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   866 00000644 E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   867                                  		
   868                                  fim_circle:
   869 00000647 5F                      		pop		di
   870 00000648 5E                      		pop		si
   871 00000649 5A                      		pop		dx
   872 0000064A 59                      		pop		cx
   873 0000064B 5B                      		pop		bx
   874 0000064C 58                      		pop		ax
   875 0000064D 9D                      		popf
   876 0000064E 5D                      		pop		bp
   877 0000064F C20600                  		ret		6
   878                                  ;-----------------------------------------------------------------------------
   879                                  ;    fun��o full_circle
   880                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   881                                  ; cor definida na variavel cor					  
   882                                  full_circle:
   883 00000652 55                      		push 	bp
   884 00000653 89E5                    		mov	 	bp,sp
   885 00000655 9C                      		pushf                        ;coloca os flags na pilha
   886 00000656 50                      		push 	ax
   887 00000657 53                      		push 	bx
   888 00000658 51                      		push	cx
   889 00000659 52                      		push	dx
   890 0000065A 56                      		push	si
   891 0000065B 57                      		push	di
   892                                  
   893 0000065C 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   894 0000065F 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   895 00000662 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   896                                  		
   897 00000665 89DE                    		mov		si,bx
   898 00000667 29CE                    		sub		si,cx
   899 00000669 50                      		push    ax			;coloca xc na pilha			
   900 0000066A 56                      		push	si			;coloca yc-r na pilha
   901 0000066B 89DE                    		mov		si,bx
   902 0000066D 01CE                    		add		si,cx
   903 0000066F 50                      		push	ax		;coloca xc na pilha
   904 00000670 56                      		push	si		;coloca yc+r na pilha
   905 00000671 E89B00                  		call line
   906                                  		
   907                                  			
   908 00000674 89CF                    		mov		di,cx
   909 00000676 81EF0100                		sub		di,1	 ;di=r-1
   910 0000067A BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   911                                  		
   912                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   913                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   914                                  ;valores positivos para d
   915                                  
   916                                  stay_full:				;loop
   917 0000067D 89FE                    		mov		si,di
   918 0000067F 81FE0000                		cmp		si,0
   919 00000683 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   920 00000685 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   921 00000687 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   922 00000689 81C60300                		add		si,3
   923 0000068D 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   924 0000068F 42                      		inc		dx		;incrementa dx
   925 00000690 E90E00                  		jmp		plotar_full
   926                                  
   927                                  inf_full:	
   928 00000693 89D6                    		mov		si,dx
   929 00000695 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   930 00000697 D1E6                    		sal		si,1
   931 00000699 81C60500                		add		si,5
   932 0000069D 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   933 0000069F 42                      		inc		dx		;incrementa x (dx)
   934 000006A0 49                      		dec		cx		;decrementa y (cx)
   935                                  	
   936                                  plotar_full:	
   937 000006A1 89C6                    		mov		si,ax
   938 000006A3 01CE                    		add		si,cx
   939 000006A5 56                      		push	si		;coloca a abcisa y+xc na pilha			
   940 000006A6 89DE                    		mov		si,bx
   941 000006A8 29D6                    		sub		si,dx
   942 000006AA 56                      		push    si		;coloca a ordenada yc-x na pilha
   943 000006AB 89C6                    		mov		si,ax
   944 000006AD 01CE                    		add		si,cx
   945 000006AF 56                      		push	si		;coloca a abcisa y+xc na pilha	
   946 000006B0 89DE                    		mov		si,bx
   947 000006B2 01D6                    		add		si,dx
   948 000006B4 56                      		push    si		;coloca a ordenada yc+x na pilha	
   949 000006B5 E85700                  		call 	line
   950                                  		
   951 000006B8 89C6                    		mov		si,ax
   952 000006BA 01D6                    		add		si,dx
   953 000006BC 56                      		push	si		;coloca a abcisa xc+x na pilha			
   954 000006BD 89DE                    		mov		si,bx
   955 000006BF 29CE                    		sub		si,cx
   956 000006C1 56                      		push    si		;coloca a ordenada yc-y na pilha
   957 000006C2 89C6                    		mov		si,ax
   958 000006C4 01D6                    		add		si,dx
   959 000006C6 56                      		push	si		;coloca a abcisa xc+x na pilha	
   960 000006C7 89DE                    		mov		si,bx
   961 000006C9 01CE                    		add		si,cx
   962 000006CB 56                      		push    si		;coloca a ordenada yc+y na pilha	
   963 000006CC E84000                  		call	line
   964                                  		
   965 000006CF 89C6                    		mov		si,ax
   966 000006D1 29D6                    		sub		si,dx
   967 000006D3 56                      		push	si		;coloca a abcisa xc-x na pilha			
   968 000006D4 89DE                    		mov		si,bx
   969 000006D6 29CE                    		sub		si,cx
   970 000006D8 56                      		push    si		;coloca a ordenada yc-y na pilha
   971 000006D9 89C6                    		mov		si,ax
   972 000006DB 29D6                    		sub		si,dx
   973 000006DD 56                      		push	si		;coloca a abcisa xc-x na pilha	
   974 000006DE 89DE                    		mov		si,bx
   975 000006E0 01CE                    		add		si,cx
   976 000006E2 56                      		push    si		;coloca a ordenada yc+y na pilha	
   977 000006E3 E82900                  		call	line
   978                                  		
   979 000006E6 89C6                    		mov		si,ax
   980 000006E8 29CE                    		sub		si,cx
   981 000006EA 56                      		push	si		;coloca a abcisa xc-y na pilha			
   982 000006EB 89DE                    		mov		si,bx
   983 000006ED 29D6                    		sub		si,dx
   984 000006EF 56                      		push    si		;coloca a ordenada yc-x na pilha
   985 000006F0 89C6                    		mov		si,ax
   986 000006F2 29CE                    		sub		si,cx
   987 000006F4 56                      		push	si		;coloca a abcisa xc-y na pilha	
   988 000006F5 89DE                    		mov		si,bx
   989 000006F7 01D6                    		add		si,dx
   990 000006F9 56                      		push    si		;coloca a ordenada yc+x na pilha	
   991 000006FA E81200                  		call	line
   992                                  		
   993 000006FD 39D1                    		cmp		cx,dx
   994 000006FF 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   995 00000701 E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   996                                  			
   997                                  fim_full_circle:
   998 00000704 5F                      		pop		di
   999 00000705 5E                      		pop		si
  1000 00000706 5A                      		pop		dx
  1001 00000707 59                      		pop		cx
  1002 00000708 5B                      		pop		bx
  1003 00000709 58                      		pop		ax
  1004 0000070A 9D                      		popf
  1005 0000070B 5D                      		pop		bp
  1006 0000070C C20600                  		ret		6
  1007                                  ;-----------------------------------------------------------------------------
  1008                                  ;
  1009                                  ;   fun��o line
  1010                                  ;
  1011                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1012                                  line:
  1013 0000070F 55                      		push		bp
  1014 00000710 89E5                    		mov		bp,sp
  1015 00000712 9C                      		pushf                        ;coloca os flags na pilha
  1016 00000713 50                      		push 		ax
  1017 00000714 53                      		push 		bx
  1018 00000715 51                      		push		cx
  1019 00000716 52                      		push		dx
  1020 00000717 56                      		push		si
  1021 00000718 57                      		push		di
  1022 00000719 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  1023 0000071C 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  1024 0000071F 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  1025 00000722 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  1026 00000725 39C8                    		cmp		ax,cx
  1027 00000727 7408                    		je		line2
  1028 00000729 721C                    		jb		line1
  1029 0000072B 91                      		xchg		ax,cx
  1030 0000072C 87DA                    		xchg		bx,dx
  1031 0000072E E91600                  		jmp		line1
  1032                                  
  1033                                  line2:		; deltax=0
  1034 00000731 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1035 00000733 7202                    		jb		line3
  1036 00000735 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1037                                  
  1038                                  line3:	; dx > bx
  1039 00000737 50                      		push		ax
  1040 00000738 53                      		push		bx
  1041 00000739 E811FE                  		call 		plot_xy
  1042 0000073C 39D3                    		cmp		bx,dx
  1043 0000073E 7503                    		jne		line31
  1044 00000740 E9C600                  		jmp		fim_line
  1045                                  line31:		
  1046 00000743 43                      		inc		bx
  1047 00000744 E9F0FF                  		jmp		line3
  1048                                  ;deltax <>0
  1049                                  line1:
  1050                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1051                                  	; cx > ax
  1052 00000747 51                      		push		cx
  1053 00000748 29C1                    		sub		cx,ax
  1054 0000074A 890E[0100]              		mov		[deltax],cx
  1055 0000074E 59                      		pop		cx
  1056 0000074F 52                      		push		dx
  1057 00000750 29DA                    		sub		dx,bx
  1058 00000752 7702                    		ja		line32
  1059 00000754 F7DA                    		neg		dx
  1060                                  line32:		
  1061 00000756 8916[0300]              		mov		[deltay],dx
  1062 0000075A 5A                      		pop		dx
  1063                                  
  1064 0000075B 50                      		push		ax
  1065 0000075C A1[0100]                		mov		ax,[deltax]
  1066 0000075F 3B06[0300]              		cmp		ax,[deltay]
  1067 00000763 58                      		pop		ax
  1068 00000764 724D                    		jb		line5
  1069                                  
  1070                                  	; cx > ax e deltax>deltay
  1071 00000766 51                      		push		cx
  1072 00000767 29C1                    		sub		cx,ax
  1073 00000769 890E[0100]              		mov		[deltax],cx
  1074 0000076D 59                      		pop		cx
  1075 0000076E 52                      		push		dx
  1076 0000076F 29DA                    		sub		dx,bx
  1077 00000771 8916[0300]              		mov		[deltay],dx
  1078 00000775 5A                      		pop		dx
  1079                                  
  1080 00000776 89C6                    		mov		si,ax
  1081                                  line4:
  1082 00000778 50                      		push		ax
  1083 00000779 52                      		push		dx
  1084 0000077A 56                      		push		si
  1085 0000077B 29C6                    		sub		si,ax	;(x-x1)
  1086 0000077D A1[0300]                		mov		ax,[deltay]
  1087 00000780 F7EE                    		imul		si
  1088 00000782 8B36[0100]              		mov		si,[deltax]		;arredondar
  1089 00000786 D1EE                    		shr		si,1
  1090                                  ; se numerador (DX)>0 soma se <0 subtrai
  1091 00000788 81FA0000                		cmp		dx,0
  1092 0000078C 7C09                    		jl		ar1
  1093 0000078E 01F0                    		add		ax,si
  1094 00000790 81D20000                		adc		dx,0
  1095 00000794 E90600                  		jmp		arc1
  1096 00000797 29F0                    ar1:		sub		ax,si
  1097 00000799 81DA0000                		sbb		dx,0
  1098                                  arc1:
  1099 0000079D F73E[0100]              		idiv		word [deltax]
  1100 000007A1 01D8                    		add		ax,bx
  1101 000007A3 5E                      		pop		si
  1102 000007A4 56                      		push		si
  1103 000007A5 50                      		push		ax
  1104 000007A6 E8A4FD                  		call		plot_xy
  1105 000007A9 5A                      		pop		dx
  1106 000007AA 58                      		pop		ax
  1107 000007AB 39CE                    		cmp		si,cx
  1108 000007AD 745A                    		je		fim_line
  1109 000007AF 46                      		inc		si
  1110 000007B0 E9C5FF                  		jmp		line4
  1111                                  
  1112 000007B3 39D3                    line5:		cmp		bx,dx
  1113 000007B5 7203                    		jb 		line7
  1114 000007B7 91                      		xchg		ax,cx
  1115 000007B8 87DA                    		xchg		bx,dx
  1116                                  line7:
  1117 000007BA 51                      		push		cx
  1118 000007BB 29C1                    		sub		cx,ax
  1119 000007BD 890E[0100]              		mov		[deltax],cx
  1120 000007C1 59                      		pop		cx
  1121 000007C2 52                      		push		dx
  1122 000007C3 29DA                    		sub		dx,bx
  1123 000007C5 8916[0300]              		mov		[deltay],dx
  1124 000007C9 5A                      		pop		dx
  1125 000007CA 89DE                    		mov		si,bx
  1126                                  line6:
  1127 000007CC 52                      		push		dx
  1128 000007CD 56                      		push		si
  1129 000007CE 50                      		push		ax
  1130 000007CF 29DE                    		sub		si,bx	;(y-y1)
  1131 000007D1 A1[0100]                		mov		ax,[deltax]
  1132 000007D4 F7EE                    		imul		si
  1133 000007D6 8B36[0300]              		mov		si,[deltay]		;arredondar
  1134 000007DA D1EE                    		shr		si,1
  1135                                  ; se numerador (DX)>0 soma se <0 subtrai
  1136 000007DC 81FA0000                		cmp		dx,0
  1137 000007E0 7C09                    		jl		ar2
  1138 000007E2 01F0                    		add		ax,si
  1139 000007E4 81D20000                		adc		dx,0
  1140 000007E8 E90600                  		jmp		arc2
  1141                                  ar2:		
  1142 000007EB 29F0                    		sub		ax,si
  1143 000007ED 81EA0000                		sub		dx,0
  1144                                  arc2:
  1145 000007F1 F73E[0300]              		idiv		word [deltay]
  1146 000007F5 89C7                    		mov		di,ax
  1147 000007F7 58                      		pop		ax
  1148 000007F8 01C7                    		add		di,ax
  1149 000007FA 5E                      		pop		si
  1150 000007FB 57                      		push		di
  1151 000007FC 56                      		push		si
  1152 000007FD E84DFD                  		call		plot_xy
  1153 00000800 5A                      		pop		dx
  1154 00000801 39D6                    		cmp		si,dx
  1155 00000803 7404                    		je		fim_line
  1156 00000805 46                      		inc		si
  1157 00000806 E9C3FF                  		jmp		line6
  1158                                  
  1159                                  fim_line:
  1160 00000809 5F                      		pop		di
  1161 0000080A 5E                      		pop		si
  1162 0000080B 5A                      		pop		dx
  1163 0000080C 59                      		pop		cx
  1164 0000080D 5B                      		pop		bx
  1165 0000080E 58                      		pop		ax
  1166 0000080F 9D                      		popf
  1167 00000810 5D                      		pop		bp
  1168 00000811 C20800                  		ret		8
  1169                                  ;*******************************************************************
  1170                                  segment data
  1171                                  
  1172                                  ;	I R G B COR
  1173                                  ;	0 0 0 0 preto
  1174                                  ;	0 0 0 1 azul
  1175                                  ;	0 0 1 0 verde
  1176                                  ;	0 0 1 1 cyan
  1177                                  ;	0 1 0 0 vermelho
  1178                                  ;	0 1 0 1 magenta
  1179                                  ;	0 1 1 0 marrom
  1180                                  ;	0 1 1 1 branco
  1181                                  ;	1 0 0 0 cinza
  1182                                  ;	1 0 0 1 azul claro
  1183                                  ;	1 0 1 0 verde claro
  1184                                  ;	1 0 1 1 cyan claro
  1185                                  ;	1 1 0 0 rosa
  1186                                  ;	1 1 0 1 magenta claro
  1187                                  ;	1 1 1 0 amarelo
  1188                                  ;	1 1 1 1 branco intenso
  1189                                  
  1190                                  
  1191 00000000 0F                      cor				db		branco_intenso
  1192                                  preto			equ		0
  1193                                  azul			equ		1
  1194                                  verde			equ		2
  1195                                  cyan			equ		3
  1196                                  vermelho		equ		4
  1197                                  magenta			equ		5
  1198                                  marrom			equ		6
  1199                                  branco			equ		7
  1200                                  cinza			equ		8
  1201                                  azul_claro		equ		9
  1202                                  verde_claro		equ		10
  1203                                  cyan_claro		equ		11
  1204                                  rosa			equ		12
  1205                                  magenta_claro	equ		13
  1206                                  amarelo			equ		14
  1207                                  branco_intenso	equ		15
  1208 00000001 0000                    deltax			dw		0
  1209 00000003 0000                    deltay			dw		0
  1210 00000005 00                      modo_anterior	db		0
  1211                                  
  1212 00000006 0500                    x1A				dw		5	;Usados para printar os quadrados
  1213 00000008 6900                    x2A				dw		105
  1214 0000000A 0500                    x1B 			dw		5
  1215 0000000C 6900                    x2B  			dw		105
  1216                                  
  1217 0000000E 0000                    apaga1			dw		0	;Variáveis para pegar qual quadrado apagar
  1218 00000010 0000                    apaga2			dw		0
  1219                                  
  1220 00000012 0E01                    player_x1    	dw      270	;Posição da raquete
  1221 00000014 7201                    player_x2    	dw      370
  1222                                  
  1223 00000016 4001                    px      		dw      320	;Posição da bola
  1224 00000018 1E00                    py      		dw      30
  1225                                  
  1226 0000001A 0000                    bloco_quebrado1	dw		0	;Variável para testar se a bola pode subir mais
  1227 0000001C 0000                    bloco_quebrado2	dw		0
  1228 0000001E 0000                    bloco_quebrado3	dw		0
  1229 00000020 0000                    bloco_quebrado4	dw		0
  1230 00000022 0000                    bloco_quebrado5	dw		0
  1231 00000024 0000                    bloco_quebrado6	dw		0
  1232                                  
  1233 00000026 0000                    yToDelete1		dw		0
  1234 00000028 0000                    yToDelete2		dw		0
  1235                                  
  1236 0000002A 0500                    vx      		dw      5	;Velocidade que a bola anda
  1237 0000002C 0500                    vy      		dw      5
  1238 0000002E 47414D45204F564552-     mens_3      	db          'GAME OVER. Deseja continuar? Y ou N'
  1239 00000037 2E20446573656A6120-
  1240 00000040 636F6E74696E756172-
  1241 00000049 3F2059206F75204E   
  1242                                  
  1243                                  ;*************************************************************************
  1244                                  segment stack stack
  1245 00000000 <res 00000200>              		resb 		512
  1246                                  stacktop:
