     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0500]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  reset_game:
    21                                  ; Desenhando o campo (bordas brancas)
    22 0000001A C606[0000]0F            		mov		byte[cor],branco_intenso
    23 0000001F B80000                  		mov		ax, 0
    24 00000022 50                      		push 	ax
    25 00000023 B80000                  		mov		ax, 0
    26 00000026 50                      		push	ax
    27 00000027 B80000                  		mov		ax, 0
    28 0000002A 50                      		push 	ax
    29 0000002B B8DF01                  		mov		ax, 479
    30 0000002E 50                      		push	ax
    31 0000002F E86407                  		call	line
    32                                  
    33 00000032 B80000                  		mov		ax, 0
    34 00000035 50                      		push 	ax
    35 00000036 B8DF01                  		mov		ax, 479
    36 00000039 50                      		push	ax
    37 0000003A B87F02                  		mov		ax, 639
    38 0000003D 50                      		push 	ax
    39 0000003E B8DF01                  		mov		ax, 479
    40 00000041 50                      		push	ax
    41 00000042 E85107                  		call	line
    42                                  		
    43 00000045 B87F02                  		mov		ax, 639
    44 00000048 50                      		push 	ax
    45 00000049 B8DF01                  		mov		ax, 479
    46 0000004C 50                      		push	ax
    47 0000004D B87F02                  		mov		ax, 639
    48 00000050 50                      		push 	ax
    49 00000051 B80000                  		mov		ax, 0
    50 00000054 50                      		push	ax
    51 00000055 E83E07                  		call	line
    52                                  
    53                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    54 00000058 B90600                  		mov		cx, 6
    55 0000005B C606[0000]01            		mov		byte[cor], azul
    56                                  	
    57                                  ; Primeira linha de quadrados (linha superior)
    58                                  fazQuadrado1:
    59 00000060 FE06[0000]              		inc		byte[cor]
    60 00000064 A1[0600]                		mov		ax, word[x1A]
    61 00000067 50                      		push 	ax
    62 00000068 B8DD01                  		mov		ax, 477
    63 0000006B 50                      		push	ax
    64 0000006C A1[0800]                		mov		ax, word[x2A]
    65 0000006F 50                      		push 	ax
    66 00000070 B8DD01                  		mov		ax, 477
    67 00000073 50                      		push	ax
    68 00000074 E81F07                  		call	line
    69                                  		
    70 00000077 A1[0800]                		mov		ax, word[x2A]
    71 0000007A 50                      		push 	ax
    72 0000007B B8DD01                  		mov		ax, 477
    73 0000007E 50                      		push	ax
    74 0000007F A1[0800]                		mov		ax, word[x2A]
    75 00000082 50                      		push 	ax
    76 00000083 B8B501                  		mov		ax, 437
    77 00000086 50                      		push	ax
    78 00000087 E80C07                  		call	line
    79                                  		
    80 0000008A A1[0800]                		mov		ax, word[x2A]
    81 0000008D 50                      		push 	ax
    82 0000008E B8B501                  		mov		ax, 437
    83 00000091 50                      		push	ax
    84 00000092 A1[0600]                		mov		ax, word[x1A]
    85 00000095 50                      		push 	ax
    86 00000096 B8B501                  		mov		ax, 437
    87 00000099 50                      		push	ax
    88 0000009A E8F906                  		call	line
    89                                  		
    90 0000009D A1[0600]                		mov		ax, word[x1A]
    91 000000A0 50                      		push 	ax
    92 000000A1 B8B501                  		mov		ax, 437
    93 000000A4 50                      		push	ax
    94 000000A5 A1[0600]                		mov		ax, word[x1A]
    95 000000A8 50                      		push 	ax
    96 000000A9 B8DD01                  		mov		ax, 477
    97 000000AC 50                      		push	ax
    98 000000AD E8E606                  		call	line
    99 000000B0 8106[0800]6900          		add		word[x2A], 105
   100 000000B6 8106[0600]6900          		add		word[x1A] , 105
   101 000000BC E2A2                    		loop 	fazQuadrado1
   102                                  		
   103                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   104 000000BE B90600                  		mov		cx, 6
   105 000000C1 C606[0000]08            		mov		byte[cor], cinza
   106                                  		
   107                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   108 000000C6 FE06[0000]              		inc		byte[cor]
   109 000000CA A1[0A00]                		mov		ax, word[x1B]
   110 000000CD 50                      		push 	ax
   111 000000CE B8AB01                  		mov		ax, 427
   112 000000D1 50                      		push	ax
   113 000000D2 A1[0C00]                		mov		ax, word[x2B]
   114 000000D5 50                      		push 	ax
   115 000000D6 B8AB01                  		mov		ax, 427
   116 000000D9 50                      		push	ax
   117 000000DA E8B906                  		call	line
   118                                  		
   119 000000DD A1[0C00]                		mov		ax, word[x2B]
   120 000000E0 50                      		push 	ax
   121 000000E1 B8AB01                  		mov		ax, 427
   122 000000E4 50                      		push	ax
   123 000000E5 A1[0C00]                		mov		ax, word[x2B]
   124 000000E8 50                      		push 	ax
   125 000000E9 B88301                  		mov		ax, 387
   126 000000EC 50                      		push	ax
   127 000000ED E8A606                  		call	line
   128                                  		
   129 000000F0 A1[0C00]                		mov		ax, word[x2B]
   130 000000F3 50                      		push 	ax
   131 000000F4 B88301                  		mov		ax, 387
   132 000000F7 50                      		push	ax
   133 000000F8 A1[0A00]                		mov		ax, word[x1B]
   134 000000FB 50                      		push 	ax
   135 000000FC B88301                  		mov		ax, 387
   136 000000FF 50                      		push	ax
   137 00000100 E89306                  		call	line
   138                                  		
   139 00000103 A1[0A00]                		mov		ax, word[x1B]
   140 00000106 50                      		push 	ax
   141 00000107 B88301                  		mov		ax, 387
   142 0000010A 50                      		push	ax
   143 0000010B A1[0A00]                		mov		ax, word[x1B]
   144 0000010E 50                      		push 	ax
   145 0000010F B8AB01                  		mov		ax, 427
   146 00000112 50                      		push	ax
   147 00000113 E88006                  		call	line
   148 00000116 8106[0C00]6900          		add		word[x2B], 105
   149 0000011C 8106[0A00]6900          		add		word[x1B] , 105
   150 00000122 E2A2                    		loop 	fazQuadrado2
   151                                  
   152                                  
   153                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   154                                  
   155                                  continua:
   156 00000124 E8A600                      	call limpa_bola
   157                                  
   158 00000127 8B1E[3600]                      mov bx, [vx]
   159 0000012B 011E[1600]                      add [px], bx
   160 0000012F 8B1E[3800]                      mov bx, [vy]
   161 00000133 011E[1800]                      add [py], bx
   162                                  
   163 00000137 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   164 0000013C A1[1600]                		mov		ax,[px]
   165 0000013F 50                      		push		ax
   166 00000140 A1[1800]                		mov		ax,[py]
   167 00000143 50                      		push		ax
   168 00000144 B81000                  		mov		ax,16
   169 00000147 50                      		push		ax
   170 00000148 E88E05                  		call	full_circle
   171                                  
   172 0000014B A1[1200]                		mov		ax, [player_x1] ; Desenhando a raquete
   173 0000014E 50                      		push 	ax
   174 0000014F B80A00                  		mov		ax, 10
   175 00000152 50                      		push	ax
   176 00000153 A1[1400]                		mov		ax, [player_x2]
   177 00000156 50                      		push 	ax
   178 00000157 B80A00                  		mov		ax, 10
   179 0000015A 50                      		push	ax
   180 0000015B E83806                  		call	line
   181                                  
   182 0000015E 59                              pop cx ; Recupera cx da pilha
   183 0000015F E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   184 00000161 E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   185 00000163 C3                              ret
   186                                  
   187                                  del2:
   188 00000164 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   189 00000165 B90008                          mov cx, 0800h ; Teste modificando este valor
   190                                  
   191                                  del1:
   192 00000168 BB6702                          mov bx, 615 ;Limita o campo na parte da direita
   193 0000016B 391E[1600]                      cmp [px], bx
   194 0000016F 7D71                            jge moveesquerda
   195                                  
   196 00000171 BB1400                          mov bx, 20 ; Limita o campo na parte da esquerda
   197 00000174 391E[1600]                      cmp [px], bx
   198 00000178 7E79                            jle movedireita
   199                                  
   200 0000017A BB6C01                          mov bx, 364 ; Limita o campo na parte de cima
   201 0000017D C706[3200]AB01          		mov	word[yToDelete1], 427
   202 00000183 C706[3400]8301          		mov	word[yToDelete2], 387
   203 00000189 391E[1800]                      cmp [py], bx
   204 0000018D 7D75                    		jge intermediateMoveBaixo2
   205                                  
   206                                  sobe_mais:
   207 0000018F BB9E01                  		mov	bx, 414
   208 00000192 C706[3200]DD01          		mov	word[yToDelete1], 477
   209 00000198 C706[3400]B501          		mov	word[yToDelete2], 437
   210 0000019E 391E[1800]              		cmp	[py], bx
   211 000001A2 7D60                    		jge	intermediateMoveBaixo2
   212                                  
   213                                  sobe_tudo:
   214 000001A4 BBC201                  		mov	bx, 450
   215 000001A7 391E[1800]              		cmp	[py], bx
   216 000001AB 7D68                    		jge	intermediateNaoApaga
   217                                  
   218 000001AD BB0A00                          mov bx, 10 ; Limita o campo na parte de baixo
   219 000001B0 391E[1800]                      cmp [py], bx
   220 000001B4 7E51                            jle movecima
   221                                  
   222 000001B6 B40B                            mov ah, 0bh      
   223 000001B8 CD21                            int 21h
   224 000001BA 3C00                            cmp al,0
   225 000001BC 755A                            jne intermediateVerifTeclas
   226 000001BE E82303                  		call calcular_colisao_raquete
   227 000001C1 E960FF                          jmp continua
   228                                  
   229 000001C4 E85DFF                  		call delay
   230 000001C7 E89EFF                  		call del1
   231 000001CA E897FF                  		call del2
   232                                  
   233                                  limpa_bola:
   234 000001CD C606[0000]00                    mov     byte[cor],preto ; limpa bola
   235 000001D2 A1[1600]                        mov     ax,[px]
   236 000001D5 50                              push        ax
   237 000001D6 A1[1800]                        mov     ax,[py]
   238 000001D9 50                              push        ax
   239 000001DA B81400                          mov     ax,20
   240 000001DD 50                              push        ax
   241 000001DE E8F804                          call    full_circle
   242 000001E1 C3                              ret
   243                                  
   244                                  moveesquerda:
   245 000001E2 E8E8FF                          call limpa_bola
   246 000001E5 A1[3600]                		mov ax, [vx]
   247 000001E8 F7D8                            neg ax
   248 000001EA 89C3                            mov bx, ax
   249 000001EC 891E[3600]                      mov [vx], bx
   250 000001F0 E931FF                          jmp continua
   251                                  
   252                                  movedireita:
   253 000001F3 E8D7FF                  		call limpa_bola
   254 000001F6 A1[3600]                        mov ax, [vx]
   255 000001F9 F7D8                            neg ax
   256 000001FB 89C3                            mov bx, ax
   257 000001FD 891E[3600]                      mov [vx], bx
   258 00000201 E920FF                          jmp continua
   259                                  
   260                                  intermediateMoveBaixo2
   261 00000204 E91A00                  	jmp movebaixo2
   262                                  
   263                                  movecima:
   264 00000207 A1[3800]                        mov ax, [vy]
   265 0000020A F7D8                            neg ax
   266 0000020C 89C3                            mov bx, ax
   267 0000020E 891E[3800]                      mov [vy], bx
   268 00000212 E90FFF                          jmp continua
   269                                  
   270                                  ;  PONTOS INTERMEDIÁRIOS PARA AS FUNÇÕES
   271                                  
   272                                  intermediateNaoApaga
   273 00000215 E94602                  	jmp	nao_apaga
   274                                  
   275                                  intermediateVerifTeclas: ;	Função intermediária para pular para outra parte do código
   276 00000218 E95D02                  	jmp verificar_teclas
   277                                  
   278                                  intermediateSobeMais:
   279 0000021B E971FF                  	jmp	sobe_mais
   280                                  
   281                                  intermediateSobeTudo:
   282 0000021E E983FF                  	jmp	sobe_tudo
   283                                  
   284                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   285                                  
   286                                  movebaixo2:
   287 00000221 B80500                  		mov ax, 5 ; Quadrado 1
   288 00000224 3906[1600]              		cmp [px], ax
   289 00000228 7D33                    		jge	verifica_quad1 ; Pula para verificar se acertou no limite do quadrado (todos repetem essa lógica)
   290                                  volta1:
   291 0000022A B86E00                  		mov ax, 110 ; Quadrado 2
   292 0000022D 3906[1600]              		cmp [px], ax
   293 00000231 7D7E                    		jge	verifica_quad2
   294                                  volta2:
   295 00000233 B8D700                  		mov ax, 215 ; Quadrado 3
   296 00000236 3906[1600]              		cmp [px], ax
   297 0000023A 7D69                    		jge	intermediateVerificaQuad3
   298                                  volta3:
   299 0000023C B84001                  		mov ax, 320 ; Quadrado 4
   300 0000023F 3906[1600]              		cmp [px], ax
   301 00000243 7D63                    		jge	intermediateVerificaQuad4
   302                                  volta4:
   303 00000245 B8A901                  		mov ax, 425 ; Quadrado 5
   304 00000248 3906[1600]              		cmp [px], ax
   305 0000024C 7D5D                    		jge	intermediateVerificaQuad5
   306                                  volta5:
   307 0000024E B81202                  		mov ax, 530 ; Quadrado 6
   308 00000251 3906[1600]              		cmp [px], ax
   309 00000255 7D57                    		jge	intermediateVerificaQuad6
   310                                  
   311                                  intermediateVolta2
   312 00000257 E9D9FF                  	jmp volta2
   313                                  
   314                                  intermediateSobeTudo4
   315 0000025A E947FF                  	jmp sobe_tudo
   316                                  
   317                                  verifica_quad1:
   318 0000025D B86900                  		mov ax, 105
   319 00000260 3906[1600]              		cmp	[px], ax
   320 00000264 7FC4                    		jg volta1 ; Se não acertou, volta para verificar o próximo quadrado
   321 00000266 B80100                  		mov	ax, 1
   322 00000269 3B06[2600]              		cmp ax, [bloco_cima_quebrado1]
   323 0000026D 74AF                    		je	intermediateSobeTudo
   324 0000026F B8DD01                  		mov	ax, 477
   325 00000272 3B06[3200]              		cmp ax, word[yToDelete1]
   326 00000276 741E                    		je	cima_quebrado1
   327 00000278 B80100                  		mov	ax, 1
   328 0000027B 3B06[1A00]              		cmp ax, word[bloco_quebrado1]
   329 0000027F 749A                    		je	intermediateSobeMais
   330                                  ignora1:
   331 00000281 C706[0E00]0500          		mov word[apaga1], 5
   332 00000287 C706[1000]6900          		mov word[apaga2], 105
   333 0000028D B80100                  		mov	ax, 1
   334 00000290 A3[1A00]                		mov	word[bloco_quebrado1], ax
   335 00000293 E97701                  		jmp	apaga_quad ; Se acertou no limite, apaga o quadrado e rebate a bola
   336                                  cima_quebrado1:
   337 00000296 B80100                  	mov	ax, 1
   338 00000299 A3[2800]                	mov	word[bloco_cima_quebrado2], ax
   339 0000029C E9E2FF                  	jmp	ignora1
   340                                  
   341                                  intermediateSobeMais2:
   342 0000029F E979FF                  	jmp intermediateSobeMais
   343                                  
   344                                  intermediateSobeTudo2:
   345 000002A2 E979FF                  	jmp intermediateSobeTudo
   346                                  
   347                                  intermediateVerificaQuad3:
   348 000002A5 E95100                  	jmp verifica_quad3
   349                                  
   350                                  intermediateVerificaQuad4:
   351 000002A8 E99300                  	jmp verifica_quad4
   352                                  
   353                                  intermediateVerificaQuad5:
   354 000002AB E9D800                  	jmp verifica_quad5
   355                                  
   356                                  intermediateVerificaQuad6:
   357 000002AE E91701                  	jmp verifica_quad6
   358                                  
   359                                  verifica_quad2:
   360 000002B1 B8D200                  		mov ax, 210
   361 000002B4 3906[1600]              		cmp	[px], ax
   362 000002B8 7F9D                    		jg intermediateVolta2
   363 000002BA B80100                  		mov	ax, 1
   364 000002BD 3B06[2800]              		cmp ax, [bloco_cima_quebrado2]
   365 000002C1 7497                    		je	intermediateSobeTudo4
   366 000002C3 B8DD01                  		mov	ax, 477
   367 000002C6 3B06[3200]              		cmp ax, word[yToDelete1]
   368 000002CA 741E                    		je	cima_quebrado2
   369 000002CC B80100                  		mov	ax, 1
   370 000002CF 3B06[1C00]              		cmp ax, [bloco_quebrado2]
   371 000002D3 74CA                    		je	intermediateSobeMais2
   372                                  ignora2:
   373 000002D5 C706[0E00]6E00          		mov word[apaga1], 110
   374 000002DB C706[1000]D200          		mov word[apaga2], 210
   375 000002E1 B80100                  		mov ax, 1
   376 000002E4 A3[1C00]                		mov	word[bloco_quebrado2], ax
   377 000002E7 E92301                  		jmp	apaga_quad
   378                                  cima_quebrado2:
   379 000002EA B80100                  	mov	ax, 1
   380 000002ED A3[2800]                	mov	word[bloco_cima_quebrado2], ax
   381 000002F0 E9E2FF                  	jmp	ignora2
   382                                  
   383                                  
   384                                  ;	Funções intermediárias para resolver o 'short jump
   385                                  intermediateVolta4:
   386 000002F3 E94FFF                  	jmp	volta4
   387                                  
   388                                  intermediateVolta3:
   389 000002F6 E943FF                  	jmp	volta3
   390                                  
   391                                  
   392                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   393                                  
   394                                  verifica_quad3:
   395 000002F9 B83B01                  		mov ax, 315
   396 000002FC 3906[1600]              		cmp	[px], ax
   397 00000300 7FF4                    		jg intermediateVolta3
   398 00000302 B80100                  		mov	ax, 1
   399 00000305 3B06[2A00]              		cmp ax, [bloco_cima_quebrado3]
   400 00000309 7478                    		je	intermediateSobeTudo3
   401 0000030B B8DD01                  		mov	ax, 477
   402 0000030E 3B06[3200]              		cmp ax, word[yToDelete1]
   403 00000312 7421                    		je	cima_quebrado3
   404 00000314 B80100                  		mov	ax, 1
   405 00000317 3B06[1E00]              		cmp ax, [bloco_quebrado3]
   406 0000031B 7463                    		je	intermediateSobeMais3
   407                                  ignora3:
   408 0000031D C706[0E00]D700          		mov word[apaga1], 215
   409 00000323 C706[1000]3B01          		mov word[apaga2], 315
   410 00000329 B80100                  		mov	ax, 1
   411 0000032C A3[1E00]                		mov	word[bloco_quebrado3], ax
   412 0000032F E9DB00                  		jmp	apaga_quad
   413                                  
   414                                  intermediateVolta5:
   415 00000332 E919FF                  	jmp	volta5
   416                                  
   417                                  cima_quebrado3:
   418 00000335 B80100                  	mov	ax, 1
   419 00000338 A3[2A00]                	mov	word[bloco_cima_quebrado3], ax
   420 0000033B E9DFFF                  	jmp	ignora3
   421                                  
   422                                  
   423                                  
   424                                  verifica_quad4:
   425 0000033E B8A401                  		mov ax, 420
   426 00000341 3906[1600]              		cmp	[px], ax
   427 00000345 7FAC                    		jg intermediateVolta4
   428 00000347 B80100                  		mov	ax, 1
   429 0000034A 3B06[2C00]              		cmp ax, [bloco_cima_quebrado4]
   430 0000034E 7433                    		je	intermediateSobeTudo3
   431 00000350 B8DD01                  		mov	ax, 477
   432 00000353 3B06[3200]              		cmp ax, word[yToDelete1]
   433 00000357 741E                    		je	cima_quebrado4
   434 00000359 B80100                  		mov	ax, 1
   435 0000035C 3B06[2000]              		cmp ax, [bloco_quebrado4]
   436 00000360 741E                    		je	intermediateSobeMais3
   437                                  ignora4:
   438 00000362 C706[0E00]4001          		mov word[apaga1], 320
   439 00000368 C706[1000]A401          		mov word[apaga2], 420
   440 0000036E B80100                  		mov	ax, 1
   441 00000371 A3[2000]                		mov	word[bloco_quebrado4], ax
   442 00000374 E99600                  		jmp	apaga_quad
   443                                  cima_quebrado4:
   444 00000377 B80100                  	mov	ax, 1
   445 0000037A A3[2C00]                	mov	word[bloco_cima_quebrado4], ax
   446 0000037D E9E2FF                  	jmp	ignora4
   447                                  
   448                                  
   449                                  
   450                                  intermediateSobeMais3
   451 00000380 E91CFF                  	jmp intermediateSobeMais2
   452                                  
   453                                  intermediateSobeTudo3
   454 00000383 E91CFF                  	jmp intermediateSobeTudo2
   455                                  
   456                                  verifica_quad5:
   457 00000386 B80D02                  		mov ax, 525
   458 00000389 3906[1600]              		cmp	[px], ax
   459 0000038D 7FA3                    		jg intermediateVolta5
   460 0000038F B80100                  		mov	ax, 1
   461 00000392 3B06[2E00]              		cmp ax, [bloco_cima_quebrado5]
   462 00000396 74EB                    		je	intermediateSobeTudo3
   463 00000398 B8DD01                  		mov	ax, 477
   464 0000039B 3B06[3200]              		cmp ax, word[yToDelete1]
   465 0000039F 741E                    		je	cima_quebrado5
   466 000003A1 B80100                  		mov	ax, 1
   467 000003A4 3B06[2200]              		cmp ax, [bloco_quebrado5]
   468 000003A8 74D6                    		je	intermediateSobeMais3
   469                                  ignora5:
   470 000003AA C706[0E00]A901          		mov word[apaga1], 425
   471 000003B0 C706[1000]0D02          		mov word[apaga2], 525
   472 000003B6 B80100                  		mov	ax, 1
   473 000003B9 A3[2200]                		mov	word[bloco_quebrado5], ax
   474 000003BC E94E00                  		jmp	apaga_quad
   475                                  cima_quebrado5:
   476 000003BF B80100                  	mov	ax, 1
   477 000003C2 A3[2E00]                	mov	word[bloco_cima_quebrado5], ax
   478 000003C5 E9E2FF                  	jmp	ignora5
   479                                  
   480                                  verifica_quad6:
   481 000003C8 B87602                  		mov ax, 630
   482 000003CB 3906[1600]              		cmp	[px], ax
   483 000003CF 7F39                    		jg intermediateNaoApaga2
   484 000003D1 B80100                  		mov	ax, 1
   485 000003D4 3B06[3000]              		cmp ax, [bloco_cima_quebrado6]
   486 000003D8 74A9                    		je	intermediateSobeTudo3
   487 000003DA B8DD01                  		mov	ax, 477
   488 000003DD 3B06[3200]              		cmp ax, word[yToDelete1]
   489 000003E1 741E                    		je	cima_quebrado6
   490 000003E3 B80100                  		mov	ax, 1
   491 000003E6 3B06[2400]              		cmp ax, [bloco_quebrado6]
   492 000003EA 7494                    		je	intermediateSobeMais3
   493                                  ignora6:
   494 000003EC C706[0E00]1202          		mov word[apaga1], 530
   495 000003F2 C706[1000]7602          		mov word[apaga2], 630
   496 000003F8 B80100                  		mov	ax, 1
   497 000003FB A3[2400]                		mov	word[bloco_quebrado6], ax
   498 000003FE E90C00                  		jmp	apaga_quad
   499                                  cima_quebrado6:
   500 00000401 B80100                  	mov	ax, 1
   501 00000404 A3[3000]                	mov	word[bloco_cima_quebrado6], ax
   502 00000407 E9E2FF                  	jmp	ignora6
   503                                  
   504                                  intermediateNaoApaga2
   505 0000040A E95100                  	jmp nao_apaga
   506                                  
   507                                  apaga_quad:
   508 0000040D C606[0000]00            		mov		byte[cor], preto
   509 00000412 A1[0E00]                		mov		ax, word[apaga1]
   510 00000415 50                      		push 	ax
   511 00000416 A1[3200]                		mov		ax, word[yToDelete1]
   512 00000419 50                      		push	ax
   513 0000041A A1[1000]                		mov		ax, word[apaga2]
   514 0000041D 50                      		push 	ax
   515 0000041E A1[3200]                		mov		ax, word[yToDelete1]
   516 00000421 50                      		push	ax
   517 00000422 E87103                  		call	line
   518                                  		
   519 00000425 A1[1000]                		mov		ax, word[apaga2]
   520 00000428 50                      		push 	ax
   521 00000429 A1[3200]                		mov		ax, word[yToDelete1]
   522 0000042C 50                      		push	ax
   523 0000042D A1[1000]                		mov		ax, word[apaga2]
   524 00000430 50                      		push 	ax
   525 00000431 A1[3400]                		mov		ax, word[yToDelete2]
   526 00000434 50                      		push	ax
   527 00000435 E85E03                  		call	line
   528                                  		
   529 00000438 A1[1000]                		mov		ax, word[apaga2]
   530 0000043B 50                      		push 	ax
   531 0000043C A1[3400]                		mov		ax, word[yToDelete2]
   532 0000043F 50                      		push	ax
   533 00000440 A1[0E00]                		mov		ax, word[apaga1]
   534 00000443 50                      		push 	ax
   535 00000444 A1[3400]                		mov		ax, word[yToDelete2]
   536 00000447 50                      		push	ax
   537 00000448 E84B03                  		call	line
   538                                  		
   539 0000044B A1[0E00]                		mov		ax, word[apaga1]
   540 0000044E 50                      		push 	ax
   541 0000044F A1[3400]                		mov		ax, word[yToDelete2]
   542 00000452 50                      		push	ax
   543 00000453 A1[0E00]                		mov		ax, word[apaga1]
   544 00000456 50                      		push 	ax
   545 00000457 A1[3200]                		mov		ax, word[yToDelete1]
   546 0000045A 50                      		push	ax
   547 0000045B E83803                  		call	line
   548                                  
   549                                  nao_apaga:
   550 0000045E A1[3800]                        mov ax, [vy]
   551 00000461 F7D8                            neg ax
   552 00000463 89C3                            mov bx, ax
   553 00000465 891E[3800]                      mov [vy], bx
   554 00000469 E9B8FC                          jmp continua
   555                                  
   556                                  sai:
   557 0000046C B400                            mov ah,0 ; set video mode
   558 0000046E A0[0500]                        mov al,[modo_anterior] ; recupera o modo anterior
   559 00000471 CD10                            int 10h
   560 00000473 B8004C                          mov ax,4c00h
   561 00000476 CD21                            int 21h
   562                                  		
   563                                  
   564                                  verificar_teclas: ;Estrutura para decidir o que será feito durante o jogo
   565 00000478 55                              push bp
   566 00000479 89E5                            mov bp, sp
   567 0000047B B408                            mov ah, 08h
   568 0000047D CD21                            int 21h
   569 0000047F 3C70                    		cmp al, 70h ; Código ASCII para a tecla 'p'
   570 00000481 742B                    		je	pausa
   571 00000483 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   572 00000485 74E5                            je sai
   573 00000487 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   574 00000489 752E                            jne verificar_baixo
   575 0000048B E8B500                          call limpa_raquete ;Se 'd' não for pressionado, ele pula para baixo e mexe a raquete
   576 0000048E B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   577 00000491 BB7602                          mov bx, 630 ;testa se já chegou no limite
   578 00000494 391E[1400]                      cmp [player_x2], bx
   579 00000498 7D46                            jge fim_verificar_teclas
   580 0000049A 0306[1200]                      add ax, [player_x1]
   581 0000049E A3[1200]                        mov [player_x1], ax
   582 000004A1 B81400                          mov ax, 20
   583 000004A4 0306[1400]                      add ax, [player_x2]
   584 000004A8 A3[1400]                        mov [player_x2], ax
   585 000004AB E93200                          jmp fim_verificar_teclas
   586                                  
   587                                  
   588                                  pausa:
   589 000004AE B408                            mov ah, 08h
   590 000004B0 CD21                            int 21h
   591 000004B2 3C70                    		cmp al, 70h ;Compara a tecla com a letra 'p', fica parado aqui até apertar 'p' novamente
   592 000004B4 75F8                    		jne pausa
   593 000004B6 E96BFC                  		jmp continua
   594                                  
   595                                  verificar_baixo:
   596 000004B9 3C61                            cmp al, 61h
   597 000004BB 7523                            jne fim_verificar_teclas
   598 000004BD E88300                          call limpa_raquete
   599 000004C0 B8ECFF                          mov ax, -20
   600 000004C3 BB0A00                          mov bx, 10
   601 000004C6 391E[1200]                      cmp [player_x1], bx
   602 000004CA 7E14                            jle fim_verificar_teclas
   603 000004CC 0306[1200]                      add ax, [player_x1]
   604 000004D0 A3[1200]                        mov [player_x1], ax
   605 000004D3 B8ECFF                          mov ax, -20
   606 000004D6 0306[1400]                      add ax, [player_x2]
   607 000004DA A3[1400]                        mov [player_x2], ax
   608 000004DD E90000                          jmp fim_verificar_teclas
   609                                  
   610                                  fim_verificar_teclas:
   611 000004E0 5D                              pop bp
   612 000004E1 E940FC                          jmp continua
   613                                  
   614                                  calcular_colisao_raquete:
   615 000004E4 B81E00                          mov ax, 30
   616 000004E7 3906[1800]                      cmp [py], ax
   617 000004EB 7403                            je verifica_colisao_raquete
   618 000004ED 7C6D                    		jl game_over
   619 000004EF C3                              ret
   620                                  
   621                                  verifica_colisao_raquete:
   622 000004F0 8B1E[1400]                      mov bx, [player_x2]
   623 000004F4 81C31000                        add bx, 16
   624 000004F8 391E[1600]                      cmp [px], bx
   625 000004FC 7E0F                            jle rebate_cima1
   626 000004FE 8B1E[1200]                      mov bx, [player_x1]
   627 00000502 81EB1000                        sub bx, 16
   628 00000506 391E[1600]                      cmp [px], bx
   629 0000050A 7D1C                            jge rebate_baixo1
   630 0000050C C3                              ret
   631                                  
   632                                  ;FUNÇÕES RESPONSÁVEIS POR REBATER A BOLA E ALTERAR A DIREÇÃO (ESQUERDA OU DIREITA)
   633                                  rebate_cima1:
   634 0000050D 8B1E[1200]              		mov bx, [player_x1]
   635 00000511 81EB1000                		sub bx, 16
   636 00000515 391E[1600]              		cmp [px], bx
   637 00000519 7D01                    		jge rebate_cima2
   638 0000051B C3                              ret
   639                                  
   640                                  rebate_cima2:
   641 0000051C A1[3800]                        mov ax, [vy]
   642 0000051F F7D8                            neg ax
   643 00000521 89C3                            mov bx, ax
   644 00000523 891E[3800]              		mov [vy], bx
   645 00000527 C3                              ret
   646                                  
   647                                  rebate_baixo1:
   648 00000528 8B1E[1400]                      mov bx, [player_x2]
   649 0000052C 81C31000                        add bx, 16
   650 00000530 391E[1600]                      cmp [px], bx
   651 00000534 7E01                            jle rebate_baixo2
   652 00000536 C3                              ret
   653                                  
   654                                  rebate_baixo2:
   655 00000537 A1[3800]                        mov ax, [vy]
   656 0000053A F7D8                            neg ax
   657 0000053C 89C3                            mov bx, ax
   658 0000053E 891E[3800]                      mov [vy], bx
   659 00000542 C3                              ret
   660                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   661                                  
   662                                  limpa_raquete: ;FUNÇÃO UTILIZADA PARA ATUALIZAR A POSIÇÃO DA RAQUETE 
   663 00000543 C606[0000]00                    mov     byte[cor], preto
   664 00000548 A1[1200]                        mov     ax,[player_x1]
   665 0000054B 50                              push    ax
   666 0000054C B80A00                          mov     ax,10
   667 0000054F 50                              push    ax
   668 00000550 A1[1400]                        mov     ax,[player_x2]
   669 00000553 50                              push    ax
   670 00000554 B80A00                          mov     ax,10
   671 00000557 50                              push    ax
   672 00000558 E83B02                          call    line
   673 0000055B C3                              ret
   674                                  
   675                                  game_over: ;;Escreve a mensagem na tela e espera a tecla do jogador
   676 0000055C B92300                  		mov     	cx,35			;número de caracteres
   677 0000055F BB0000                      	mov     	bx,0
   678 00000562 B60A                        	mov     	dh,10			
   679 00000564 B20A                        	mov     	dl,10
   680 00000566 C606[0000]0F            		mov		byte[cor],branco_intenso
   681                                  
   682                                  repete_para_escrever:
   683 0000056B E83100                  		call	cursor
   684 0000056E 8A87[3A00]                  	mov     al,[bx+mens_3]
   685 00000572 E84100                  		call	caracter
   686 00000575 43                          	inc     bx			;proximo caracter
   687 00000576 FEC2                    		inc		dl			;avanca a coluna
   688 00000578 E2F1                        	loop    repete_para_escrever
   689                                  
   690                                  verfica_continua_ou_nao:
   691 0000057A 55                      		push bp
   692 0000057B 89E5                            mov bp, sp
   693                                  
   694 0000057D B408                    		mov ah, 08h
   695 0000057F CD21                            int 21h
   696 00000581 3C6E                    		cmp al, 6eh
   697 00000583 7407                    		je	acaba
   698 00000585 3C79                    		cmp al, 79h
   699 00000587 7413                    		je limpa_tudo
   700 00000589 E9EEFF                  		jmp	verfica_continua_ou_nao
   701                                  
   702                                  acaba: ;Finalizando o programa
   703 0000058C B408                    		mov    	ah,08h
   704 0000058E CD21                    		int     21h
   705 00000590 B400                    	    mov  	ah,0   					; set video mode
   706 00000592 A0[0500]                	    mov  	al,[modo_anterior]   	; modo anterior
   707 00000595 CD10                    	    int  	10h
   708 00000597 B8004C                  		mov     ax,4c00h
   709 0000059A CD21                    		int     21h
   710                                  
   711                                  limpa_tudo: ;FUNÇÃO PARA LIMPAR O CAMPO TODO E VOLTAR PARA O ZERO
   712 0000059C E87BFA                  	call reset_game
   713                                  
   714                                  ;***************************************************************************
   715                                  ;
   716                                  ;   função cursor
   717                                  ;
   718                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   719                                  cursor:
   720 0000059F 9C                      		pushf
   721 000005A0 50                      		push 		ax
   722 000005A1 53                      		push 		bx
   723 000005A2 51                      		push		cx
   724 000005A3 52                      		push		dx
   725 000005A4 56                      		push		si
   726 000005A5 57                      		push		di
   727 000005A6 55                      		push		bp
   728 000005A7 B402                    		mov     	ah,2
   729 000005A9 B700                    		mov     	bh,0
   730 000005AB CD10                    		int     	10h
   731 000005AD 5D                      		pop		bp
   732 000005AE 5F                      		pop		di
   733 000005AF 5E                      		pop		si
   734 000005B0 5A                      		pop		dx
   735 000005B1 59                      		pop		cx
   736 000005B2 5B                      		pop		bx
   737 000005B3 58                      		pop		ax
   738 000005B4 9D                      		popf
   739 000005B5 C3                      		ret
   740                                  ;_____________________________________________________________________________
   741                                  ;
   742                                  ;   fun��o caracter escrito na posi��o do cursor
   743                                  ;
   744                                  ; al= caracter a ser escrito
   745                                  ; cor definida na variavel cor
   746                                  caracter:
   747 000005B6 9C                      		pushf
   748 000005B7 50                      		push 		ax
   749 000005B8 53                      		push 		bx
   750 000005B9 51                      		push		cx
   751 000005BA 52                      		push		dx
   752 000005BB 56                      		push		si
   753 000005BC 57                      		push		di
   754 000005BD 55                      		push		bp
   755 000005BE B409                        	mov     	ah,9
   756 000005C0 B700                        	mov     	bh,0
   757 000005C2 B90100                      	mov     	cx,1
   758 000005C5 8A1E[0000]                 		mov     	bl,[cor]
   759 000005C9 CD10                        	int     	10h
   760 000005CB 5D                      		pop			bp
   761 000005CC 5F                      		pop			di
   762 000005CD 5E                      		pop			si
   763 000005CE 5A                      		pop			dx
   764 000005CF 59                      		pop			cx
   765 000005D0 5B                      		pop			bx
   766 000005D1 58                      		pop			ax
   767 000005D2 9D                      		popf
   768 000005D3 C3                      		ret
   769                                  ;_____________________________________________________________________________
   770                                  ;
   771                                  ;   fun��o plot_xy
   772                                  ;
   773                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   774                                  ; cor definida na variavel cor
   775                                  plot_xy:
   776 000005D4 55                      		push		bp
   777 000005D5 89E5                    		mov			bp,sp
   778 000005D7 9C                      		pushf
   779 000005D8 50                      		push 		ax
   780 000005D9 53                      		push 		bx
   781 000005DA 51                      		push		cx
   782 000005DB 52                      		push		dx
   783 000005DC 56                      		push		si
   784 000005DD 57                      		push		di
   785 000005DE B40C                    	    mov     	ah,0ch
   786 000005E0 A0[0000]                	    mov     	al,[cor]
   787 000005E3 B700                    	    mov     	bh,0
   788 000005E5 BADF01                  	    mov     	dx,479
   789 000005E8 2B5604                  		sub			dx,[bp+4]
   790 000005EB 8B4E06                  	    mov     	cx,[bp+6]
   791 000005EE CD10                    	    int     	10h
   792 000005F0 5F                      		pop			di
   793 000005F1 5E                      		pop			si
   794 000005F2 5A                      		pop			dx
   795 000005F3 59                      		pop			cx
   796 000005F4 5B                      		pop			bx
   797 000005F5 58                      		pop			ax
   798 000005F6 9D                      		popf	
   799 000005F7 5D                      		pop			bp
   800 000005F8 C20400                  		ret			4
   801                                  ;_____________________________________________________________________________
   802                                  ;    fun��o circle
   803                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   804                                  ; cor definida na variavel cor
   805                                  circle:
   806 000005FB 55                      		push 	bp
   807 000005FC 89E5                    		mov	 	bp,sp
   808 000005FE 9C                      		pushf                        ;coloca os flags na pilha
   809 000005FF 50                      		push 	ax
   810 00000600 53                      		push 	bx
   811 00000601 51                      		push	cx
   812 00000602 52                      		push	dx
   813 00000603 56                      		push	si
   814 00000604 57                      		push	di
   815                                  		
   816 00000605 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   817 00000608 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   818 0000060B 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   819                                  		
   820 0000060E 89DA                    		mov 	dx,bx	
   821 00000610 01CA                    		add		dx,cx       ;ponto extremo superior
   822 00000612 50                      		push    ax			
   823 00000613 52                      		push	dx
   824 00000614 E8BDFF                  		call plot_xy
   825                                  		
   826 00000617 89DA                    		mov		dx,bx
   827 00000619 29CA                    		sub		dx,cx       ;ponto extremo inferior
   828 0000061B 50                      		push    ax			
   829 0000061C 52                      		push	dx
   830 0000061D E8B4FF                  		call plot_xy
   831                                  		
   832 00000620 89C2                    		mov 	dx,ax	
   833 00000622 01CA                    		add		dx,cx       ;ponto extremo direita
   834 00000624 52                      		push    dx			
   835 00000625 53                      		push	bx
   836 00000626 E8ABFF                  		call plot_xy
   837                                  		
   838 00000629 89C2                    		mov		dx,ax
   839 0000062B 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   840 0000062D 52                      		push    dx			
   841 0000062E 53                      		push	bx
   842 0000062F E8A2FF                  		call plot_xy
   843                                  			
   844 00000632 89CF                    		mov		di,cx
   845 00000634 81EF0100                		sub		di,1	 ;di=r-1
   846 00000638 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   847                                  		
   848                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   849                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   850                                  ;valores positivos para d
   851                                  
   852                                  stay:				;loop
   853 0000063B 89FE                    		mov		si,di
   854 0000063D 81FE0000                		cmp		si,0
   855 00000641 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   856 00000643 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   857 00000645 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   858 00000647 81C60300                		add		si,3
   859 0000064B 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   860 0000064D 42                      		inc		dx		;incrementa dx
   861 0000064E E90E00                  		jmp		plotar
   862                                  inf:	
   863 00000651 89D6                    		mov		si,dx
   864 00000653 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   865 00000655 D1E6                    		sal		si,1
   866 00000657 81C60500                		add		si,5
   867 0000065B 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   868 0000065D 42                      		inc		dx		;incrementa x (dx)
   869 0000065E 49                      		dec		cx		;decrementa y (cx)
   870                                  	
   871                                  plotar:	
   872 0000065F 89D6                    		mov		si,dx
   873 00000661 01C6                    		add		si,ax
   874 00000663 56                      		push    si			;coloca a abcisa x+xc na pilha
   875 00000664 89CE                    		mov		si,cx
   876 00000666 01DE                    		add		si,bx
   877 00000668 56                      		push    si			;coloca a ordenada y+yc na pilha
   878 00000669 E868FF                  		call plot_xy		;toma conta do segundo octante
   879 0000066C 89C6                    		mov		si,ax
   880 0000066E 01D6                    		add		si,dx
   881 00000670 56                      		push    si			;coloca a abcisa xc+x na pilha
   882 00000671 89DE                    		mov		si,bx
   883 00000673 29CE                    		sub		si,cx
   884 00000675 56                      		push    si			;coloca a ordenada yc-y na pilha
   885 00000676 E85BFF                  		call plot_xy		;toma conta do s�timo octante
   886 00000679 89C6                    		mov		si,ax
   887 0000067B 01CE                    		add		si,cx
   888 0000067D 56                      		push    si			;coloca a abcisa xc+y na pilha
   889 0000067E 89DE                    		mov		si,bx
   890 00000680 01D6                    		add		si,dx
   891 00000682 56                      		push    si			;coloca a ordenada yc+x na pilha
   892 00000683 E84EFF                  		call plot_xy		;toma conta do segundo octante
   893 00000686 89C6                    		mov		si,ax
   894 00000688 01CE                    		add		si,cx
   895 0000068A 56                      		push    si			;coloca a abcisa xc+y na pilha
   896 0000068B 89DE                    		mov		si,bx
   897 0000068D 29D6                    		sub		si,dx
   898 0000068F 56                      		push    si			;coloca a ordenada yc-x na pilha
   899 00000690 E841FF                  		call plot_xy		;toma conta do oitavo octante
   900 00000693 89C6                    		mov		si,ax
   901 00000695 29D6                    		sub		si,dx
   902 00000697 56                      		push    si			;coloca a abcisa xc-x na pilha
   903 00000698 89DE                    		mov		si,bx
   904 0000069A 01CE                    		add		si,cx
   905 0000069C 56                      		push    si			;coloca a ordenada yc+y na pilha
   906 0000069D E834FF                  		call plot_xy		;toma conta do terceiro octante
   907 000006A0 89C6                    		mov		si,ax
   908 000006A2 29D6                    		sub		si,dx
   909 000006A4 56                      		push    si			;coloca a abcisa xc-x na pilha
   910 000006A5 89DE                    		mov		si,bx
   911 000006A7 29CE                    		sub		si,cx
   912 000006A9 56                      		push    si			;coloca a ordenada yc-y na pilha
   913 000006AA E827FF                  		call plot_xy		;toma conta do sexto octante
   914 000006AD 89C6                    		mov		si,ax
   915 000006AF 29CE                    		sub		si,cx
   916 000006B1 56                      		push    si			;coloca a abcisa xc-y na pilha
   917 000006B2 89DE                    		mov		si,bx
   918 000006B4 29D6                    		sub		si,dx
   919 000006B6 56                      		push    si			;coloca a ordenada yc-x na pilha
   920 000006B7 E81AFF                  		call plot_xy		;toma conta do quinto octante
   921 000006BA 89C6                    		mov		si,ax
   922 000006BC 29CE                    		sub		si,cx
   923 000006BE 56                      		push    si			;coloca a abcisa xc-y na pilha
   924 000006BF 89DE                    		mov		si,bx
   925 000006C1 01D6                    		add		si,dx
   926 000006C3 56                      		push    si			;coloca a ordenada yc-x na pilha
   927 000006C4 E80DFF                  		call plot_xy		;toma conta do quarto octante
   928                                  		
   929 000006C7 39D1                    		cmp		cx,dx
   930 000006C9 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   931 000006CB E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   932                                  		
   933                                  fim_circle:
   934 000006CE 5F                      		pop		di
   935 000006CF 5E                      		pop		si
   936 000006D0 5A                      		pop		dx
   937 000006D1 59                      		pop		cx
   938 000006D2 5B                      		pop		bx
   939 000006D3 58                      		pop		ax
   940 000006D4 9D                      		popf
   941 000006D5 5D                      		pop		bp
   942 000006D6 C20600                  		ret		6
   943                                  ;-----------------------------------------------------------------------------
   944                                  ;    fun��o full_circle
   945                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   946                                  ; cor definida na variavel cor					  
   947                                  full_circle:
   948 000006D9 55                      		push 	bp
   949 000006DA 89E5                    		mov	 	bp,sp
   950 000006DC 9C                      		pushf                        ;coloca os flags na pilha
   951 000006DD 50                      		push 	ax
   952 000006DE 53                      		push 	bx
   953 000006DF 51                      		push	cx
   954 000006E0 52                      		push	dx
   955 000006E1 56                      		push	si
   956 000006E2 57                      		push	di
   957                                  
   958 000006E3 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   959 000006E6 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   960 000006E9 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   961                                  		
   962 000006EC 89DE                    		mov		si,bx
   963 000006EE 29CE                    		sub		si,cx
   964 000006F0 50                      		push    ax			;coloca xc na pilha			
   965 000006F1 56                      		push	si			;coloca yc-r na pilha
   966 000006F2 89DE                    		mov		si,bx
   967 000006F4 01CE                    		add		si,cx
   968 000006F6 50                      		push	ax		;coloca xc na pilha
   969 000006F7 56                      		push	si		;coloca yc+r na pilha
   970 000006F8 E89B00                  		call line
   971                                  		
   972                                  			
   973 000006FB 89CF                    		mov		di,cx
   974 000006FD 81EF0100                		sub		di,1	 ;di=r-1
   975 00000701 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   976                                  		
   977                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   978                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   979                                  ;valores positivos para d
   980                                  
   981                                  stay_full:				;loop
   982 00000704 89FE                    		mov		si,di
   983 00000706 81FE0000                		cmp		si,0
   984 0000070A 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   985 0000070C 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   986 0000070E D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   987 00000710 81C60300                		add		si,3
   988 00000714 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   989 00000716 42                      		inc		dx		;incrementa dx
   990 00000717 E90E00                  		jmp		plotar_full
   991                                  
   992                                  inf_full:	
   993 0000071A 89D6                    		mov		si,dx
   994 0000071C 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   995 0000071E D1E6                    		sal		si,1
   996 00000720 81C60500                		add		si,5
   997 00000724 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   998 00000726 42                      		inc		dx		;incrementa x (dx)
   999 00000727 49                      		dec		cx		;decrementa y (cx)
  1000                                  	
  1001                                  plotar_full:	
  1002 00000728 89C6                    		mov		si,ax
  1003 0000072A 01CE                    		add		si,cx
  1004 0000072C 56                      		push	si		;coloca a abcisa y+xc na pilha			
  1005 0000072D 89DE                    		mov		si,bx
  1006 0000072F 29D6                    		sub		si,dx
  1007 00000731 56                      		push    si		;coloca a ordenada yc-x na pilha
  1008 00000732 89C6                    		mov		si,ax
  1009 00000734 01CE                    		add		si,cx
  1010 00000736 56                      		push	si		;coloca a abcisa y+xc na pilha	
  1011 00000737 89DE                    		mov		si,bx
  1012 00000739 01D6                    		add		si,dx
  1013 0000073B 56                      		push    si		;coloca a ordenada yc+x na pilha	
  1014 0000073C E85700                  		call 	line
  1015                                  		
  1016 0000073F 89C6                    		mov		si,ax
  1017 00000741 01D6                    		add		si,dx
  1018 00000743 56                      		push	si		;coloca a abcisa xc+x na pilha			
  1019 00000744 89DE                    		mov		si,bx
  1020 00000746 29CE                    		sub		si,cx
  1021 00000748 56                      		push    si		;coloca a ordenada yc-y na pilha
  1022 00000749 89C6                    		mov		si,ax
  1023 0000074B 01D6                    		add		si,dx
  1024 0000074D 56                      		push	si		;coloca a abcisa xc+x na pilha	
  1025 0000074E 89DE                    		mov		si,bx
  1026 00000750 01CE                    		add		si,cx
  1027 00000752 56                      		push    si		;coloca a ordenada yc+y na pilha	
  1028 00000753 E84000                  		call	line
  1029                                  		
  1030 00000756 89C6                    		mov		si,ax
  1031 00000758 29D6                    		sub		si,dx
  1032 0000075A 56                      		push	si		;coloca a abcisa xc-x na pilha			
  1033 0000075B 89DE                    		mov		si,bx
  1034 0000075D 29CE                    		sub		si,cx
  1035 0000075F 56                      		push    si		;coloca a ordenada yc-y na pilha
  1036 00000760 89C6                    		mov		si,ax
  1037 00000762 29D6                    		sub		si,dx
  1038 00000764 56                      		push	si		;coloca a abcisa xc-x na pilha	
  1039 00000765 89DE                    		mov		si,bx
  1040 00000767 01CE                    		add		si,cx
  1041 00000769 56                      		push    si		;coloca a ordenada yc+y na pilha	
  1042 0000076A E82900                  		call	line
  1043                                  		
  1044 0000076D 89C6                    		mov		si,ax
  1045 0000076F 29CE                    		sub		si,cx
  1046 00000771 56                      		push	si		;coloca a abcisa xc-y na pilha			
  1047 00000772 89DE                    		mov		si,bx
  1048 00000774 29D6                    		sub		si,dx
  1049 00000776 56                      		push    si		;coloca a ordenada yc-x na pilha
  1050 00000777 89C6                    		mov		si,ax
  1051 00000779 29CE                    		sub		si,cx
  1052 0000077B 56                      		push	si		;coloca a abcisa xc-y na pilha	
  1053 0000077C 89DE                    		mov		si,bx
  1054 0000077E 01D6                    		add		si,dx
  1055 00000780 56                      		push    si		;coloca a ordenada yc+x na pilha	
  1056 00000781 E81200                  		call	line
  1057                                  		
  1058 00000784 39D1                    		cmp		cx,dx
  1059 00000786 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1060 00000788 E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1061                                  			
  1062                                  fim_full_circle:
  1063 0000078B 5F                      		pop		di
  1064 0000078C 5E                      		pop		si
  1065 0000078D 5A                      		pop		dx
  1066 0000078E 59                      		pop		cx
  1067 0000078F 5B                      		pop		bx
  1068 00000790 58                      		pop		ax
  1069 00000791 9D                      		popf
  1070 00000792 5D                      		pop		bp
  1071 00000793 C20600                  		ret		6
  1072                                  ;-----------------------------------------------------------------------------
  1073                                  ;
  1074                                  ;   fun��o line
  1075                                  ;
  1076                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1077                                  line:
  1078 00000796 55                      		push		bp
  1079 00000797 89E5                    		mov		bp,sp
  1080 00000799 9C                      		pushf                        ;coloca os flags na pilha
  1081 0000079A 50                      		push 		ax
  1082 0000079B 53                      		push 		bx
  1083 0000079C 51                      		push		cx
  1084 0000079D 52                      		push		dx
  1085 0000079E 56                      		push		si
  1086 0000079F 57                      		push		di
  1087 000007A0 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  1088 000007A3 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  1089 000007A6 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  1090 000007A9 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  1091 000007AC 39C8                    		cmp		ax,cx
  1092 000007AE 7408                    		je		line2
  1093 000007B0 721C                    		jb		line1
  1094 000007B2 91                      		xchg		ax,cx
  1095 000007B3 87DA                    		xchg		bx,dx
  1096 000007B5 E91600                  		jmp		line1
  1097                                  
  1098                                  line2:		; deltax=0
  1099 000007B8 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1100 000007BA 7202                    		jb		line3
  1101 000007BC 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1102                                  
  1103                                  line3:	; dx > bx
  1104 000007BE 50                      		push		ax
  1105 000007BF 53                      		push		bx
  1106 000007C0 E811FE                  		call 		plot_xy
  1107 000007C3 39D3                    		cmp		bx,dx
  1108 000007C5 7503                    		jne		line31
  1109 000007C7 E9C600                  		jmp		fim_line
  1110                                  line31:		
  1111 000007CA 43                      		inc		bx
  1112 000007CB E9F0FF                  		jmp		line3
  1113                                  ;deltax <>0
  1114                                  line1:
  1115                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1116                                  	; cx > ax
  1117 000007CE 51                      		push		cx
  1118 000007CF 29C1                    		sub		cx,ax
  1119 000007D1 890E[0100]              		mov		[deltax],cx
  1120 000007D5 59                      		pop		cx
  1121 000007D6 52                      		push		dx
  1122 000007D7 29DA                    		sub		dx,bx
  1123 000007D9 7702                    		ja		line32
  1124 000007DB F7DA                    		neg		dx
  1125                                  line32:		
  1126 000007DD 8916[0300]              		mov		[deltay],dx
  1127 000007E1 5A                      		pop		dx
  1128                                  
  1129 000007E2 50                      		push		ax
  1130 000007E3 A1[0100]                		mov		ax,[deltax]
  1131 000007E6 3B06[0300]              		cmp		ax,[deltay]
  1132 000007EA 58                      		pop		ax
  1133 000007EB 724D                    		jb		line5
  1134                                  
  1135                                  	; cx > ax e deltax>deltay
  1136 000007ED 51                      		push		cx
  1137 000007EE 29C1                    		sub		cx,ax
  1138 000007F0 890E[0100]              		mov		[deltax],cx
  1139 000007F4 59                      		pop		cx
  1140 000007F5 52                      		push		dx
  1141 000007F6 29DA                    		sub		dx,bx
  1142 000007F8 8916[0300]              		mov		[deltay],dx
  1143 000007FC 5A                      		pop		dx
  1144                                  
  1145 000007FD 89C6                    		mov		si,ax
  1146                                  line4:
  1147 000007FF 50                      		push		ax
  1148 00000800 52                      		push		dx
  1149 00000801 56                      		push		si
  1150 00000802 29C6                    		sub		si,ax	;(x-x1)
  1151 00000804 A1[0300]                		mov		ax,[deltay]
  1152 00000807 F7EE                    		imul		si
  1153 00000809 8B36[0100]              		mov		si,[deltax]		;arredondar
  1154 0000080D D1EE                    		shr		si,1
  1155                                  ; se numerador (DX)>0 soma se <0 subtrai
  1156 0000080F 81FA0000                		cmp		dx,0
  1157 00000813 7C09                    		jl		ar1
  1158 00000815 01F0                    		add		ax,si
  1159 00000817 81D20000                		adc		dx,0
  1160 0000081B E90600                  		jmp		arc1
  1161 0000081E 29F0                    ar1:		sub		ax,si
  1162 00000820 81DA0000                		sbb		dx,0
  1163                                  arc1:
  1164 00000824 F73E[0100]              		idiv		word [deltax]
  1165 00000828 01D8                    		add		ax,bx
  1166 0000082A 5E                      		pop		si
  1167 0000082B 56                      		push		si
  1168 0000082C 50                      		push		ax
  1169 0000082D E8A4FD                  		call		plot_xy
  1170 00000830 5A                      		pop		dx
  1171 00000831 58                      		pop		ax
  1172 00000832 39CE                    		cmp		si,cx
  1173 00000834 745A                    		je		fim_line
  1174 00000836 46                      		inc		si
  1175 00000837 E9C5FF                  		jmp		line4
  1176                                  
  1177 0000083A 39D3                    line5:		cmp		bx,dx
  1178 0000083C 7203                    		jb 		line7
  1179 0000083E 91                      		xchg		ax,cx
  1180 0000083F 87DA                    		xchg		bx,dx
  1181                                  line7:
  1182 00000841 51                      		push		cx
  1183 00000842 29C1                    		sub		cx,ax
  1184 00000844 890E[0100]              		mov		[deltax],cx
  1185 00000848 59                      		pop		cx
  1186 00000849 52                      		push		dx
  1187 0000084A 29DA                    		sub		dx,bx
  1188 0000084C 8916[0300]              		mov		[deltay],dx
  1189 00000850 5A                      		pop		dx
  1190 00000851 89DE                    		mov		si,bx
  1191                                  line6:
  1192 00000853 52                      		push		dx
  1193 00000854 56                      		push		si
  1194 00000855 50                      		push		ax
  1195 00000856 29DE                    		sub		si,bx	;(y-y1)
  1196 00000858 A1[0100]                		mov		ax,[deltax]
  1197 0000085B F7EE                    		imul		si
  1198 0000085D 8B36[0300]              		mov		si,[deltay]		;arredondar
  1199 00000861 D1EE                    		shr		si,1
  1200                                  ; se numerador (DX)>0 soma se <0 subtrai
  1201 00000863 81FA0000                		cmp		dx,0
  1202 00000867 7C09                    		jl		ar2
  1203 00000869 01F0                    		add		ax,si
  1204 0000086B 81D20000                		adc		dx,0
  1205 0000086F E90600                  		jmp		arc2
  1206                                  ar2:		
  1207 00000872 29F0                    		sub		ax,si
  1208 00000874 81EA0000                		sub		dx,0
  1209                                  arc2:
  1210 00000878 F73E[0300]              		idiv		word [deltay]
  1211 0000087C 89C7                    		mov		di,ax
  1212 0000087E 58                      		pop		ax
  1213 0000087F 01C7                    		add		di,ax
  1214 00000881 5E                      		pop		si
  1215 00000882 57                      		push		di
  1216 00000883 56                      		push		si
  1217 00000884 E84DFD                  		call		plot_xy
  1218 00000887 5A                      		pop		dx
  1219 00000888 39D6                    		cmp		si,dx
  1220 0000088A 7404                    		je		fim_line
  1221 0000088C 46                      		inc		si
  1222 0000088D E9C3FF                  		jmp		line6
  1223                                  
  1224                                  fim_line:
  1225 00000890 5F                      		pop		di
  1226 00000891 5E                      		pop		si
  1227 00000892 5A                      		pop		dx
  1228 00000893 59                      		pop		cx
  1229 00000894 5B                      		pop		bx
  1230 00000895 58                      		pop		ax
  1231 00000896 9D                      		popf
  1232 00000897 5D                      		pop		bp
  1233 00000898 C20800                  		ret		8
  1234                                  ;*******************************************************************
  1235                                  segment data
  1236                                  
  1237                                  ;	I R G B COR
  1238                                  ;	0 0 0 0 preto
  1239                                  ;	0 0 0 1 azul
  1240                                  ;	0 0 1 0 verde
  1241                                  ;	0 0 1 1 cyan
  1242                                  ;	0 1 0 0 vermelho
  1243                                  ;	0 1 0 1 magenta
  1244                                  ;	0 1 1 0 marrom
  1245                                  ;	0 1 1 1 branco
  1246                                  ;	1 0 0 0 cinza
  1247                                  ;	1 0 0 1 azul claro
  1248                                  ;	1 0 1 0 verde claro
  1249                                  ;	1 0 1 1 cyan claro
  1250                                  ;	1 1 0 0 rosa
  1251                                  ;	1 1 0 1 magenta claro
  1252                                  ;	1 1 1 0 amarelo
  1253                                  ;	1 1 1 1 branco intenso
  1254                                  
  1255                                  
  1256 00000000 0F                      cor				db		branco_intenso
  1257                                  preto			equ		0
  1258                                  azul			equ		1
  1259                                  verde			equ		2
  1260                                  cyan			equ		3
  1261                                  vermelho		equ		4
  1262                                  magenta			equ		5
  1263                                  marrom			equ		6
  1264                                  branco			equ		7
  1265                                  cinza			equ		8
  1266                                  azul_claro		equ		9
  1267                                  verde_claro		equ		10
  1268                                  cyan_claro		equ		11
  1269                                  rosa			equ		12
  1270                                  magenta_claro	equ		13
  1271                                  amarelo			equ		14
  1272                                  branco_intenso	equ		15
  1273 00000001 0000                    deltax			dw		0
  1274 00000003 0000                    deltay			dw		0
  1275 00000005 00                      modo_anterior	db		0
  1276                                  
  1277 00000006 0500                    x1A				dw		5	;Usados para printar os quadrados
  1278 00000008 6900                    x2A				dw		105
  1279 0000000A 0500                    x1B 			dw		5
  1280 0000000C 6900                    x2B  			dw		105
  1281                                  
  1282 0000000E 0000                    apaga1			dw		0	;Variáveis para pegar qual quadrado apagar
  1283 00000010 0000                    apaga2			dw		0
  1284                                  
  1285 00000012 0E01                    player_x1    	dw      270	;Posição da raquete
  1286 00000014 7201                    player_x2    	dw      370
  1287                                  
  1288 00000016 4001                    px      		dw      320	;Posição da bola
  1289 00000018 1E00                    py      		dw      30
  1290                                  
  1291 0000001A 0000                    bloco_quebrado1	dw		0	;Variável para testar se a bola pode subir mais
  1292 0000001C 0000                    bloco_quebrado2	dw		0
  1293 0000001E 0000                    bloco_quebrado3	dw		0
  1294 00000020 0000                    bloco_quebrado4	dw		0
  1295 00000022 0000                    bloco_quebrado5	dw		0
  1296 00000024 0000                    bloco_quebrado6	dw		0
  1297                                  
  1298 00000026 0000                    bloco_cima_quebrado1	dw		0
  1299 00000028 0000                    bloco_cima_quebrado2	dw		0
  1300 0000002A 0000                    bloco_cima_quebrado3	dw		0
  1301 0000002C 0000                    bloco_cima_quebrado4	dw		0
  1302 0000002E 0000                    bloco_cima_quebrado5	dw		0
  1303 00000030 0000                    bloco_cima_quebrado6	dw		0
  1304                                  
  1305 00000032 0000                    yToDelete1		dw		0
  1306 00000034 0000                    yToDelete2		dw		0
  1307                                  
  1308 00000036 0500                    vx      		dw      5	;Velocidade que a bola anda
  1309 00000038 0500                    vy      		dw      5
  1310 0000003A 47414D45204F564552-     mens_3      	db          'GAME OVER. Deseja continuar? Y ou N'
  1311 00000043 2E20446573656A6120-
  1312 0000004C 636F6E74696E756172-
  1313 00000055 3F2059206F75204E   
  1314                                  
  1315                                  ;*************************************************************************
  1316                                  segment stack stack
  1317 00000000 <res 00000200>              		resb 		512
  1318                                  stacktop:
