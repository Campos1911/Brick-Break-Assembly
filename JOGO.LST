     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0500]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  reset_game:
    21                                  ; Desenhando o campo (bordas brancas)
    22 0000001A C606[0000]0F            		mov		byte[cor],branco_intenso
    23 0000001F B80000                  		mov		ax, 0
    24 00000022 50                      		push 	ax
    25 00000023 B80000                  		mov		ax, 0
    26 00000026 50                      		push	ax
    27 00000027 B80000                  		mov		ax, 0
    28 0000002A 50                      		push 	ax
    29 0000002B B8DF01                  		mov		ax, 479
    30 0000002E 50                      		push	ax
    31 0000002F E87806                  		call	line
    32                                  
    33 00000032 B80000                  		mov		ax, 0
    34 00000035 50                      		push 	ax
    35 00000036 B8DF01                  		mov		ax, 479
    36 00000039 50                      		push	ax
    37 0000003A B87F02                  		mov		ax, 639
    38 0000003D 50                      		push 	ax
    39 0000003E B8DF01                  		mov		ax, 479
    40 00000041 50                      		push	ax
    41 00000042 E86506                  		call	line
    42                                  		
    43 00000045 B87F02                  		mov		ax, 639
    44 00000048 50                      		push 	ax
    45 00000049 B8DF01                  		mov		ax, 479
    46 0000004C 50                      		push	ax
    47 0000004D B87F02                  		mov		ax, 639
    48 00000050 50                      		push 	ax
    49 00000051 B80000                  		mov		ax, 0
    50 00000054 50                      		push	ax
    51 00000055 E85206                  		call	line
    52                                  
    53                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    54 00000058 B90600                  		mov		cx, 6
    55 0000005B C606[0000]01            		mov		byte[cor], azul
    56                                  	
    57                                  ; Primeira linha de quadrados (linha superior)
    58                                  fazQuadrado1:
    59 00000060 FE06[0000]              		inc		byte[cor]
    60 00000064 A1[0600]                		mov		ax, word[x1A]
    61 00000067 50                      		push 	ax
    62 00000068 B8DD01                  		mov		ax, 477
    63 0000006B 50                      		push	ax
    64 0000006C A1[0800]                		mov		ax, word[x2A]
    65 0000006F 50                      		push 	ax
    66 00000070 B8DD01                  		mov		ax, 477
    67 00000073 50                      		push	ax
    68 00000074 E83306                  		call	line
    69                                  		
    70 00000077 A1[0800]                		mov		ax, word[x2A]
    71 0000007A 50                      		push 	ax
    72 0000007B B8DD01                  		mov		ax, 477
    73 0000007E 50                      		push	ax
    74 0000007F A1[0800]                		mov		ax, word[x2A]
    75 00000082 50                      		push 	ax
    76 00000083 B8B501                  		mov		ax, 437
    77 00000086 50                      		push	ax
    78 00000087 E82006                  		call	line
    79                                  		
    80 0000008A A1[0800]                		mov		ax, word[x2A]
    81 0000008D 50                      		push 	ax
    82 0000008E B8B501                  		mov		ax, 437
    83 00000091 50                      		push	ax
    84 00000092 A1[0600]                		mov		ax, word[x1A]
    85 00000095 50                      		push 	ax
    86 00000096 B8B501                  		mov		ax, 437
    87 00000099 50                      		push	ax
    88 0000009A E80D06                  		call	line
    89                                  		
    90 0000009D A1[0600]                		mov		ax, word[x1A]
    91 000000A0 50                      		push 	ax
    92 000000A1 B8B501                  		mov		ax, 437
    93 000000A4 50                      		push	ax
    94 000000A5 A1[0600]                		mov		ax, word[x1A]
    95 000000A8 50                      		push 	ax
    96 000000A9 B8DD01                  		mov		ax, 477
    97 000000AC 50                      		push	ax
    98 000000AD E8FA05                  		call	line
    99 000000B0 8106[0800]6900          		add		word[x2A], 105
   100 000000B6 8106[0600]6900          		add		word[x1A] , 105
   101 000000BC E2A2                    		loop 	fazQuadrado1
   102                                  		
   103                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   104 000000BE B90600                  		mov		cx, 6
   105 000000C1 C606[0000]08            		mov		byte[cor], cinza
   106                                  		
   107                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   108 000000C6 FE06[0000]              		inc		byte[cor]
   109 000000CA A1[0A00]                		mov		ax, word[x1B]
   110 000000CD 50                      		push 	ax
   111 000000CE B8AB01                  		mov		ax, 427
   112 000000D1 50                      		push	ax
   113 000000D2 A1[0C00]                		mov		ax, word[x2B]
   114 000000D5 50                      		push 	ax
   115 000000D6 B8AB01                  		mov		ax, 427
   116 000000D9 50                      		push	ax
   117 000000DA E8CD05                  		call	line
   118                                  		
   119 000000DD A1[0C00]                		mov		ax, word[x2B]
   120 000000E0 50                      		push 	ax
   121 000000E1 B8AB01                  		mov		ax, 427
   122 000000E4 50                      		push	ax
   123 000000E5 A1[0C00]                		mov		ax, word[x2B]
   124 000000E8 50                      		push 	ax
   125 000000E9 B88301                  		mov		ax, 387
   126 000000EC 50                      		push	ax
   127 000000ED E8BA05                  		call	line
   128                                  		
   129 000000F0 A1[0C00]                		mov		ax, word[x2B]
   130 000000F3 50                      		push 	ax
   131 000000F4 B88301                  		mov		ax, 387
   132 000000F7 50                      		push	ax
   133 000000F8 A1[0A00]                		mov		ax, word[x1B]
   134 000000FB 50                      		push 	ax
   135 000000FC B88301                  		mov		ax, 387
   136 000000FF 50                      		push	ax
   137 00000100 E8A705                  		call	line
   138                                  		
   139 00000103 A1[0A00]                		mov		ax, word[x1B]
   140 00000106 50                      		push 	ax
   141 00000107 B88301                  		mov		ax, 387
   142 0000010A 50                      		push	ax
   143 0000010B A1[0A00]                		mov		ax, word[x1B]
   144 0000010E 50                      		push 	ax
   145 0000010F B8AB01                  		mov		ax, 427
   146 00000112 50                      		push	ax
   147 00000113 E89405                  		call	line
   148 00000116 8106[0C00]6900          		add		word[x2B], 105
   149 0000011C 8106[0A00]6900          		add		word[x1B] , 105
   150 00000122 E2A2                    		loop 	fazQuadrado2
   151                                  
   152                                  
   153                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   154                                  
   155                                  continua:
   156 00000124 E88500                      	call limpa_bola
   157                                  
   158 00000127 8B1E[2600]                      mov bx, [vx]
   159 0000012B 011E[1600]                      add [px], bx
   160 0000012F 8B1E[2800]                      mov bx, [vy]
   161 00000133 011E[1800]                      add [py], bx
   162                                  
   163 00000137 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   164 0000013C A1[1600]                		mov		ax,[px]
   165 0000013F 50                      		push		ax
   166 00000140 A1[1800]                		mov		ax,[py]
   167 00000143 50                      		push		ax
   168 00000144 B81000                  		mov		ax,16
   169 00000147 50                      		push		ax
   170 00000148 E8A204                  		call	full_circle
   171                                  
   172 0000014B A1[1200]                		mov		ax, [player_x1] ; Desenhando a raquete
   173 0000014E 50                      		push 	ax
   174 0000014F B80A00                  		mov		ax, 10
   175 00000152 50                      		push	ax
   176 00000153 A1[1400]                		mov		ax, [player_x2]
   177 00000156 50                      		push 	ax
   178 00000157 B80A00                  		mov		ax, 10
   179 0000015A 50                      		push	ax
   180 0000015B E84C05                  		call	line
   181                                  
   182 0000015E 59                              pop cx ; Recupera cx da pilha
   183 0000015F E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   184 00000161 E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   185 00000163 C3                              ret
   186                                  
   187                                  del2:
   188 00000164 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   189 00000165 B90008                          mov cx, 0800h ; Teste modificando este valor
   190                                  
   191                                  del1:
   192 00000168 BB6702                          mov bx, 615 ;Limita o campo na parte da direita
   193 0000016B 391E[1600]                      cmp [px], bx
   194 0000016F 7D50                            jge moveesquerda
   195                                  
   196 00000171 BB1400                          mov bx, 20 ; Limita o campo na parte da esquerda
   197 00000174 391E[1600]                      cmp [px], bx
   198 00000178 7E58                            jle movedireita
   199                                  
   200 0000017A BB6C01                          mov bx, 364 ; Limita o campo na parte de cima
   201 0000017D 391E[1800]                      cmp [py], bx
   202 00000181 7D74                    		jge movebaixo
   203                                  
   204                                  sobe_mais:
   205 00000183 BB9E01                  		mov	bx, 414
   206 00000186 391E[1800]              		cmp	[py], bx
   207 0000018A 7D6B                    		jge	movebaixo
   208                                  
   209 0000018C BB0A00                          mov bx, 10 ; Limita o campo na parte de baixo
   210 0000018F 391E[1800]                      cmp [py], bx
   211 00000193 7E51                            jle movecima
   212                                  
   213 00000195 B40B                            mov ah, 0bh      
   214 00000197 CD21                            int 21h
   215 00000199 3C00                            cmp al,0
   216 0000019B 7546                            jne intermediateVerifTeclas
   217 0000019D E85802                  		call calcular_colisao_raquete
   218 000001A0 E981FF                          jmp continua
   219                                  
   220 000001A3 E87EFF                  		call delay
   221 000001A6 E8BFFF                  		call del1
   222 000001A9 E8B8FF                  		call del2
   223                                  
   224                                  limpa_bola:
   225 000001AC C606[0000]00                    mov     byte[cor],preto ; limpa bola
   226 000001B1 A1[1600]                        mov     ax,[px]
   227 000001B4 50                              push        ax
   228 000001B5 A1[1800]                        mov     ax,[py]
   229 000001B8 50                              push        ax
   230 000001B9 B81400                          mov     ax,20
   231 000001BC 50                              push        ax
   232 000001BD E82D04                          call    full_circle
   233 000001C0 C3                              ret
   234                                  
   235                                  moveesquerda:
   236 000001C1 E8E8FF                          call limpa_bola
   237 000001C4 A1[2600]                		mov ax, [vx]
   238 000001C7 F7D8                            neg ax
   239 000001C9 89C3                            mov bx, ax
   240 000001CB 891E[2600]                      mov [vx], bx
   241 000001CF E952FF                          jmp continua
   242                                  
   243                                  movedireita:
   244 000001D2 E8D7FF                  		call limpa_bola
   245 000001D5 A1[2600]                        mov ax, [vx]
   246 000001D8 F7D8                            neg ax
   247 000001DA 89C3                            mov bx, ax
   248 000001DC 891E[2600]                      mov [vx], bx
   249 000001E0 E941FF                          jmp continua
   250                                  
   251                                  intermediateVerifTeclas:
   252 000001E3 E9A601                  	jmp verificar_teclas
   253                                  
   254                                  
   255                                  movecima:
   256 000001E6 A1[2800]                        mov ax, [vy]
   257 000001E9 F7D8                            neg ax
   258 000001EB 89C3                            mov bx, ax
   259 000001ED 891E[2800]                      mov [vy], bx
   260 000001F1 E930FF                          jmp continua
   261                                  
   262                                  intermediateSobeMais:
   263 000001F4 E98CFF                  	jmp	sobe_mais
   264                                  ; NA PARTE DE DEVOLVER A BOLA PARA BAIXO, É FEITA A VERIFICAÇÃO DA COLISÃO COM UM QUADRADO
   265                                  movebaixo:
   266 000001F7 B80500                  		mov ax, 5 ; Quadrado 1
   267 000001FA 3906[1600]              		cmp [px], ax
   268 000001FE 7D2D                    		jge	verifica_quad1 ; Pula para verificar se acertou no limite do quadrado (todos repetem essa lógica)
   269                                  volta1:
   270 00000200 B86E00                  		mov ax, 110 ; Quadrado 2
   271 00000203 3906[1600]              		cmp [px], ax
   272 00000207 7D46                    		jge	verifica_quad2
   273                                  volta2:
   274 00000209 B8D700                  		mov ax, 215 ; Quadrado 3
   275 0000020C 3906[1600]              		cmp [px], ax
   276 00000210 7D70                    		jge	verifica_quad3
   277                                  volta3:
   278 00000212 B84001                  		mov ax, 320 ; Quadrado 4
   279 00000215 3906[1600]              		cmp [px], ax
   280 00000219 7D5E                    		jge	intermediateVerificaQuad4
   281                                  volta4:
   282 0000021B B8A901                  		mov ax, 425 ; Quadrado 5
   283 0000021E 3906[1600]              		cmp [px], ax
   284 00000222 7D58                    		jge	intermediateVerificaQuad5
   285                                  volta5:
   286 00000224 B81202                  		mov ax, 530 ; Quadrado 6
   287 00000227 3906[1600]              		cmp [px], ax
   288 0000022B 7D52                    		jge	intermediateVerificaQuad6
   289                                  
   290                                  
   291                                  verifica_quad1:
   292 0000022D B80100                  		mov	ax, 1
   293 00000230 3B06[1A00]              		cmp ax, word[bloco_quebrado1]
   294 00000234 B86900                  		mov ax, 105
   295 00000237 3906[1600]              		cmp	[px], ax
   296 0000023B C706[0E00]0500          		mov word[apaga1], 5
   297 00000241 C706[1000]6900          		mov word[apaga2], 105
   298 00000247 7FB7                    		jg volta1 ; Se não acertou, volta para verificar o próximo quadrado
   299 00000249 E9D500                  		jmp	apaga_quad ; Se acertou no limite, apaga o quadrado e rebate a bola
   300                                  
   301                                  intermediateSobeMais2:
   302 0000024C E9A5FF                  	jmp intermediateSobeMais
   303                                  
   304                                  verifica_quad2:
   305 0000024F B80100                  		mov	ax, 1
   306 00000252 3B06[1C00]              		cmp ax, [bloco_quebrado2]
   307 00000256 749C                    		je	intermediateSobeMais
   308 00000258 B8D200                  		mov ax, 210
   309 0000025B 3906[1600]              		cmp	[px], ax
   310 0000025F C706[0E00]6E00          		mov word[apaga1], 110
   311 00000265 C706[1000]D200          		mov word[apaga2], 210
   312 0000026B 7F9C                    		jg volta2
   313 0000026D E9B100                  		jmp	apaga_quad
   314                                  
   315                                  intermediateVolta4:
   316 00000270 E9A8FF                  	jmp	volta4
   317                                  
   318                                  intermediateVolta3:
   319 00000273 E99CFF                  	jmp	volta3
   320                                  
   321                                  intermediateVolta5:
   322 00000276 E9ABFF                  	jmp	volta5
   323                                  
   324                                  intermediateVerificaQuad4:
   325 00000279 E93000                  	jmp verifica_quad4
   326                                  
   327                                  intermediateVerificaQuad5:
   328 0000027C E95400                  	jmp verifica_quad5
   329                                  
   330                                  intermediateVerificaQuad6:
   331 0000027F E97800                  	jmp verifica_quad6
   332                                  
   333                                  
   334                                  verifica_quad3:
   335 00000282 B80100                  		mov	ax, 1
   336 00000285 3B06[1E00]              		cmp ax, [bloco_quebrado3]
   337 00000289 74C1                    		je	intermediateSobeMais2
   338 0000028B B83B01                  		mov ax, 315
   339 0000028E 3906[1600]              		cmp	[px], ax
   340 00000292 C706[0E00]D700          		mov word[apaga1], 215
   341 00000298 C706[1000]3B01          		mov word[apaga2], 315
   342 0000029E 7DD3                    		jge intermediateVolta3
   343 000002A0 B80100                  		mov	ax, 1
   344 000002A3 A3[1E00]                		mov	word[bloco_quebrado3], ax
   345 000002A6 E97800                  		jmp	apaga_quad
   346                                  
   347                                  intermediateSobeMais3
   348 000002A9 E9A0FF                  	jmp intermediateSobeMais2
   349                                  verifica_quad4:
   350 000002AC B80100                  		mov	ax, 1
   351 000002AF 3B06[2000]              		cmp ax, [bloco_quebrado4]
   352 000002B3 7497                    		je	intermediateSobeMais2
   353 000002B5 B8A401                  		mov ax, 420
   354 000002B8 3906[1600]              		cmp	[px], ax
   355 000002BC C706[0E00]4001          		mov word[apaga1], 320
   356 000002C2 C706[1000]A401          		mov word[apaga2], 420
   357 000002C8 7DA6                    		jge intermediateVolta4
   358 000002CA B80100                  		mov	ax, 1
   359 000002CD A3[2000]                		mov	word[bloco_quebrado4], ax
   360 000002D0 E94E00                  		jmp	apaga_quad
   361                                  
   362                                  verifica_quad5:
   363 000002D3 B80100                  		mov	ax, 1
   364 000002D6 3B06[2200]              		cmp ax, [bloco_quebrado5]
   365 000002DA 74CD                    		je	intermediateSobeMais3
   366 000002DC B80D02                  		mov ax, 525
   367 000002DF 3906[1600]              		cmp	[px], ax
   368 000002E3 C706[0E00]A901          		mov word[apaga1], 425
   369 000002E9 C706[1000]0D02          		mov word[apaga2], 525
   370 000002EF 7D85                    		jge intermediateVolta5
   371 000002F1 B80100                  		mov	ax, 1
   372 000002F4 A3[2200]                		mov	word[bloco_quebrado5], ax
   373 000002F7 E92700                  		jmp	apaga_quad
   374                                  
   375                                  verifica_quad6:
   376 000002FA B80100                  		mov	ax, 1
   377 000002FD 3B06[2400]              		cmp ax, [bloco_quebrado6]
   378 00000301 74A6                    		je	intermediateSobeMais3
   379 00000303 B87602                  		mov ax, 630
   380 00000306 3906[1600]              		cmp	[px], ax
   381 0000030A C706[0E00]1202          		mov word[apaga1], 530
   382 00000310 C706[1000]7602          		mov word[apaga2], 630
   383 00000316 7D5A                    		jge nao_apaga
   384 00000318 B80100                  		mov	ax, 1
   385 0000031B A3[2400]                		mov	word[bloco_quebrado6], ax
   386 0000031E E90000                  		jmp	apaga_quad
   387                                  
   388                                  
   389                                  apaga_quad:
   390 00000321 C606[0000]00            		mov		byte[cor], preto
   391 00000326 A1[0E00]                		mov		ax, word[apaga1]
   392 00000329 50                      		push 	ax
   393 0000032A B8AB01                  		mov		ax, 427
   394 0000032D 50                      		push	ax
   395 0000032E A1[1000]                		mov		ax, word[apaga2]
   396 00000331 50                      		push 	ax
   397 00000332 B8AB01                  		mov		ax, 427
   398 00000335 50                      		push	ax
   399 00000336 E87103                  		call	line
   400                                  		
   401 00000339 A1[1000]                		mov		ax, word[apaga2]
   402 0000033C 50                      		push 	ax
   403 0000033D B8AB01                  		mov		ax, 427
   404 00000340 50                      		push	ax
   405 00000341 A1[1000]                		mov		ax, word[apaga2]
   406 00000344 50                      		push 	ax
   407 00000345 B88301                  		mov		ax, 387
   408 00000348 50                      		push	ax
   409 00000349 E85E03                  		call	line
   410                                  		
   411 0000034C A1[1000]                		mov		ax, word[apaga2]
   412 0000034F 50                      		push 	ax
   413 00000350 B88301                  		mov		ax, 387
   414 00000353 50                      		push	ax
   415 00000354 A1[0E00]                		mov		ax, word[apaga1]
   416 00000357 50                      		push 	ax
   417 00000358 B88301                  		mov		ax, 387
   418 0000035B 50                      		push	ax
   419 0000035C E84B03                  		call	line
   420                                  		
   421 0000035F A1[0E00]                		mov		ax, word[apaga1]
   422 00000362 50                      		push 	ax
   423 00000363 B88301                  		mov		ax, 387
   424 00000366 50                      		push	ax
   425 00000367 A1[0E00]                		mov		ax, word[apaga1]
   426 0000036A 50                      		push 	ax
   427 0000036B B8AB01                  		mov		ax, 427
   428 0000036E 50                      		push	ax
   429 0000036F E83803                  		call	line
   430                                  
   431                                  nao_apaga:
   432 00000372 A1[2800]                        mov ax, [vy]
   433 00000375 F7D8                            neg ax
   434 00000377 89C3                            mov bx, ax
   435 00000379 891E[2800]                      mov [vy], bx
   436 0000037D E9A4FD                          jmp continua
   437                                  
   438                                  sai:
   439 00000380 B400                            mov ah,0 ; set video mode
   440 00000382 A0[0500]                        mov al,[modo_anterior] ; recupera o modo anterior
   441 00000385 CD10                            int 10h
   442 00000387 B8004C                          mov ax,4c00h
   443 0000038A CD21                            int 21h
   444                                  		
   445                                  
   446                                  verificar_teclas: ;Estrutura para decidir o que será feito durante o jogo
   447 0000038C 55                              push bp
   448 0000038D 89E5                            mov bp, sp
   449 0000038F B408                            mov ah, 08h
   450 00000391 CD21                            int 21h
   451 00000393 3C70                    		cmp al, 70h ; Código ASCII para a tecla 'p'
   452 00000395 742B                    		je	pausa
   453 00000397 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   454 00000399 74E5                            je sai
   455 0000039B 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   456 0000039D 752E                            jne verificar_baixo
   457 0000039F E8B500                          call limpa_raquete ;Se 'd' não for pressionado, ele pula para baixo e mexe a raquete
   458 000003A2 B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   459 000003A5 BB7602                          mov bx, 630 ;testa se já chegou no limite
   460 000003A8 391E[1400]                      cmp [player_x2], bx
   461 000003AC 7D46                            jge fim_verificar_teclas
   462 000003AE 0306[1200]                      add ax, [player_x1]
   463 000003B2 A3[1200]                        mov [player_x1], ax
   464 000003B5 B81400                          mov ax, 20
   465 000003B8 0306[1400]                      add ax, [player_x2]
   466 000003BC A3[1400]                        mov [player_x2], ax
   467 000003BF E93200                          jmp fim_verificar_teclas
   468                                  
   469                                  
   470                                  pausa:
   471 000003C2 B408                            mov ah, 08h
   472 000003C4 CD21                            int 21h
   473 000003C6 3C70                    		cmp al, 70h ;Compara a tecla com a letra 'p', fica parado aqui até apertar 'p' novamente
   474 000003C8 75F8                    		jne pausa
   475 000003CA E957FD                  		jmp continua
   476                                  
   477                                  verificar_baixo:
   478 000003CD 3C61                            cmp al, 61h
   479 000003CF 7523                            jne fim_verificar_teclas
   480 000003D1 E88300                          call limpa_raquete
   481 000003D4 B8ECFF                          mov ax, -20
   482 000003D7 BB0A00                          mov bx, 10
   483 000003DA 391E[1200]                      cmp [player_x1], bx
   484 000003DE 7E14                            jle fim_verificar_teclas
   485 000003E0 0306[1200]                      add ax, [player_x1]
   486 000003E4 A3[1200]                        mov [player_x1], ax
   487 000003E7 B8ECFF                          mov ax, -20
   488 000003EA 0306[1400]                      add ax, [player_x2]
   489 000003EE A3[1400]                        mov [player_x2], ax
   490 000003F1 E90000                          jmp fim_verificar_teclas
   491                                  
   492                                  fim_verificar_teclas:
   493 000003F4 5D                              pop bp
   494 000003F5 E92CFD                          jmp continua
   495                                  
   496                                  calcular_colisao_raquete:
   497 000003F8 B81E00                          mov ax, 30
   498 000003FB 3906[1800]                      cmp [py], ax
   499 000003FF 7403                            je verifica_colisao_raquete
   500 00000401 7C6D                    		jl game_over
   501 00000403 C3                              ret
   502                                  
   503                                  verifica_colisao_raquete:
   504 00000404 8B1E[1400]                      mov bx, [player_x2]
   505 00000408 81C31000                        add bx, 16
   506 0000040C 391E[1600]                      cmp [px], bx
   507 00000410 7E0F                            jle rebate_cima1
   508 00000412 8B1E[1200]                      mov bx, [player_x1]
   509 00000416 81EB1000                        sub bx, 16
   510 0000041A 391E[1600]                      cmp [px], bx
   511 0000041E 7D1C                            jge rebate_baixo1
   512 00000420 C3                              ret
   513                                  
   514                                  ;FUNÇÕES RESPONSÁVEIS POR REBATER A BOLA E ALTERAR A DIREÇÃO (ESQUERDA OU DIREITA)
   515                                  rebate_cima1:
   516 00000421 8B1E[1200]              		mov bx, [player_x1]
   517 00000425 81EB1000                		sub bx, 16
   518 00000429 391E[1600]              		cmp [px], bx
   519 0000042D 7D01                    		jge rebate_cima2
   520 0000042F C3                              ret
   521                                  
   522                                  rebate_cima2:
   523 00000430 A1[2800]                        mov ax, [vy]
   524 00000433 F7D8                            neg ax
   525 00000435 89C3                            mov bx, ax
   526 00000437 891E[2800]              		mov [vy], bx
   527 0000043B C3                              ret
   528                                  
   529                                  rebate_baixo1:
   530 0000043C 8B1E[1400]                      mov bx, [player_x2]
   531 00000440 81C31000                        add bx, 16
   532 00000444 391E[1600]                      cmp [px], bx
   533 00000448 7E01                            jle rebate_baixo2
   534 0000044A C3                              ret
   535                                  
   536                                  rebate_baixo2:
   537 0000044B A1[2800]                        mov ax, [vy]
   538 0000044E F7D8                            neg ax
   539 00000450 89C3                            mov bx, ax
   540 00000452 891E[2800]                      mov [vy], bx
   541 00000456 C3                              ret
   542                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   543                                  
   544                                  limpa_raquete: ;FUNÇÃO UTILIZADA PARA ATUALIZAR A POSIÇÃO DA RAQUETE 
   545 00000457 C606[0000]00                    mov     byte[cor], preto
   546 0000045C A1[1200]                        mov     ax,[player_x1]
   547 0000045F 50                              push    ax
   548 00000460 B80A00                          mov     ax,10
   549 00000463 50                              push    ax
   550 00000464 A1[1400]                        mov     ax,[player_x2]
   551 00000467 50                              push    ax
   552 00000468 B80A00                          mov     ax,10
   553 0000046B 50                              push    ax
   554 0000046C E83B02                          call    line
   555 0000046F C3                              ret
   556                                  
   557                                  game_over: ;;Escreve a mensagem na tela e espera a tecla do jogador
   558 00000470 B92300                  		mov     	cx,35			;número de caracteres
   559 00000473 BB0000                      	mov     	bx,0
   560 00000476 B60A                        	mov     	dh,10			
   561 00000478 B20A                        	mov     	dl,10
   562 0000047A C606[0000]0F            		mov		byte[cor],branco_intenso
   563                                  
   564                                  repete_para_escrever:
   565 0000047F E83100                  		call	cursor
   566 00000482 8A87[2A00]                  	mov     al,[bx+mens_3]
   567 00000486 E84100                  		call	caracter
   568 00000489 43                          	inc     bx			;proximo caracter
   569 0000048A FEC2                    		inc		dl			;avanca a coluna
   570 0000048C E2F1                        	loop    repete_para_escrever
   571                                  
   572                                  verfica_continua_ou_nao:
   573 0000048E 55                      		push bp
   574 0000048F 89E5                            mov bp, sp
   575                                  
   576 00000491 B408                    		mov ah, 08h
   577 00000493 CD21                            int 21h
   578 00000495 3C6E                    		cmp al, 6eh
   579 00000497 7407                    		je	acaba
   580 00000499 3C79                    		cmp al, 79h
   581 0000049B 7413                    		je limpa_tudo
   582 0000049D E9EEFF                  		jmp	verfica_continua_ou_nao
   583                                  
   584                                  acaba: ;Finalizando o programa
   585 000004A0 B408                    		mov    	ah,08h
   586 000004A2 CD21                    		int     21h
   587 000004A4 B400                    	    mov  	ah,0   					; set video mode
   588 000004A6 A0[0500]                	    mov  	al,[modo_anterior]   	; modo anterior
   589 000004A9 CD10                    	    int  	10h
   590 000004AB B8004C                  		mov     ax,4c00h
   591 000004AE CD21                    		int     21h
   592                                  
   593                                  limpa_tudo: ;FUNÇÃO PARA LIMPAR O CAMPO TODO E VOLTAR PARA O ZERO
   594 000004B0 E867FB                  	call reset_game
   595                                  
   596                                  ;***************************************************************************
   597                                  ;
   598                                  ;   função cursor
   599                                  ;
   600                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   601                                  cursor:
   602 000004B3 9C                      		pushf
   603 000004B4 50                      		push 		ax
   604 000004B5 53                      		push 		bx
   605 000004B6 51                      		push		cx
   606 000004B7 52                      		push		dx
   607 000004B8 56                      		push		si
   608 000004B9 57                      		push		di
   609 000004BA 55                      		push		bp
   610 000004BB B402                    		mov     	ah,2
   611 000004BD B700                    		mov     	bh,0
   612 000004BF CD10                    		int     	10h
   613 000004C1 5D                      		pop		bp
   614 000004C2 5F                      		pop		di
   615 000004C3 5E                      		pop		si
   616 000004C4 5A                      		pop		dx
   617 000004C5 59                      		pop		cx
   618 000004C6 5B                      		pop		bx
   619 000004C7 58                      		pop		ax
   620 000004C8 9D                      		popf
   621 000004C9 C3                      		ret
   622                                  ;_____________________________________________________________________________
   623                                  ;
   624                                  ;   fun��o caracter escrito na posi��o do cursor
   625                                  ;
   626                                  ; al= caracter a ser escrito
   627                                  ; cor definida na variavel cor
   628                                  caracter:
   629 000004CA 9C                      		pushf
   630 000004CB 50                      		push 		ax
   631 000004CC 53                      		push 		bx
   632 000004CD 51                      		push		cx
   633 000004CE 52                      		push		dx
   634 000004CF 56                      		push		si
   635 000004D0 57                      		push		di
   636 000004D1 55                      		push		bp
   637 000004D2 B409                        	mov     	ah,9
   638 000004D4 B700                        	mov     	bh,0
   639 000004D6 B90100                      	mov     	cx,1
   640 000004D9 8A1E[0000]                 		mov     	bl,[cor]
   641 000004DD CD10                        	int     	10h
   642 000004DF 5D                      		pop			bp
   643 000004E0 5F                      		pop			di
   644 000004E1 5E                      		pop			si
   645 000004E2 5A                      		pop			dx
   646 000004E3 59                      		pop			cx
   647 000004E4 5B                      		pop			bx
   648 000004E5 58                      		pop			ax
   649 000004E6 9D                      		popf
   650 000004E7 C3                      		ret
   651                                  ;_____________________________________________________________________________
   652                                  ;
   653                                  ;   fun��o plot_xy
   654                                  ;
   655                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   656                                  ; cor definida na variavel cor
   657                                  plot_xy:
   658 000004E8 55                      		push		bp
   659 000004E9 89E5                    		mov			bp,sp
   660 000004EB 9C                      		pushf
   661 000004EC 50                      		push 		ax
   662 000004ED 53                      		push 		bx
   663 000004EE 51                      		push		cx
   664 000004EF 52                      		push		dx
   665 000004F0 56                      		push		si
   666 000004F1 57                      		push		di
   667 000004F2 B40C                    	    mov     	ah,0ch
   668 000004F4 A0[0000]                	    mov     	al,[cor]
   669 000004F7 B700                    	    mov     	bh,0
   670 000004F9 BADF01                  	    mov     	dx,479
   671 000004FC 2B5604                  		sub			dx,[bp+4]
   672 000004FF 8B4E06                  	    mov     	cx,[bp+6]
   673 00000502 CD10                    	    int     	10h
   674 00000504 5F                      		pop			di
   675 00000505 5E                      		pop			si
   676 00000506 5A                      		pop			dx
   677 00000507 59                      		pop			cx
   678 00000508 5B                      		pop			bx
   679 00000509 58                      		pop			ax
   680 0000050A 9D                      		popf	
   681 0000050B 5D                      		pop			bp
   682 0000050C C20400                  		ret			4
   683                                  ;_____________________________________________________________________________
   684                                  ;    fun��o circle
   685                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   686                                  ; cor definida na variavel cor
   687                                  circle:
   688 0000050F 55                      		push 	bp
   689 00000510 89E5                    		mov	 	bp,sp
   690 00000512 9C                      		pushf                        ;coloca os flags na pilha
   691 00000513 50                      		push 	ax
   692 00000514 53                      		push 	bx
   693 00000515 51                      		push	cx
   694 00000516 52                      		push	dx
   695 00000517 56                      		push	si
   696 00000518 57                      		push	di
   697                                  		
   698 00000519 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   699 0000051C 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   700 0000051F 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   701                                  		
   702 00000522 89DA                    		mov 	dx,bx	
   703 00000524 01CA                    		add		dx,cx       ;ponto extremo superior
   704 00000526 50                      		push    ax			
   705 00000527 52                      		push	dx
   706 00000528 E8BDFF                  		call plot_xy
   707                                  		
   708 0000052B 89DA                    		mov		dx,bx
   709 0000052D 29CA                    		sub		dx,cx       ;ponto extremo inferior
   710 0000052F 50                      		push    ax			
   711 00000530 52                      		push	dx
   712 00000531 E8B4FF                  		call plot_xy
   713                                  		
   714 00000534 89C2                    		mov 	dx,ax	
   715 00000536 01CA                    		add		dx,cx       ;ponto extremo direita
   716 00000538 52                      		push    dx			
   717 00000539 53                      		push	bx
   718 0000053A E8ABFF                  		call plot_xy
   719                                  		
   720 0000053D 89C2                    		mov		dx,ax
   721 0000053F 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   722 00000541 52                      		push    dx			
   723 00000542 53                      		push	bx
   724 00000543 E8A2FF                  		call plot_xy
   725                                  			
   726 00000546 89CF                    		mov		di,cx
   727 00000548 81EF0100                		sub		di,1	 ;di=r-1
   728 0000054C BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   729                                  		
   730                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   731                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   732                                  ;valores positivos para d
   733                                  
   734                                  stay:				;loop
   735 0000054F 89FE                    		mov		si,di
   736 00000551 81FE0000                		cmp		si,0
   737 00000555 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   738 00000557 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   739 00000559 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   740 0000055B 81C60300                		add		si,3
   741 0000055F 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   742 00000561 42                      		inc		dx		;incrementa dx
   743 00000562 E90E00                  		jmp		plotar
   744                                  inf:	
   745 00000565 89D6                    		mov		si,dx
   746 00000567 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   747 00000569 D1E6                    		sal		si,1
   748 0000056B 81C60500                		add		si,5
   749 0000056F 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   750 00000571 42                      		inc		dx		;incrementa x (dx)
   751 00000572 49                      		dec		cx		;decrementa y (cx)
   752                                  	
   753                                  plotar:	
   754 00000573 89D6                    		mov		si,dx
   755 00000575 01C6                    		add		si,ax
   756 00000577 56                      		push    si			;coloca a abcisa x+xc na pilha
   757 00000578 89CE                    		mov		si,cx
   758 0000057A 01DE                    		add		si,bx
   759 0000057C 56                      		push    si			;coloca a ordenada y+yc na pilha
   760 0000057D E868FF                  		call plot_xy		;toma conta do segundo octante
   761 00000580 89C6                    		mov		si,ax
   762 00000582 01D6                    		add		si,dx
   763 00000584 56                      		push    si			;coloca a abcisa xc+x na pilha
   764 00000585 89DE                    		mov		si,bx
   765 00000587 29CE                    		sub		si,cx
   766 00000589 56                      		push    si			;coloca a ordenada yc-y na pilha
   767 0000058A E85BFF                  		call plot_xy		;toma conta do s�timo octante
   768 0000058D 89C6                    		mov		si,ax
   769 0000058F 01CE                    		add		si,cx
   770 00000591 56                      		push    si			;coloca a abcisa xc+y na pilha
   771 00000592 89DE                    		mov		si,bx
   772 00000594 01D6                    		add		si,dx
   773 00000596 56                      		push    si			;coloca a ordenada yc+x na pilha
   774 00000597 E84EFF                  		call plot_xy		;toma conta do segundo octante
   775 0000059A 89C6                    		mov		si,ax
   776 0000059C 01CE                    		add		si,cx
   777 0000059E 56                      		push    si			;coloca a abcisa xc+y na pilha
   778 0000059F 89DE                    		mov		si,bx
   779 000005A1 29D6                    		sub		si,dx
   780 000005A3 56                      		push    si			;coloca a ordenada yc-x na pilha
   781 000005A4 E841FF                  		call plot_xy		;toma conta do oitavo octante
   782 000005A7 89C6                    		mov		si,ax
   783 000005A9 29D6                    		sub		si,dx
   784 000005AB 56                      		push    si			;coloca a abcisa xc-x na pilha
   785 000005AC 89DE                    		mov		si,bx
   786 000005AE 01CE                    		add		si,cx
   787 000005B0 56                      		push    si			;coloca a ordenada yc+y na pilha
   788 000005B1 E834FF                  		call plot_xy		;toma conta do terceiro octante
   789 000005B4 89C6                    		mov		si,ax
   790 000005B6 29D6                    		sub		si,dx
   791 000005B8 56                      		push    si			;coloca a abcisa xc-x na pilha
   792 000005B9 89DE                    		mov		si,bx
   793 000005BB 29CE                    		sub		si,cx
   794 000005BD 56                      		push    si			;coloca a ordenada yc-y na pilha
   795 000005BE E827FF                  		call plot_xy		;toma conta do sexto octante
   796 000005C1 89C6                    		mov		si,ax
   797 000005C3 29CE                    		sub		si,cx
   798 000005C5 56                      		push    si			;coloca a abcisa xc-y na pilha
   799 000005C6 89DE                    		mov		si,bx
   800 000005C8 29D6                    		sub		si,dx
   801 000005CA 56                      		push    si			;coloca a ordenada yc-x na pilha
   802 000005CB E81AFF                  		call plot_xy		;toma conta do quinto octante
   803 000005CE 89C6                    		mov		si,ax
   804 000005D0 29CE                    		sub		si,cx
   805 000005D2 56                      		push    si			;coloca a abcisa xc-y na pilha
   806 000005D3 89DE                    		mov		si,bx
   807 000005D5 01D6                    		add		si,dx
   808 000005D7 56                      		push    si			;coloca a ordenada yc-x na pilha
   809 000005D8 E80DFF                  		call plot_xy		;toma conta do quarto octante
   810                                  		
   811 000005DB 39D1                    		cmp		cx,dx
   812 000005DD 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   813 000005DF E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   814                                  		
   815                                  fim_circle:
   816 000005E2 5F                      		pop		di
   817 000005E3 5E                      		pop		si
   818 000005E4 5A                      		pop		dx
   819 000005E5 59                      		pop		cx
   820 000005E6 5B                      		pop		bx
   821 000005E7 58                      		pop		ax
   822 000005E8 9D                      		popf
   823 000005E9 5D                      		pop		bp
   824 000005EA C20600                  		ret		6
   825                                  ;-----------------------------------------------------------------------------
   826                                  ;    fun��o full_circle
   827                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   828                                  ; cor definida na variavel cor					  
   829                                  full_circle:
   830 000005ED 55                      		push 	bp
   831 000005EE 89E5                    		mov	 	bp,sp
   832 000005F0 9C                      		pushf                        ;coloca os flags na pilha
   833 000005F1 50                      		push 	ax
   834 000005F2 53                      		push 	bx
   835 000005F3 51                      		push	cx
   836 000005F4 52                      		push	dx
   837 000005F5 56                      		push	si
   838 000005F6 57                      		push	di
   839                                  
   840 000005F7 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   841 000005FA 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   842 000005FD 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   843                                  		
   844 00000600 89DE                    		mov		si,bx
   845 00000602 29CE                    		sub		si,cx
   846 00000604 50                      		push    ax			;coloca xc na pilha			
   847 00000605 56                      		push	si			;coloca yc-r na pilha
   848 00000606 89DE                    		mov		si,bx
   849 00000608 01CE                    		add		si,cx
   850 0000060A 50                      		push	ax		;coloca xc na pilha
   851 0000060B 56                      		push	si		;coloca yc+r na pilha
   852 0000060C E89B00                  		call line
   853                                  		
   854                                  			
   855 0000060F 89CF                    		mov		di,cx
   856 00000611 81EF0100                		sub		di,1	 ;di=r-1
   857 00000615 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   858                                  		
   859                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   860                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   861                                  ;valores positivos para d
   862                                  
   863                                  stay_full:				;loop
   864 00000618 89FE                    		mov		si,di
   865 0000061A 81FE0000                		cmp		si,0
   866 0000061E 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   867 00000620 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   868 00000622 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   869 00000624 81C60300                		add		si,3
   870 00000628 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   871 0000062A 42                      		inc		dx		;incrementa dx
   872 0000062B E90E00                  		jmp		plotar_full
   873                                  
   874                                  inf_full:	
   875 0000062E 89D6                    		mov		si,dx
   876 00000630 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   877 00000632 D1E6                    		sal		si,1
   878 00000634 81C60500                		add		si,5
   879 00000638 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   880 0000063A 42                      		inc		dx		;incrementa x (dx)
   881 0000063B 49                      		dec		cx		;decrementa y (cx)
   882                                  	
   883                                  plotar_full:	
   884 0000063C 89C6                    		mov		si,ax
   885 0000063E 01CE                    		add		si,cx
   886 00000640 56                      		push	si		;coloca a abcisa y+xc na pilha			
   887 00000641 89DE                    		mov		si,bx
   888 00000643 29D6                    		sub		si,dx
   889 00000645 56                      		push    si		;coloca a ordenada yc-x na pilha
   890 00000646 89C6                    		mov		si,ax
   891 00000648 01CE                    		add		si,cx
   892 0000064A 56                      		push	si		;coloca a abcisa y+xc na pilha	
   893 0000064B 89DE                    		mov		si,bx
   894 0000064D 01D6                    		add		si,dx
   895 0000064F 56                      		push    si		;coloca a ordenada yc+x na pilha	
   896 00000650 E85700                  		call 	line
   897                                  		
   898 00000653 89C6                    		mov		si,ax
   899 00000655 01D6                    		add		si,dx
   900 00000657 56                      		push	si		;coloca a abcisa xc+x na pilha			
   901 00000658 89DE                    		mov		si,bx
   902 0000065A 29CE                    		sub		si,cx
   903 0000065C 56                      		push    si		;coloca a ordenada yc-y na pilha
   904 0000065D 89C6                    		mov		si,ax
   905 0000065F 01D6                    		add		si,dx
   906 00000661 56                      		push	si		;coloca a abcisa xc+x na pilha	
   907 00000662 89DE                    		mov		si,bx
   908 00000664 01CE                    		add		si,cx
   909 00000666 56                      		push    si		;coloca a ordenada yc+y na pilha	
   910 00000667 E84000                  		call	line
   911                                  		
   912 0000066A 89C6                    		mov		si,ax
   913 0000066C 29D6                    		sub		si,dx
   914 0000066E 56                      		push	si		;coloca a abcisa xc-x na pilha			
   915 0000066F 89DE                    		mov		si,bx
   916 00000671 29CE                    		sub		si,cx
   917 00000673 56                      		push    si		;coloca a ordenada yc-y na pilha
   918 00000674 89C6                    		mov		si,ax
   919 00000676 29D6                    		sub		si,dx
   920 00000678 56                      		push	si		;coloca a abcisa xc-x na pilha	
   921 00000679 89DE                    		mov		si,bx
   922 0000067B 01CE                    		add		si,cx
   923 0000067D 56                      		push    si		;coloca a ordenada yc+y na pilha	
   924 0000067E E82900                  		call	line
   925                                  		
   926 00000681 89C6                    		mov		si,ax
   927 00000683 29CE                    		sub		si,cx
   928 00000685 56                      		push	si		;coloca a abcisa xc-y na pilha			
   929 00000686 89DE                    		mov		si,bx
   930 00000688 29D6                    		sub		si,dx
   931 0000068A 56                      		push    si		;coloca a ordenada yc-x na pilha
   932 0000068B 89C6                    		mov		si,ax
   933 0000068D 29CE                    		sub		si,cx
   934 0000068F 56                      		push	si		;coloca a abcisa xc-y na pilha	
   935 00000690 89DE                    		mov		si,bx
   936 00000692 01D6                    		add		si,dx
   937 00000694 56                      		push    si		;coloca a ordenada yc+x na pilha	
   938 00000695 E81200                  		call	line
   939                                  		
   940 00000698 39D1                    		cmp		cx,dx
   941 0000069A 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   942 0000069C E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   943                                  			
   944                                  fim_full_circle:
   945 0000069F 5F                      		pop		di
   946 000006A0 5E                      		pop		si
   947 000006A1 5A                      		pop		dx
   948 000006A2 59                      		pop		cx
   949 000006A3 5B                      		pop		bx
   950 000006A4 58                      		pop		ax
   951 000006A5 9D                      		popf
   952 000006A6 5D                      		pop		bp
   953 000006A7 C20600                  		ret		6
   954                                  ;-----------------------------------------------------------------------------
   955                                  ;
   956                                  ;   fun��o line
   957                                  ;
   958                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   959                                  line:
   960 000006AA 55                      		push		bp
   961 000006AB 89E5                    		mov		bp,sp
   962 000006AD 9C                      		pushf                        ;coloca os flags na pilha
   963 000006AE 50                      		push 		ax
   964 000006AF 53                      		push 		bx
   965 000006B0 51                      		push		cx
   966 000006B1 52                      		push		dx
   967 000006B2 56                      		push		si
   968 000006B3 57                      		push		di
   969 000006B4 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   970 000006B7 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   971 000006BA 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   972 000006BD 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   973 000006C0 39C8                    		cmp		ax,cx
   974 000006C2 7408                    		je		line2
   975 000006C4 721C                    		jb		line1
   976 000006C6 91                      		xchg		ax,cx
   977 000006C7 87DA                    		xchg		bx,dx
   978 000006C9 E91600                  		jmp		line1
   979                                  
   980                                  line2:		; deltax=0
   981 000006CC 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   982 000006CE 7202                    		jb		line3
   983 000006D0 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   984                                  
   985                                  line3:	; dx > bx
   986 000006D2 50                      		push		ax
   987 000006D3 53                      		push		bx
   988 000006D4 E811FE                  		call 		plot_xy
   989 000006D7 39D3                    		cmp		bx,dx
   990 000006D9 7503                    		jne		line31
   991 000006DB E9C600                  		jmp		fim_line
   992                                  line31:		
   993 000006DE 43                      		inc		bx
   994 000006DF E9F0FF                  		jmp		line3
   995                                  ;deltax <>0
   996                                  line1:
   997                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   998                                  	; cx > ax
   999 000006E2 51                      		push		cx
  1000 000006E3 29C1                    		sub		cx,ax
  1001 000006E5 890E[0100]              		mov		[deltax],cx
  1002 000006E9 59                      		pop		cx
  1003 000006EA 52                      		push		dx
  1004 000006EB 29DA                    		sub		dx,bx
  1005 000006ED 7702                    		ja		line32
  1006 000006EF F7DA                    		neg		dx
  1007                                  line32:		
  1008 000006F1 8916[0300]              		mov		[deltay],dx
  1009 000006F5 5A                      		pop		dx
  1010                                  
  1011 000006F6 50                      		push		ax
  1012 000006F7 A1[0100]                		mov		ax,[deltax]
  1013 000006FA 3B06[0300]              		cmp		ax,[deltay]
  1014 000006FE 58                      		pop		ax
  1015 000006FF 724D                    		jb		line5
  1016                                  
  1017                                  	; cx > ax e deltax>deltay
  1018 00000701 51                      		push		cx
  1019 00000702 29C1                    		sub		cx,ax
  1020 00000704 890E[0100]              		mov		[deltax],cx
  1021 00000708 59                      		pop		cx
  1022 00000709 52                      		push		dx
  1023 0000070A 29DA                    		sub		dx,bx
  1024 0000070C 8916[0300]              		mov		[deltay],dx
  1025 00000710 5A                      		pop		dx
  1026                                  
  1027 00000711 89C6                    		mov		si,ax
  1028                                  line4:
  1029 00000713 50                      		push		ax
  1030 00000714 52                      		push		dx
  1031 00000715 56                      		push		si
  1032 00000716 29C6                    		sub		si,ax	;(x-x1)
  1033 00000718 A1[0300]                		mov		ax,[deltay]
  1034 0000071B F7EE                    		imul		si
  1035 0000071D 8B36[0100]              		mov		si,[deltax]		;arredondar
  1036 00000721 D1EE                    		shr		si,1
  1037                                  ; se numerador (DX)>0 soma se <0 subtrai
  1038 00000723 81FA0000                		cmp		dx,0
  1039 00000727 7C09                    		jl		ar1
  1040 00000729 01F0                    		add		ax,si
  1041 0000072B 81D20000                		adc		dx,0
  1042 0000072F E90600                  		jmp		arc1
  1043 00000732 29F0                    ar1:		sub		ax,si
  1044 00000734 81DA0000                		sbb		dx,0
  1045                                  arc1:
  1046 00000738 F73E[0100]              		idiv		word [deltax]
  1047 0000073C 01D8                    		add		ax,bx
  1048 0000073E 5E                      		pop		si
  1049 0000073F 56                      		push		si
  1050 00000740 50                      		push		ax
  1051 00000741 E8A4FD                  		call		plot_xy
  1052 00000744 5A                      		pop		dx
  1053 00000745 58                      		pop		ax
  1054 00000746 39CE                    		cmp		si,cx
  1055 00000748 745A                    		je		fim_line
  1056 0000074A 46                      		inc		si
  1057 0000074B E9C5FF                  		jmp		line4
  1058                                  
  1059 0000074E 39D3                    line5:		cmp		bx,dx
  1060 00000750 7203                    		jb 		line7
  1061 00000752 91                      		xchg		ax,cx
  1062 00000753 87DA                    		xchg		bx,dx
  1063                                  line7:
  1064 00000755 51                      		push		cx
  1065 00000756 29C1                    		sub		cx,ax
  1066 00000758 890E[0100]              		mov		[deltax],cx
  1067 0000075C 59                      		pop		cx
  1068 0000075D 52                      		push		dx
  1069 0000075E 29DA                    		sub		dx,bx
  1070 00000760 8916[0300]              		mov		[deltay],dx
  1071 00000764 5A                      		pop		dx
  1072 00000765 89DE                    		mov		si,bx
  1073                                  line6:
  1074 00000767 52                      		push		dx
  1075 00000768 56                      		push		si
  1076 00000769 50                      		push		ax
  1077 0000076A 29DE                    		sub		si,bx	;(y-y1)
  1078 0000076C A1[0100]                		mov		ax,[deltax]
  1079 0000076F F7EE                    		imul		si
  1080 00000771 8B36[0300]              		mov		si,[deltay]		;arredondar
  1081 00000775 D1EE                    		shr		si,1
  1082                                  ; se numerador (DX)>0 soma se <0 subtrai
  1083 00000777 81FA0000                		cmp		dx,0
  1084 0000077B 7C09                    		jl		ar2
  1085 0000077D 01F0                    		add		ax,si
  1086 0000077F 81D20000                		adc		dx,0
  1087 00000783 E90600                  		jmp		arc2
  1088                                  ar2:		
  1089 00000786 29F0                    		sub		ax,si
  1090 00000788 81EA0000                		sub		dx,0
  1091                                  arc2:
  1092 0000078C F73E[0300]              		idiv		word [deltay]
  1093 00000790 89C7                    		mov		di,ax
  1094 00000792 58                      		pop		ax
  1095 00000793 01C7                    		add		di,ax
  1096 00000795 5E                      		pop		si
  1097 00000796 57                      		push		di
  1098 00000797 56                      		push		si
  1099 00000798 E84DFD                  		call		plot_xy
  1100 0000079B 5A                      		pop		dx
  1101 0000079C 39D6                    		cmp		si,dx
  1102 0000079E 7404                    		je		fim_line
  1103 000007A0 46                      		inc		si
  1104 000007A1 E9C3FF                  		jmp		line6
  1105                                  
  1106                                  fim_line:
  1107 000007A4 5F                      		pop		di
  1108 000007A5 5E                      		pop		si
  1109 000007A6 5A                      		pop		dx
  1110 000007A7 59                      		pop		cx
  1111 000007A8 5B                      		pop		bx
  1112 000007A9 58                      		pop		ax
  1113 000007AA 9D                      		popf
  1114 000007AB 5D                      		pop		bp
  1115 000007AC C20800                  		ret		8
  1116                                  ;*******************************************************************
  1117                                  segment data
  1118                                  
  1119                                  ;	I R G B COR
  1120                                  ;	0 0 0 0 preto
  1121                                  ;	0 0 0 1 azul
  1122                                  ;	0 0 1 0 verde
  1123                                  ;	0 0 1 1 cyan
  1124                                  ;	0 1 0 0 vermelho
  1125                                  ;	0 1 0 1 magenta
  1126                                  ;	0 1 1 0 marrom
  1127                                  ;	0 1 1 1 branco
  1128                                  ;	1 0 0 0 cinza
  1129                                  ;	1 0 0 1 azul claro
  1130                                  ;	1 0 1 0 verde claro
  1131                                  ;	1 0 1 1 cyan claro
  1132                                  ;	1 1 0 0 rosa
  1133                                  ;	1 1 0 1 magenta claro
  1134                                  ;	1 1 1 0 amarelo
  1135                                  ;	1 1 1 1 branco intenso
  1136                                  
  1137                                  
  1138 00000000 0F                      cor				db		branco_intenso
  1139                                  preto			equ		0
  1140                                  azul			equ		1
  1141                                  verde			equ		2
  1142                                  cyan			equ		3
  1143                                  vermelho		equ		4
  1144                                  magenta			equ		5
  1145                                  marrom			equ		6
  1146                                  branco			equ		7
  1147                                  cinza			equ		8
  1148                                  azul_claro		equ		9
  1149                                  verde_claro		equ		10
  1150                                  cyan_claro		equ		11
  1151                                  rosa			equ		12
  1152                                  magenta_claro	equ		13
  1153                                  amarelo			equ		14
  1154                                  branco_intenso	equ		15
  1155 00000001 0000                    deltax			dw		0
  1156 00000003 0000                    deltay			dw		0
  1157 00000005 00                      modo_anterior	db		0
  1158                                  
  1159 00000006 0500                    x1A				dw		5	;Usados para printar os quadrados
  1160 00000008 6900                    x2A				dw		105
  1161 0000000A 0500                    x1B 			dw		5
  1162 0000000C 6900                    x2B  			dw		105
  1163                                  
  1164 0000000E 0000                    apaga1			dw		0	;Variáveis para pegar qual quadrado apagar
  1165 00000010 0000                    apaga2			dw		0
  1166                                  
  1167 00000012 0E01                    player_x1    	dw      270	;Posição da raquete
  1168 00000014 7201                    player_x2    	dw      370
  1169                                  
  1170 00000016 4001                    px      		dw      320	;Posição da bola
  1171 00000018 1E00                    py      		dw      30
  1172                                  
  1173 0000001A 0000                    bloco_quebrado1	dw		0	;Variável para testar se a bola pode subir mais
  1174 0000001C 0000                    bloco_quebrado2	dw		0
  1175 0000001E 0000                    bloco_quebrado3	dw		0
  1176 00000020 0000                    bloco_quebrado4	dw		0
  1177 00000022 0000                    bloco_quebrado5	dw		0
  1178 00000024 0000                    bloco_quebrado6	dw		0
  1179                                  
  1180 00000026 0500                    vx      		dw      5	;Velocidade que a bola anda
  1181 00000028 0500                    vy      		dw      5
  1182 0000002A 47414D45204F564552-     mens_3      	db          'GAME OVER. Deseja continuar? Y ou N'
  1183 00000033 2E20446573656A6120-
  1184 0000003C 636F6E74696E756172-
  1185 00000045 3F2059206F75204E   
  1186                                  
  1187                                  ;*************************************************************************
  1188                                  segment stack stack
  1189 00000000 <res 00000200>              		resb 		512
  1190                                  stacktop:
