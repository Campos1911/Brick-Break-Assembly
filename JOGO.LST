     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0100]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  reset_game:
    21                                  ; Desenhando o campo (bordas brancas)
    22 0000001A C606[0000]0F            		mov		byte[cor],branco_intenso
    23 0000001F B80000                  		mov		ax, 0
    24 00000022 50                      		push 	ax
    25 00000023 B80000                  		mov		ax, 0
    26 00000026 50                      		push	ax
    27 00000027 B80000                  		mov		ax, 0
    28 0000002A 50                      		push 	ax
    29 0000002B B8DF01                  		mov		ax, 479
    30 0000002E 50                      		push	ax
    31 0000002F E80806                  		call	line
    32                                  
    33 00000032 B80000                  		mov		ax, 0
    34 00000035 50                      		push 	ax
    35 00000036 B8DF01                  		mov		ax, 479
    36 00000039 50                      		push	ax
    37 0000003A B87F02                  		mov		ax, 639
    38 0000003D 50                      		push 	ax
    39 0000003E B8DF01                  		mov		ax, 479
    40 00000041 50                      		push	ax
    41 00000042 E8F505                  		call	line
    42                                  		
    43 00000045 B87F02                  		mov		ax, 639
    44 00000048 50                      		push 	ax
    45 00000049 B8DF01                  		mov		ax, 479
    46 0000004C 50                      		push	ax
    47 0000004D B87F02                  		mov		ax, 639
    48 00000050 50                      		push 	ax
    49 00000051 B80000                  		mov		ax, 0
    50 00000054 50                      		push	ax
    51 00000055 E8E205                  		call	line
    52                                  
    53                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    54 00000058 B90600                  		mov		cx, 6
    55 0000005B C606[0000]01            		mov		byte[cor], azul
    56                                  	
    57                                  ; Primeira linha de quadrados (linha superior)
    58                                  fazQuadrado1:
    59 00000060 FE06[0000]              		inc		byte[cor]
    60 00000064 A1[0A00]                		mov		ax, word[x1A]
    61 00000067 50                      		push 	ax
    62 00000068 B8DD01                  		mov		ax, 477
    63 0000006B 50                      		push	ax
    64 0000006C A1[0C00]                		mov		ax, word[x2A]
    65 0000006F 50                      		push 	ax
    66 00000070 B8DD01                  		mov		ax, 477
    67 00000073 50                      		push	ax
    68 00000074 E8C305                  		call	line
    69                                  		
    70 00000077 A1[0C00]                		mov		ax, word[x2A]
    71 0000007A 50                      		push 	ax
    72 0000007B B8DD01                  		mov		ax, 477
    73 0000007E 50                      		push	ax
    74 0000007F A1[0C00]                		mov		ax, word[x2A]
    75 00000082 50                      		push 	ax
    76 00000083 B8B501                  		mov		ax, 437
    77 00000086 50                      		push	ax
    78 00000087 E8B005                  		call	line
    79                                  		
    80 0000008A A1[0C00]                		mov		ax, word[x2A]
    81 0000008D 50                      		push 	ax
    82 0000008E B8B501                  		mov		ax, 437
    83 00000091 50                      		push	ax
    84 00000092 A1[0A00]                		mov		ax, word[x1A]
    85 00000095 50                      		push 	ax
    86 00000096 B8B501                  		mov		ax, 437
    87 00000099 50                      		push	ax
    88 0000009A E89D05                  		call	line
    89                                  		
    90 0000009D A1[0A00]                		mov		ax, word[x1A]
    91 000000A0 50                      		push 	ax
    92 000000A1 B8B501                  		mov		ax, 437
    93 000000A4 50                      		push	ax
    94 000000A5 A1[0A00]                		mov		ax, word[x1A]
    95 000000A8 50                      		push 	ax
    96 000000A9 B8DD01                  		mov		ax, 477
    97 000000AC 50                      		push	ax
    98 000000AD E88A05                  		call	line
    99 000000B0 8106[0C00]6900          		add		word[x2A], 105
   100 000000B6 8106[0A00]6900          		add		word[x1A] , 105
   101 000000BC E2A2                    		loop 	fazQuadrado1
   102                                  		
   103                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   104 000000BE B90600                  		mov		cx, 6
   105 000000C1 C606[0000]08            		mov		byte[cor], cinza
   106                                  		
   107                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   108 000000C6 FE06[0000]              		inc		byte[cor]
   109 000000CA A1[0E00]                		mov		ax, word[x1B]
   110 000000CD 50                      		push 	ax
   111 000000CE B8AB01                  		mov		ax, 427
   112 000000D1 50                      		push	ax
   113 000000D2 A1[1000]                		mov		ax, word[x2B]
   114 000000D5 50                      		push 	ax
   115 000000D6 B8AB01                  		mov		ax, 427
   116 000000D9 50                      		push	ax
   117 000000DA E85D05                  		call	line
   118                                  		
   119 000000DD A1[1000]                		mov		ax, word[x2B]
   120 000000E0 50                      		push 	ax
   121 000000E1 B8AB01                  		mov		ax, 427
   122 000000E4 50                      		push	ax
   123 000000E5 A1[1000]                		mov		ax, word[x2B]
   124 000000E8 50                      		push 	ax
   125 000000E9 B88301                  		mov		ax, 387
   126 000000EC 50                      		push	ax
   127 000000ED E84A05                  		call	line
   128                                  		
   129 000000F0 A1[1000]                		mov		ax, word[x2B]
   130 000000F3 50                      		push 	ax
   131 000000F4 B88301                  		mov		ax, 387
   132 000000F7 50                      		push	ax
   133 000000F8 A1[0E00]                		mov		ax, word[x1B]
   134 000000FB 50                      		push 	ax
   135 000000FC B88301                  		mov		ax, 387
   136 000000FF 50                      		push	ax
   137 00000100 E83705                  		call	line
   138                                  		
   139 00000103 A1[0E00]                		mov		ax, word[x1B]
   140 00000106 50                      		push 	ax
   141 00000107 B88301                  		mov		ax, 387
   142 0000010A 50                      		push	ax
   143 0000010B A1[0E00]                		mov		ax, word[x1B]
   144 0000010E 50                      		push 	ax
   145 0000010F B8AB01                  		mov		ax, 427
   146 00000112 50                      		push	ax
   147 00000113 E82405                  		call	line
   148 00000116 8106[1000]6900          		add		word[x2B], 105
   149 0000011C 8106[0E00]6900          		add		word[x1B] , 105
   150 00000122 E2A2                    		loop 	fazQuadrado2
   151                                  
   152                                  
   153                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   154                                  
   155                                  continua:
   156 00000124 E87C00                      	call limpa_bola
   157                                  
   158 00000127 8B1E[1E00]                      mov bx, [vx]
   159 0000012B 011E[1A00]                      add [px], bx
   160 0000012F 8B1E[2000]                      mov bx, [vy]
   161 00000133 011E[1C00]                      add [py], bx
   162                                  
   163 00000137 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   164 0000013C A1[1A00]                		mov		ax,[px]
   165 0000013F 50                      		push		ax
   166 00000140 A1[1C00]                		mov		ax,[py]
   167 00000143 50                      		push		ax
   168 00000144 B81000                  		mov		ax,16
   169 00000147 50                      		push		ax
   170 00000148 E83204                  		call	full_circle
   171                                  
   172 0000014B A1[1600]                		mov		ax, [player_x1] ; Desenhando a raquete
   173 0000014E 50                      		push 	ax
   174 0000014F B80A00                  		mov		ax, 10
   175 00000152 50                      		push	ax
   176 00000153 A1[1800]                		mov		ax, [player_x2]
   177 00000156 50                      		push 	ax
   178 00000157 B80A00                  		mov		ax, 10
   179 0000015A 50                      		push	ax
   180 0000015B E8DC04                  		call	line
   181                                  
   182 0000015E 59                              pop cx ; Recupera cx da pilha
   183 0000015F E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   184 00000161 E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   185 00000163 C3                              ret
   186                                  
   187                                  del2:
   188 00000164 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   189 00000165 B90008                          mov cx, 0800h ; Teste modificando este valor
   190                                  
   191                                  del1:
   192 00000168 BB6702                          mov bx, 615 ;Limita o campo na parte da direita
   193 0000016B 391E[1A00]                      cmp [px], bx
   194 0000016F 7D47                            jge moveesquerda
   195                                  
   196 00000171 BB1400                          mov bx, 20 ; Limita o campo na parte da esquerda
   197 00000174 391E[1A00]                      cmp [px], bx
   198 00000178 7E4F                            jle movedireita
   199                                  
   200 0000017A BB6C01                          mov bx, 364 ; Limita o campo na parte de cima
   201 0000017D 391E[1C00]                      cmp [py], bx
   202 00000181 7D68                            jge movebaixo
   203                                  
   204 00000183 BB0A00                          mov bx, 10 ; Limita o campo na parte de baixo
   205 00000186 391E[1C00]                      cmp [py], bx
   206 0000018A 7E51                            jle movecima
   207                                  
   208 0000018C B40B                            mov ah, 0bh      
   209 0000018E CD21                            int 21h
   210 00000190 3C00                            cmp al,0
   211 00000192 7546                            jne intermediateVerifTeclas
   212 00000194 E8F101                  		call calcular_colisao_raquete
   213 00000197 E98AFF                          jmp continua
   214                                  
   215 0000019A E887FF                  		call delay
   216 0000019D E8C8FF                  		call del1
   217 000001A0 E8C1FF                  		call del2
   218                                  
   219                                  limpa_bola:
   220 000001A3 C606[0000]00                    mov     byte[cor],preto ; limpa bola
   221 000001A8 A1[1A00]                        mov     ax,[px]
   222 000001AB 50                              push        ax
   223 000001AC A1[1C00]                        mov     ax,[py]
   224 000001AF 50                              push        ax
   225 000001B0 B81400                          mov     ax,20
   226 000001B3 50                              push        ax
   227 000001B4 E8C603                          call    full_circle
   228 000001B7 C3                              ret
   229                                  
   230                                  moveesquerda:
   231 000001B8 E8E8FF                          call limpa_bola
   232 000001BB A1[1E00]                		mov ax, [vx]
   233 000001BE F7D8                            neg ax
   234 000001C0 89C3                            mov bx, ax
   235 000001C2 891E[1E00]                      mov [vx], bx
   236 000001C6 E95BFF                          jmp continua
   237                                  
   238                                  movedireita:
   239 000001C9 E8D7FF                  		call limpa_bola
   240 000001CC A1[1E00]                        mov ax, [vx]
   241 000001CF F7D8                            neg ax
   242 000001D1 89C3                            mov bx, ax
   243 000001D3 891E[1E00]                      mov [vx], bx
   244 000001D7 E94AFF                          jmp continua
   245                                  
   246                                  intermediateVerifTeclas:
   247 000001DA E93F01                  	jmp verificar_teclas
   248                                  
   249                                  movecima:
   250 000001DD A1[2000]                        mov ax, [vy]
   251 000001E0 F7D8                            neg ax
   252 000001E2 89C3                            mov bx, ax
   253 000001E4 891E[2000]                      mov [vy], bx
   254 000001E8 E939FF                          jmp continua
   255                                  
   256                                  movebaixo:
   257 000001EB B80500                  		mov ax, 5
   258 000001EE 3906[1A00]              		cmp [px], ax
   259 000001F2 7D2D                    		jge	verifica_quad1
   260                                  volta1:
   261 000001F4 B86E00                  		mov ax, 110
   262 000001F7 3906[1A00]              		cmp [px], ax
   263 000001FB 7D3C                    		jge	verifica_quad2
   264                                  volta2:
   265 000001FD B8D700                  		mov ax, 215
   266 00000200 3906[1A00]              		cmp [px], ax
   267 00000204 7D4B                    		jge	verifica_quad3
   268                                  volta3:
   269 00000206 B84001                  		mov ax, 320
   270 00000209 3906[1A00]              		cmp [px], ax
   271 0000020D 7D5A                    		jge	verifica_quad4
   272                                  volta4:
   273 0000020F B8A901                  		mov ax, 425
   274 00000212 3906[1A00]              		cmp [px], ax
   275 00000216 7D69                    		jge	verifica_quad5
   276                                  volta5:
   277 00000218 B81202                  		mov ax, 530
   278 0000021B 3906[1A00]              		cmp [px], ax
   279 0000021F 7D78                    		jge	verifica_quad6
   280                                  
   281                                  verifica_quad1:
   282 00000221 B86900                  		mov ax, 105
   283 00000224 3906[1A00]              		cmp	[px], ax
   284 00000228 C706[1200]0500          		mov word[apaga1], 5
   285 0000022E C706[1400]6900          		mov word[apaga2], 105
   286 00000234 7E7B                    		jle	apaga_quad
   287 00000236 E9BBFF                  		jmp volta1
   288                                  verifica_quad2:
   289 00000239 B8D200                  		mov ax, 210
   290 0000023C 3906[1A00]              		cmp	[px], ax
   291 00000240 C706[1200]6E00          		mov word[apaga1], 110
   292 00000246 C706[1400]D200          		mov word[apaga2], 210
   293 0000024C 7E63                    		jle	apaga_quad
   294 0000024E E9ACFF                  		jmp volta2
   295                                  verifica_quad3:
   296 00000251 B83B01                  		mov ax, 315
   297 00000254 3906[1A00]              		cmp	[px], ax
   298 00000258 C706[1200]D700          		mov word[apaga1], 215
   299 0000025E C706[1400]3B01          		mov word[apaga2], 315
   300 00000264 7E4B                    		jle	apaga_quad
   301 00000266 E99DFF                  		jmp volta3
   302                                  verifica_quad4:
   303 00000269 B8A401                  		mov ax, 420
   304 0000026C 3906[1A00]              		cmp	[px], ax
   305 00000270 C706[1200]4001          		mov word[apaga1], 320
   306 00000276 C706[1400]A401          		mov word[apaga2], 420
   307 0000027C 7E33                    		jle	apaga_quad
   308 0000027E E98EFF                  		jmp volta4
   309                                  verifica_quad5:
   310 00000281 B80D02                  		mov ax, 525
   311 00000284 3906[1A00]              		cmp	[px], ax
   312 00000288 C706[1200]A901          		mov word[apaga1], 425
   313 0000028E C706[1400]0D02          		mov word[apaga2], 525
   314 00000294 7E1B                    		jle	apaga_quad
   315 00000296 E97FFF                  		jmp volta5
   316                                  verifica_quad6:
   317 00000299 B87602                  		mov ax, 630
   318 0000029C 3906[1A00]              		cmp	[px], ax
   319 000002A0 C706[1200]1202          		mov word[apaga1], 530
   320 000002A6 C706[1400]7602          		mov word[apaga2], 630
   321 000002AC 7E03                    		jle	apaga_quad
   322 000002AE E95100                  		jmp nao_apaga
   323                                  
   324                                  apaga_quad:
   325 000002B1 C606[0000]00            		mov		byte[cor], preto
   326 000002B6 A1[1200]                		mov		ax, word[apaga1]
   327 000002B9 50                      		push 	ax
   328 000002BA B8AB01                  		mov		ax, 427
   329 000002BD 50                      		push	ax
   330 000002BE A1[1400]                		mov		ax, word[apaga2]
   331 000002C1 50                      		push 	ax
   332 000002C2 B8AB01                  		mov		ax, 427
   333 000002C5 50                      		push	ax
   334 000002C6 E87103                  		call	line
   335                                  		
   336 000002C9 A1[1400]                		mov		ax, word[apaga2]
   337 000002CC 50                      		push 	ax
   338 000002CD B8AB01                  		mov		ax, 427
   339 000002D0 50                      		push	ax
   340 000002D1 A1[1400]                		mov		ax, word[apaga2]
   341 000002D4 50                      		push 	ax
   342 000002D5 B88301                  		mov		ax, 387
   343 000002D8 50                      		push	ax
   344 000002D9 E85E03                  		call	line
   345                                  		
   346 000002DC A1[1400]                		mov		ax, word[apaga2]
   347 000002DF 50                      		push 	ax
   348 000002E0 B88301                  		mov		ax, 387
   349 000002E3 50                      		push	ax
   350 000002E4 A1[1200]                		mov		ax, word[apaga1]
   351 000002E7 50                      		push 	ax
   352 000002E8 B88301                  		mov		ax, 387
   353 000002EB 50                      		push	ax
   354 000002EC E84B03                  		call	line
   355                                  		
   356 000002EF A1[1200]                		mov		ax, word[apaga1]
   357 000002F2 50                      		push 	ax
   358 000002F3 B88301                  		mov		ax, 387
   359 000002F6 50                      		push	ax
   360 000002F7 A1[1200]                		mov		ax, word[apaga1]
   361 000002FA 50                      		push 	ax
   362 000002FB B8AB01                  		mov		ax, 427
   363 000002FE 50                      		push	ax
   364 000002FF E83803                  		call	line
   365                                  
   366                                  nao_apaga:
   367 00000302 A1[2000]                        mov ax, [vy]
   368 00000305 F7D8                            neg ax
   369 00000307 89C3                            mov bx, ax
   370 00000309 891E[2000]                      mov [vy], bx
   371 0000030D E914FE                          jmp continua
   372                                  
   373                                  sai:
   374 00000310 B400                            mov ah,0 ; set video mode
   375 00000312 A0[0100]                        mov al,[modo_anterior] ; recupera o modo anterior
   376 00000315 CD10                            int 10h
   377 00000317 B8004C                          mov ax,4c00h
   378 0000031A CD21                            int 21h
   379                                  		
   380                                  
   381                                  verificar_teclas: ;Estrutura para decidir o que será feito durante o jogo
   382 0000031C 55                              push bp
   383 0000031D 89E5                            mov bp, sp
   384 0000031F B408                            mov ah, 08h
   385 00000321 CD21                            int 21h
   386 00000323 3C70                    		cmp al, 70h ; Código ASCII para a tecla 'p'
   387 00000325 742B                    		je	pausa
   388 00000327 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   389 00000329 74E5                            je sai
   390 0000032B 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   391 0000032D 752E                            jne verificar_baixo
   392 0000032F E8B500                          call limpa_raquete ;Se 'd' não for pressionado, ele pula para baixo e mexe a raquete
   393 00000332 B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   394 00000335 BB7602                          mov bx, 630 ;testa se já chegou no limite
   395 00000338 391E[1800]                      cmp [player_x2], bx
   396 0000033C 7D46                            jge fim_verificar_teclas
   397 0000033E 0306[1600]                      add ax, [player_x1]
   398 00000342 A3[1600]                        mov [player_x1], ax
   399 00000345 B81400                          mov ax, 20
   400 00000348 0306[1800]                      add ax, [player_x2]
   401 0000034C A3[1800]                        mov [player_x2], ax
   402 0000034F E93200                          jmp fim_verificar_teclas
   403                                  
   404                                  
   405                                  pausa:
   406 00000352 B408                            mov ah, 08h
   407 00000354 CD21                            int 21h
   408 00000356 3C70                    		cmp al, 70h ;Compara a tecla com a letra 'p', fica parado aqui até apertar 'p' novamente
   409 00000358 75F8                    		jne pausa
   410 0000035A E9C7FD                  		jmp continua
   411                                  
   412                                  verificar_baixo:
   413 0000035D 3C61                            cmp al, 61h
   414 0000035F 7523                            jne fim_verificar_teclas
   415 00000361 E88300                          call limpa_raquete
   416 00000364 B8ECFF                          mov ax, -20
   417 00000367 BB0A00                          mov bx, 10
   418 0000036A 391E[1600]                      cmp [player_x1], bx
   419 0000036E 7E14                            jle fim_verificar_teclas
   420 00000370 0306[1600]                      add ax, [player_x1]
   421 00000374 A3[1600]                        mov [player_x1], ax
   422 00000377 B8ECFF                          mov ax, -20
   423 0000037A 0306[1800]                      add ax, [player_x2]
   424 0000037E A3[1800]                        mov [player_x2], ax
   425 00000381 E90000                          jmp fim_verificar_teclas
   426                                  
   427                                  fim_verificar_teclas:
   428 00000384 5D                              pop bp
   429 00000385 E99CFD                          jmp continua
   430                                  
   431                                  calcular_colisao_raquete:
   432 00000388 B81E00                          mov ax, 30
   433 0000038B 3906[1C00]                      cmp [py], ax
   434 0000038F 7403                            je verifica_colisao_raquete
   435 00000391 7C6D                    		jl game_over
   436 00000393 C3                              ret
   437                                  
   438                                  verifica_colisao_raquete:
   439 00000394 8B1E[1800]                      mov bx, [player_x2]
   440 00000398 81C31000                        add bx, 16
   441 0000039C 391E[1A00]                      cmp [px], bx
   442 000003A0 7E0F                            jle rebate_cima1
   443 000003A2 8B1E[1600]                      mov bx, [player_x1]
   444 000003A6 81EB1000                        sub bx, 16
   445 000003AA 391E[1A00]                      cmp [px], bx
   446 000003AE 7D1C                            jge rebate_baixo1
   447 000003B0 C3                              ret
   448                                  
   449                                  ;FUNÇÕES RESPONSÁVEIS POR REBATER A BOLA E ALTERAR A DIREÇÃO (ESQUERDA OU DIREITA)
   450                                  rebate_cima1:
   451 000003B1 8B1E[1600]              		mov bx, [player_x1]
   452 000003B5 81EB1000                		sub bx, 16
   453 000003B9 391E[1A00]              		cmp [px], bx
   454 000003BD 7D01                    		jge rebate_cima2
   455 000003BF C3                              ret
   456                                  
   457                                  rebate_cima2:
   458 000003C0 A1[2000]                        mov ax, [vy]
   459 000003C3 F7D8                            neg ax
   460 000003C5 89C3                            mov bx, ax
   461 000003C7 891E[2000]              		mov [vy], bx
   462 000003CB C3                              ret
   463                                  
   464                                  rebate_baixo1:
   465 000003CC 8B1E[1800]                      mov bx, [player_x2]
   466 000003D0 81C31000                        add bx, 16
   467 000003D4 391E[1A00]                      cmp [px], bx
   468 000003D8 7E01                            jle rebate_baixo2
   469 000003DA C3                              ret
   470                                  
   471                                  rebate_baixo2:
   472 000003DB A1[2000]                        mov ax, [vy]
   473 000003DE F7D8                            neg ax
   474 000003E0 89C3                            mov bx, ax
   475 000003E2 891E[2000]                      mov [vy], bx
   476 000003E6 C3                              ret
   477                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   478                                  
   479                                  limpa_raquete: ;FUNÇÃO UTILIZADA PARA ATUALIZAR A POSIÇÃO DA RAQUETE 
   480 000003E7 C606[0000]00                    mov     byte[cor], preto
   481 000003EC A1[1600]                        mov     ax,[player_x1]
   482 000003EF 50                              push    ax
   483 000003F0 B80A00                          mov     ax,10
   484 000003F3 50                              push    ax
   485 000003F4 A1[1800]                        mov     ax,[player_x2]
   486 000003F7 50                              push    ax
   487 000003F8 B80A00                          mov     ax,10
   488 000003FB 50                              push    ax
   489 000003FC E83B02                          call    line
   490 000003FF C3                              ret
   491                                  
   492                                  game_over: ;;Escreve a mensagem na tela e espera a tecla do jogador
   493 00000400 B92300                  		mov     	cx,35			;número de caracteres
   494 00000403 BB0000                      	mov     	bx,0
   495 00000406 B60A                        	mov     	dh,10			
   496 00000408 B20A                        	mov     	dl,10
   497 0000040A C606[0000]0F            		mov		byte[cor],branco_intenso
   498                                  
   499                                  repete_para_escrever:
   500 0000040F E83100                  		call	cursor
   501 00000412 8A87[2800]                  	mov     al,[bx+mens_3]
   502 00000416 E84100                  		call	caracter
   503 00000419 43                          	inc     bx			;proximo caracter
   504 0000041A FEC2                    		inc		dl			;avanca a coluna
   505 0000041C E2F1                        	loop    repete_para_escrever
   506                                  
   507                                  verfica_continua_ou_nao:
   508 0000041E 55                      		push bp
   509 0000041F 89E5                            mov bp, sp
   510                                  
   511 00000421 B408                    		mov ah, 08h
   512 00000423 CD21                            int 21h
   513 00000425 3C6E                    		cmp al, 6eh
   514 00000427 7407                    		je	acaba
   515 00000429 3C79                    		cmp al, 79h
   516 0000042B 7413                    		je limpa_tudo
   517 0000042D E9EEFF                  		jmp	verfica_continua_ou_nao
   518                                  
   519                                  acaba: ;Finalizando o programa
   520 00000430 B408                    		mov    	ah,08h
   521 00000432 CD21                    		int     21h
   522 00000434 B400                    	    mov  	ah,0   					; set video mode
   523 00000436 A0[0100]                	    mov  	al,[modo_anterior]   	; modo anterior
   524 00000439 CD10                    	    int  	10h
   525 0000043B B8004C                  		mov     ax,4c00h
   526 0000043E CD21                    		int     21h
   527                                  
   528                                  limpa_tudo: ;FUNÇÃO PARA LIMPAR O CAMPO TODO E VOLTAR PARA O ZERO
   529 00000440 E8D7FB                  	call reset_game
   530                                  
   531                                  ;***************************************************************************
   532                                  ;
   533                                  ;   função cursor
   534                                  ;
   535                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   536                                  cursor:
   537 00000443 9C                      		pushf
   538 00000444 50                      		push 		ax
   539 00000445 53                      		push 		bx
   540 00000446 51                      		push		cx
   541 00000447 52                      		push		dx
   542 00000448 56                      		push		si
   543 00000449 57                      		push		di
   544 0000044A 55                      		push		bp
   545 0000044B B402                    		mov     	ah,2
   546 0000044D B700                    		mov     	bh,0
   547 0000044F CD10                    		int     	10h
   548 00000451 5D                      		pop		bp
   549 00000452 5F                      		pop		di
   550 00000453 5E                      		pop		si
   551 00000454 5A                      		pop		dx
   552 00000455 59                      		pop		cx
   553 00000456 5B                      		pop		bx
   554 00000457 58                      		pop		ax
   555 00000458 9D                      		popf
   556 00000459 C3                      		ret
   557                                  ;_____________________________________________________________________________
   558                                  ;
   559                                  ;   fun��o caracter escrito na posi��o do cursor
   560                                  ;
   561                                  ; al= caracter a ser escrito
   562                                  ; cor definida na variavel cor
   563                                  caracter:
   564 0000045A 9C                      		pushf
   565 0000045B 50                      		push 		ax
   566 0000045C 53                      		push 		bx
   567 0000045D 51                      		push		cx
   568 0000045E 52                      		push		dx
   569 0000045F 56                      		push		si
   570 00000460 57                      		push		di
   571 00000461 55                      		push		bp
   572 00000462 B409                        	mov     	ah,9
   573 00000464 B700                        	mov     	bh,0
   574 00000466 B90100                      	mov     	cx,1
   575 00000469 8A1E[0000]                 		mov     	bl,[cor]
   576 0000046D CD10                        	int     	10h
   577 0000046F 5D                      		pop			bp
   578 00000470 5F                      		pop			di
   579 00000471 5E                      		pop			si
   580 00000472 5A                      		pop			dx
   581 00000473 59                      		pop			cx
   582 00000474 5B                      		pop			bx
   583 00000475 58                      		pop			ax
   584 00000476 9D                      		popf
   585 00000477 C3                      		ret
   586                                  ;_____________________________________________________________________________
   587                                  ;
   588                                  ;   fun��o plot_xy
   589                                  ;
   590                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   591                                  ; cor definida na variavel cor
   592                                  plot_xy:
   593 00000478 55                      		push		bp
   594 00000479 89E5                    		mov			bp,sp
   595 0000047B 9C                      		pushf
   596 0000047C 50                      		push 		ax
   597 0000047D 53                      		push 		bx
   598 0000047E 51                      		push		cx
   599 0000047F 52                      		push		dx
   600 00000480 56                      		push		si
   601 00000481 57                      		push		di
   602 00000482 B40C                    	    mov     	ah,0ch
   603 00000484 A0[0000]                	    mov     	al,[cor]
   604 00000487 B700                    	    mov     	bh,0
   605 00000489 BADF01                  	    mov     	dx,479
   606 0000048C 2B5604                  		sub			dx,[bp+4]
   607 0000048F 8B4E06                  	    mov     	cx,[bp+6]
   608 00000492 CD10                    	    int     	10h
   609 00000494 5F                      		pop			di
   610 00000495 5E                      		pop			si
   611 00000496 5A                      		pop			dx
   612 00000497 59                      		pop			cx
   613 00000498 5B                      		pop			bx
   614 00000499 58                      		pop			ax
   615 0000049A 9D                      		popf	
   616 0000049B 5D                      		pop			bp
   617 0000049C C20400                  		ret			4
   618                                  ;_____________________________________________________________________________
   619                                  ;    fun��o circle
   620                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   621                                  ; cor definida na variavel cor
   622                                  circle:
   623 0000049F 55                      		push 	bp
   624 000004A0 89E5                    		mov	 	bp,sp
   625 000004A2 9C                      		pushf                        ;coloca os flags na pilha
   626 000004A3 50                      		push 	ax
   627 000004A4 53                      		push 	bx
   628 000004A5 51                      		push	cx
   629 000004A6 52                      		push	dx
   630 000004A7 56                      		push	si
   631 000004A8 57                      		push	di
   632                                  		
   633 000004A9 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   634 000004AC 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   635 000004AF 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   636                                  		
   637 000004B2 89DA                    		mov 	dx,bx	
   638 000004B4 01CA                    		add		dx,cx       ;ponto extremo superior
   639 000004B6 50                      		push    ax			
   640 000004B7 52                      		push	dx
   641 000004B8 E8BDFF                  		call plot_xy
   642                                  		
   643 000004BB 89DA                    		mov		dx,bx
   644 000004BD 29CA                    		sub		dx,cx       ;ponto extremo inferior
   645 000004BF 50                      		push    ax			
   646 000004C0 52                      		push	dx
   647 000004C1 E8B4FF                  		call plot_xy
   648                                  		
   649 000004C4 89C2                    		mov 	dx,ax	
   650 000004C6 01CA                    		add		dx,cx       ;ponto extremo direita
   651 000004C8 52                      		push    dx			
   652 000004C9 53                      		push	bx
   653 000004CA E8ABFF                  		call plot_xy
   654                                  		
   655 000004CD 89C2                    		mov		dx,ax
   656 000004CF 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   657 000004D1 52                      		push    dx			
   658 000004D2 53                      		push	bx
   659 000004D3 E8A2FF                  		call plot_xy
   660                                  			
   661 000004D6 89CF                    		mov		di,cx
   662 000004D8 81EF0100                		sub		di,1	 ;di=r-1
   663 000004DC BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   664                                  		
   665                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   666                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   667                                  ;valores positivos para d
   668                                  
   669                                  stay:				;loop
   670 000004DF 89FE                    		mov		si,di
   671 000004E1 81FE0000                		cmp		si,0
   672 000004E5 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   673 000004E7 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   674 000004E9 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   675 000004EB 81C60300                		add		si,3
   676 000004EF 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   677 000004F1 42                      		inc		dx		;incrementa dx
   678 000004F2 E90E00                  		jmp		plotar
   679                                  inf:	
   680 000004F5 89D6                    		mov		si,dx
   681 000004F7 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   682 000004F9 D1E6                    		sal		si,1
   683 000004FB 81C60500                		add		si,5
   684 000004FF 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   685 00000501 42                      		inc		dx		;incrementa x (dx)
   686 00000502 49                      		dec		cx		;decrementa y (cx)
   687                                  	
   688                                  plotar:	
   689 00000503 89D6                    		mov		si,dx
   690 00000505 01C6                    		add		si,ax
   691 00000507 56                      		push    si			;coloca a abcisa x+xc na pilha
   692 00000508 89CE                    		mov		si,cx
   693 0000050A 01DE                    		add		si,bx
   694 0000050C 56                      		push    si			;coloca a ordenada y+yc na pilha
   695 0000050D E868FF                  		call plot_xy		;toma conta do segundo octante
   696 00000510 89C6                    		mov		si,ax
   697 00000512 01D6                    		add		si,dx
   698 00000514 56                      		push    si			;coloca a abcisa xc+x na pilha
   699 00000515 89DE                    		mov		si,bx
   700 00000517 29CE                    		sub		si,cx
   701 00000519 56                      		push    si			;coloca a ordenada yc-y na pilha
   702 0000051A E85BFF                  		call plot_xy		;toma conta do s�timo octante
   703 0000051D 89C6                    		mov		si,ax
   704 0000051F 01CE                    		add		si,cx
   705 00000521 56                      		push    si			;coloca a abcisa xc+y na pilha
   706 00000522 89DE                    		mov		si,bx
   707 00000524 01D6                    		add		si,dx
   708 00000526 56                      		push    si			;coloca a ordenada yc+x na pilha
   709 00000527 E84EFF                  		call plot_xy		;toma conta do segundo octante
   710 0000052A 89C6                    		mov		si,ax
   711 0000052C 01CE                    		add		si,cx
   712 0000052E 56                      		push    si			;coloca a abcisa xc+y na pilha
   713 0000052F 89DE                    		mov		si,bx
   714 00000531 29D6                    		sub		si,dx
   715 00000533 56                      		push    si			;coloca a ordenada yc-x na pilha
   716 00000534 E841FF                  		call plot_xy		;toma conta do oitavo octante
   717 00000537 89C6                    		mov		si,ax
   718 00000539 29D6                    		sub		si,dx
   719 0000053B 56                      		push    si			;coloca a abcisa xc-x na pilha
   720 0000053C 89DE                    		mov		si,bx
   721 0000053E 01CE                    		add		si,cx
   722 00000540 56                      		push    si			;coloca a ordenada yc+y na pilha
   723 00000541 E834FF                  		call plot_xy		;toma conta do terceiro octante
   724 00000544 89C6                    		mov		si,ax
   725 00000546 29D6                    		sub		si,dx
   726 00000548 56                      		push    si			;coloca a abcisa xc-x na pilha
   727 00000549 89DE                    		mov		si,bx
   728 0000054B 29CE                    		sub		si,cx
   729 0000054D 56                      		push    si			;coloca a ordenada yc-y na pilha
   730 0000054E E827FF                  		call plot_xy		;toma conta do sexto octante
   731 00000551 89C6                    		mov		si,ax
   732 00000553 29CE                    		sub		si,cx
   733 00000555 56                      		push    si			;coloca a abcisa xc-y na pilha
   734 00000556 89DE                    		mov		si,bx
   735 00000558 29D6                    		sub		si,dx
   736 0000055A 56                      		push    si			;coloca a ordenada yc-x na pilha
   737 0000055B E81AFF                  		call plot_xy		;toma conta do quinto octante
   738 0000055E 89C6                    		mov		si,ax
   739 00000560 29CE                    		sub		si,cx
   740 00000562 56                      		push    si			;coloca a abcisa xc-y na pilha
   741 00000563 89DE                    		mov		si,bx
   742 00000565 01D6                    		add		si,dx
   743 00000567 56                      		push    si			;coloca a ordenada yc-x na pilha
   744 00000568 E80DFF                  		call plot_xy		;toma conta do quarto octante
   745                                  		
   746 0000056B 39D1                    		cmp		cx,dx
   747 0000056D 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   748 0000056F E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   749                                  		
   750                                  fim_circle:
   751 00000572 5F                      		pop		di
   752 00000573 5E                      		pop		si
   753 00000574 5A                      		pop		dx
   754 00000575 59                      		pop		cx
   755 00000576 5B                      		pop		bx
   756 00000577 58                      		pop		ax
   757 00000578 9D                      		popf
   758 00000579 5D                      		pop		bp
   759 0000057A C20600                  		ret		6
   760                                  ;-----------------------------------------------------------------------------
   761                                  ;    fun��o full_circle
   762                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   763                                  ; cor definida na variavel cor					  
   764                                  full_circle:
   765 0000057D 55                      		push 	bp
   766 0000057E 89E5                    		mov	 	bp,sp
   767 00000580 9C                      		pushf                        ;coloca os flags na pilha
   768 00000581 50                      		push 	ax
   769 00000582 53                      		push 	bx
   770 00000583 51                      		push	cx
   771 00000584 52                      		push	dx
   772 00000585 56                      		push	si
   773 00000586 57                      		push	di
   774                                  
   775 00000587 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   776 0000058A 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   777 0000058D 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   778                                  		
   779 00000590 89DE                    		mov		si,bx
   780 00000592 29CE                    		sub		si,cx
   781 00000594 50                      		push    ax			;coloca xc na pilha			
   782 00000595 56                      		push	si			;coloca yc-r na pilha
   783 00000596 89DE                    		mov		si,bx
   784 00000598 01CE                    		add		si,cx
   785 0000059A 50                      		push	ax		;coloca xc na pilha
   786 0000059B 56                      		push	si		;coloca yc+r na pilha
   787 0000059C E89B00                  		call line
   788                                  		
   789                                  			
   790 0000059F 89CF                    		mov		di,cx
   791 000005A1 81EF0100                		sub		di,1	 ;di=r-1
   792 000005A5 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   793                                  		
   794                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   795                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   796                                  ;valores positivos para d
   797                                  
   798                                  stay_full:				;loop
   799 000005A8 89FE                    		mov		si,di
   800 000005AA 81FE0000                		cmp		si,0
   801 000005AE 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   802 000005B0 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   803 000005B2 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   804 000005B4 81C60300                		add		si,3
   805 000005B8 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   806 000005BA 42                      		inc		dx		;incrementa dx
   807 000005BB E90E00                  		jmp		plotar_full
   808                                  
   809                                  inf_full:	
   810 000005BE 89D6                    		mov		si,dx
   811 000005C0 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   812 000005C2 D1E6                    		sal		si,1
   813 000005C4 81C60500                		add		si,5
   814 000005C8 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   815 000005CA 42                      		inc		dx		;incrementa x (dx)
   816 000005CB 49                      		dec		cx		;decrementa y (cx)
   817                                  	
   818                                  plotar_full:	
   819 000005CC 89C6                    		mov		si,ax
   820 000005CE 01CE                    		add		si,cx
   821 000005D0 56                      		push	si		;coloca a abcisa y+xc na pilha			
   822 000005D1 89DE                    		mov		si,bx
   823 000005D3 29D6                    		sub		si,dx
   824 000005D5 56                      		push    si		;coloca a ordenada yc-x na pilha
   825 000005D6 89C6                    		mov		si,ax
   826 000005D8 01CE                    		add		si,cx
   827 000005DA 56                      		push	si		;coloca a abcisa y+xc na pilha	
   828 000005DB 89DE                    		mov		si,bx
   829 000005DD 01D6                    		add		si,dx
   830 000005DF 56                      		push    si		;coloca a ordenada yc+x na pilha	
   831 000005E0 E85700                  		call 	line
   832                                  		
   833 000005E3 89C6                    		mov		si,ax
   834 000005E5 01D6                    		add		si,dx
   835 000005E7 56                      		push	si		;coloca a abcisa xc+x na pilha			
   836 000005E8 89DE                    		mov		si,bx
   837 000005EA 29CE                    		sub		si,cx
   838 000005EC 56                      		push    si		;coloca a ordenada yc-y na pilha
   839 000005ED 89C6                    		mov		si,ax
   840 000005EF 01D6                    		add		si,dx
   841 000005F1 56                      		push	si		;coloca a abcisa xc+x na pilha	
   842 000005F2 89DE                    		mov		si,bx
   843 000005F4 01CE                    		add		si,cx
   844 000005F6 56                      		push    si		;coloca a ordenada yc+y na pilha	
   845 000005F7 E84000                  		call	line
   846                                  		
   847 000005FA 89C6                    		mov		si,ax
   848 000005FC 29D6                    		sub		si,dx
   849 000005FE 56                      		push	si		;coloca a abcisa xc-x na pilha			
   850 000005FF 89DE                    		mov		si,bx
   851 00000601 29CE                    		sub		si,cx
   852 00000603 56                      		push    si		;coloca a ordenada yc-y na pilha
   853 00000604 89C6                    		mov		si,ax
   854 00000606 29D6                    		sub		si,dx
   855 00000608 56                      		push	si		;coloca a abcisa xc-x na pilha	
   856 00000609 89DE                    		mov		si,bx
   857 0000060B 01CE                    		add		si,cx
   858 0000060D 56                      		push    si		;coloca a ordenada yc+y na pilha	
   859 0000060E E82900                  		call	line
   860                                  		
   861 00000611 89C6                    		mov		si,ax
   862 00000613 29CE                    		sub		si,cx
   863 00000615 56                      		push	si		;coloca a abcisa xc-y na pilha			
   864 00000616 89DE                    		mov		si,bx
   865 00000618 29D6                    		sub		si,dx
   866 0000061A 56                      		push    si		;coloca a ordenada yc-x na pilha
   867 0000061B 89C6                    		mov		si,ax
   868 0000061D 29CE                    		sub		si,cx
   869 0000061F 56                      		push	si		;coloca a abcisa xc-y na pilha	
   870 00000620 89DE                    		mov		si,bx
   871 00000622 01D6                    		add		si,dx
   872 00000624 56                      		push    si		;coloca a ordenada yc+x na pilha	
   873 00000625 E81200                  		call	line
   874                                  		
   875 00000628 39D1                    		cmp		cx,dx
   876 0000062A 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   877 0000062C E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   878                                  			
   879                                  fim_full_circle:
   880 0000062F 5F                      		pop		di
   881 00000630 5E                      		pop		si
   882 00000631 5A                      		pop		dx
   883 00000632 59                      		pop		cx
   884 00000633 5B                      		pop		bx
   885 00000634 58                      		pop		ax
   886 00000635 9D                      		popf
   887 00000636 5D                      		pop		bp
   888 00000637 C20600                  		ret		6
   889                                  ;-----------------------------------------------------------------------------
   890                                  ;
   891                                  ;   fun��o line
   892                                  ;
   893                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   894                                  line:
   895 0000063A 55                      		push		bp
   896 0000063B 89E5                    		mov		bp,sp
   897 0000063D 9C                      		pushf                        ;coloca os flags na pilha
   898 0000063E 50                      		push 		ax
   899 0000063F 53                      		push 		bx
   900 00000640 51                      		push		cx
   901 00000641 52                      		push		dx
   902 00000642 56                      		push		si
   903 00000643 57                      		push		di
   904 00000644 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   905 00000647 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   906 0000064A 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   907 0000064D 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   908 00000650 39C8                    		cmp		ax,cx
   909 00000652 7408                    		je		line2
   910 00000654 721C                    		jb		line1
   911 00000656 91                      		xchg		ax,cx
   912 00000657 87DA                    		xchg		bx,dx
   913 00000659 E91600                  		jmp		line1
   914                                  
   915                                  line2:		; deltax=0
   916 0000065C 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   917 0000065E 7202                    		jb		line3
   918 00000660 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   919                                  
   920                                  line3:	; dx > bx
   921 00000662 50                      		push		ax
   922 00000663 53                      		push		bx
   923 00000664 E811FE                  		call 		plot_xy
   924 00000667 39D3                    		cmp		bx,dx
   925 00000669 7503                    		jne		line31
   926 0000066B E9C600                  		jmp		fim_line
   927                                  line31:		
   928 0000066E 43                      		inc		bx
   929 0000066F E9F0FF                  		jmp		line3
   930                                  ;deltax <>0
   931                                  line1:
   932                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   933                                  	; cx > ax
   934 00000672 51                      		push		cx
   935 00000673 29C1                    		sub		cx,ax
   936 00000675 890E[0600]              		mov		[deltax],cx
   937 00000679 59                      		pop		cx
   938 0000067A 52                      		push		dx
   939 0000067B 29DA                    		sub		dx,bx
   940 0000067D 7702                    		ja		line32
   941 0000067F F7DA                    		neg		dx
   942                                  line32:		
   943 00000681 8916[0800]              		mov		[deltay],dx
   944 00000685 5A                      		pop		dx
   945                                  
   946 00000686 50                      		push		ax
   947 00000687 A1[0600]                		mov		ax,[deltax]
   948 0000068A 3B06[0800]              		cmp		ax,[deltay]
   949 0000068E 58                      		pop		ax
   950 0000068F 724D                    		jb		line5
   951                                  
   952                                  	; cx > ax e deltax>deltay
   953 00000691 51                      		push		cx
   954 00000692 29C1                    		sub		cx,ax
   955 00000694 890E[0600]              		mov		[deltax],cx
   956 00000698 59                      		pop		cx
   957 00000699 52                      		push		dx
   958 0000069A 29DA                    		sub		dx,bx
   959 0000069C 8916[0800]              		mov		[deltay],dx
   960 000006A0 5A                      		pop		dx
   961                                  
   962 000006A1 89C6                    		mov		si,ax
   963                                  line4:
   964 000006A3 50                      		push		ax
   965 000006A4 52                      		push		dx
   966 000006A5 56                      		push		si
   967 000006A6 29C6                    		sub		si,ax	;(x-x1)
   968 000006A8 A1[0800]                		mov		ax,[deltay]
   969 000006AB F7EE                    		imul		si
   970 000006AD 8B36[0600]              		mov		si,[deltax]		;arredondar
   971 000006B1 D1EE                    		shr		si,1
   972                                  ; se numerador (DX)>0 soma se <0 subtrai
   973 000006B3 81FA0000                		cmp		dx,0
   974 000006B7 7C09                    		jl		ar1
   975 000006B9 01F0                    		add		ax,si
   976 000006BB 81D20000                		adc		dx,0
   977 000006BF E90600                  		jmp		arc1
   978 000006C2 29F0                    ar1:		sub		ax,si
   979 000006C4 81DA0000                		sbb		dx,0
   980                                  arc1:
   981 000006C8 F73E[0600]              		idiv		word [deltax]
   982 000006CC 01D8                    		add		ax,bx
   983 000006CE 5E                      		pop		si
   984 000006CF 56                      		push		si
   985 000006D0 50                      		push		ax
   986 000006D1 E8A4FD                  		call		plot_xy
   987 000006D4 5A                      		pop		dx
   988 000006D5 58                      		pop		ax
   989 000006D6 39CE                    		cmp		si,cx
   990 000006D8 745A                    		je		fim_line
   991 000006DA 46                      		inc		si
   992 000006DB E9C5FF                  		jmp		line4
   993                                  
   994 000006DE 39D3                    line5:		cmp		bx,dx
   995 000006E0 7203                    		jb 		line7
   996 000006E2 91                      		xchg		ax,cx
   997 000006E3 87DA                    		xchg		bx,dx
   998                                  line7:
   999 000006E5 51                      		push		cx
  1000 000006E6 29C1                    		sub		cx,ax
  1001 000006E8 890E[0600]              		mov		[deltax],cx
  1002 000006EC 59                      		pop		cx
  1003 000006ED 52                      		push		dx
  1004 000006EE 29DA                    		sub		dx,bx
  1005 000006F0 8916[0800]              		mov		[deltay],dx
  1006 000006F4 5A                      		pop		dx
  1007 000006F5 89DE                    		mov		si,bx
  1008                                  line6:
  1009 000006F7 52                      		push		dx
  1010 000006F8 56                      		push		si
  1011 000006F9 50                      		push		ax
  1012 000006FA 29DE                    		sub		si,bx	;(y-y1)
  1013 000006FC A1[0600]                		mov		ax,[deltax]
  1014 000006FF F7EE                    		imul		si
  1015 00000701 8B36[0800]              		mov		si,[deltay]		;arredondar
  1016 00000705 D1EE                    		shr		si,1
  1017                                  ; se numerador (DX)>0 soma se <0 subtrai
  1018 00000707 81FA0000                		cmp		dx,0
  1019 0000070B 7C09                    		jl		ar2
  1020 0000070D 01F0                    		add		ax,si
  1021 0000070F 81D20000                		adc		dx,0
  1022 00000713 E90600                  		jmp		arc2
  1023                                  ar2:		
  1024 00000716 29F0                    		sub		ax,si
  1025 00000718 81EA0000                		sub		dx,0
  1026                                  arc2:
  1027 0000071C F73E[0800]              		idiv		word [deltay]
  1028 00000720 89C7                    		mov		di,ax
  1029 00000722 58                      		pop		ax
  1030 00000723 01C7                    		add		di,ax
  1031 00000725 5E                      		pop		si
  1032 00000726 57                      		push		di
  1033 00000727 56                      		push		si
  1034 00000728 E84DFD                  		call		plot_xy
  1035 0000072B 5A                      		pop		dx
  1036 0000072C 39D6                    		cmp		si,dx
  1037 0000072E 7404                    		je		fim_line
  1038 00000730 46                      		inc		si
  1039 00000731 E9C3FF                  		jmp		line6
  1040                                  
  1041                                  fim_line:
  1042 00000734 5F                      		pop		di
  1043 00000735 5E                      		pop		si
  1044 00000736 5A                      		pop		dx
  1045 00000737 59                      		pop		cx
  1046 00000738 5B                      		pop		bx
  1047 00000739 58                      		pop		ax
  1048 0000073A 9D                      		popf
  1049 0000073B 5D                      		pop		bp
  1050 0000073C C20800                  		ret		8
  1051                                  ;*******************************************************************
  1052                                  segment data
  1053                                  
  1054 00000000 0F                      cor		db		branco_intenso
  1055                                  
  1056                                  ;	I R G B COR
  1057                                  ;	0 0 0 0 preto
  1058                                  ;	0 0 0 1 azul
  1059                                  ;	0 0 1 0 verde
  1060                                  ;	0 0 1 1 cyan
  1061                                  ;	0 1 0 0 vermelho
  1062                                  ;	0 1 0 1 magenta
  1063                                  ;	0 1 1 0 marrom
  1064                                  ;	0 1 1 1 branco
  1065                                  ;	1 0 0 0 cinza
  1066                                  ;	1 0 0 1 azul claro
  1067                                  ;	1 0 1 0 verde claro
  1068                                  ;	1 0 1 1 cyan claro
  1069                                  ;	1 1 0 0 rosa
  1070                                  ;	1 1 0 1 magenta claro
  1071                                  ;	1 1 1 0 amarelo
  1072                                  ;	1 1 1 1 branco intenso
  1073                                  
  1074                                  preto			equ		0
  1075                                  azul			equ		1
  1076                                  verde			equ		2
  1077                                  cyan			equ		3
  1078                                  vermelho		equ		4
  1079                                  magenta			equ		5
  1080                                  marrom			equ		6
  1081                                  branco			equ		7
  1082                                  cinza			equ		8
  1083                                  azul_claro		equ		9
  1084                                  verde_claro		equ		10
  1085                                  cyan_claro		equ		11
  1086                                  rosa			equ		12
  1087                                  magenta_claro	equ		13
  1088                                  amarelo			equ		14
  1089                                  branco_intenso	equ		15
  1090                                  
  1091 00000001 00                      modo_anterior	db		0
  1092 00000002 0000                    linha   		dw  		0
  1093 00000004 0000                    coluna  		dw  		0
  1094 00000006 0000                    deltax			dw		0
  1095 00000008 0000                    deltay			dw		0
  1096 0000000A 0500                    x1A				dw		5
  1097 0000000C 6900                    x2A				dw		105
  1098 0000000E 0500                    x1B 			dw		5
  1099 00000010 6900                    x2B  			dw		105
  1100 00000012 0000                    apaga1			dw		0
  1101 00000014 0000                    apaga2			dw		0
  1102                                  
  1103 00000016 0E01                    player_x1    	dw      270
  1104 00000018 7201                    player_x2    	dw      370
  1105 0000001A 4001                    px      		dw      320
  1106 0000001C 1E00                    py      		dw      30
  1107 0000001E 0500                    vx      		dw      5
  1108 00000020 0500                    vy      		dw      5
  1109 00000022 506175736520            mens_2      	db          'Pause '
  1110 00000028 47414D45204F564552-     mens_3      	db          'GAME OVER. Deseja continuar? Y ou N'
  1111 00000031 2E20446573656A6120-
  1112 0000003A 636F6E74696E756172-
  1113 00000043 3F2059206F75204E   
  1114                                  
  1115                                  ;*************************************************************************
  1116                                  segment stack stack
  1117 00000000 <res 00000200>              		resb 		512
  1118                                  stacktop:
