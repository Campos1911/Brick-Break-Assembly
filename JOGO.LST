     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0500]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  reset_game:
    21                                  ; Desenhando o campo (bordas brancas)
    22 0000001A C606[0000]0F            		mov		byte[cor],branco_intenso
    23 0000001F B80000                  		mov		ax, 0
    24 00000022 50                      		push 	ax
    25 00000023 B80000                  		mov		ax, 0
    26 00000026 50                      		push	ax
    27 00000027 B80000                  		mov		ax, 0
    28 0000002A 50                      		push 	ax
    29 0000002B B8DF01                  		mov		ax, 479
    30 0000002E 50                      		push	ax
    31 0000002F E80407                  		call	line
    32                                  
    33 00000032 B80000                  		mov		ax, 0
    34 00000035 50                      		push 	ax
    35 00000036 B8DF01                  		mov		ax, 479
    36 00000039 50                      		push	ax
    37 0000003A B87F02                  		mov		ax, 639
    38 0000003D 50                      		push 	ax
    39 0000003E B8DF01                  		mov		ax, 479
    40 00000041 50                      		push	ax
    41 00000042 E8F106                  		call	line
    42                                  		
    43 00000045 B87F02                  		mov		ax, 639
    44 00000048 50                      		push 	ax
    45 00000049 B8DF01                  		mov		ax, 479
    46 0000004C 50                      		push	ax
    47 0000004D B87F02                  		mov		ax, 639
    48 00000050 50                      		push 	ax
    49 00000051 B80000                  		mov		ax, 0
    50 00000054 50                      		push	ax
    51 00000055 E8DE06                  		call	line
    52                                  
    53                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    54 00000058 B90600                  		mov		cx, 6
    55 0000005B C606[0000]01            		mov		byte[cor], azul
    56                                  	
    57                                  ; Primeira linha de quadrados (linha superior)
    58                                  fazQuadrado1:
    59 00000060 FE06[0000]              		inc		byte[cor]
    60 00000064 A1[0600]                		mov		ax, word[x1A]
    61 00000067 50                      		push 	ax
    62 00000068 B8DD01                  		mov		ax, 477
    63 0000006B 50                      		push	ax
    64 0000006C A1[0800]                		mov		ax, word[x2A]
    65 0000006F 50                      		push 	ax
    66 00000070 B8DD01                  		mov		ax, 477
    67 00000073 50                      		push	ax
    68 00000074 E8BF06                  		call	line
    69                                  		
    70 00000077 A1[0800]                		mov		ax, word[x2A]
    71 0000007A 50                      		push 	ax
    72 0000007B B8DD01                  		mov		ax, 477
    73 0000007E 50                      		push	ax
    74 0000007F A1[0800]                		mov		ax, word[x2A]
    75 00000082 50                      		push 	ax
    76 00000083 B8B501                  		mov		ax, 437
    77 00000086 50                      		push	ax
    78 00000087 E8AC06                  		call	line
    79                                  		
    80 0000008A A1[0800]                		mov		ax, word[x2A]
    81 0000008D 50                      		push 	ax
    82 0000008E B8B501                  		mov		ax, 437
    83 00000091 50                      		push	ax
    84 00000092 A1[0600]                		mov		ax, word[x1A]
    85 00000095 50                      		push 	ax
    86 00000096 B8B501                  		mov		ax, 437
    87 00000099 50                      		push	ax
    88 0000009A E89906                  		call	line
    89                                  		
    90 0000009D A1[0600]                		mov		ax, word[x1A]
    91 000000A0 50                      		push 	ax
    92 000000A1 B8B501                  		mov		ax, 437
    93 000000A4 50                      		push	ax
    94 000000A5 A1[0600]                		mov		ax, word[x1A]
    95 000000A8 50                      		push 	ax
    96 000000A9 B8DD01                  		mov		ax, 477
    97 000000AC 50                      		push	ax
    98 000000AD E88606                  		call	line
    99 000000B0 8106[0800]6900          		add		word[x2A], 105
   100 000000B6 8106[0600]6900          		add		word[x1A] , 105
   101 000000BC E2A2                    		loop 	fazQuadrado1
   102                                  		
   103                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   104 000000BE B90600                  		mov		cx, 6
   105 000000C1 C606[0000]08            		mov		byte[cor], cinza
   106                                  		
   107                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   108 000000C6 FE06[0000]              		inc		byte[cor]
   109 000000CA A1[0A00]                		mov		ax, word[x1B]
   110 000000CD 50                      		push 	ax
   111 000000CE B8AB01                  		mov		ax, 427
   112 000000D1 50                      		push	ax
   113 000000D2 A1[0C00]                		mov		ax, word[x2B]
   114 000000D5 50                      		push 	ax
   115 000000D6 B8AB01                  		mov		ax, 427
   116 000000D9 50                      		push	ax
   117 000000DA E85906                  		call	line
   118                                  		
   119 000000DD A1[0C00]                		mov		ax, word[x2B]
   120 000000E0 50                      		push 	ax
   121 000000E1 B8AB01                  		mov		ax, 427
   122 000000E4 50                      		push	ax
   123 000000E5 A1[0C00]                		mov		ax, word[x2B]
   124 000000E8 50                      		push 	ax
   125 000000E9 B88301                  		mov		ax, 387
   126 000000EC 50                      		push	ax
   127 000000ED E84606                  		call	line
   128                                  		
   129 000000F0 A1[0C00]                		mov		ax, word[x2B]
   130 000000F3 50                      		push 	ax
   131 000000F4 B88301                  		mov		ax, 387
   132 000000F7 50                      		push	ax
   133 000000F8 A1[0A00]                		mov		ax, word[x1B]
   134 000000FB 50                      		push 	ax
   135 000000FC B88301                  		mov		ax, 387
   136 000000FF 50                      		push	ax
   137 00000100 E83306                  		call	line
   138                                  		
   139 00000103 A1[0A00]                		mov		ax, word[x1B]
   140 00000106 50                      		push 	ax
   141 00000107 B88301                  		mov		ax, 387
   142 0000010A 50                      		push	ax
   143 0000010B A1[0A00]                		mov		ax, word[x1B]
   144 0000010E 50                      		push 	ax
   145 0000010F B8AB01                  		mov		ax, 427
   146 00000112 50                      		push	ax
   147 00000113 E82006                  		call	line
   148 00000116 8106[0C00]6900          		add		word[x2B], 105
   149 0000011C 8106[0A00]6900          		add		word[x1B] , 105
   150 00000122 E2A2                    		loop 	fazQuadrado2
   151                                  
   152                                  
   153                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   154                                  
   155                                  continua:
   156 00000124 E8A600                      	call limpa_bola
   157                                  
   158 00000127 8B1E[2C00]                      mov bx, [vx]
   159 0000012B 011E[1600]                      add [px], bx
   160 0000012F 8B1E[2E00]                      mov bx, [vy]
   161 00000133 011E[1800]                      add [py], bx
   162                                  
   163 00000137 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   164 0000013C A1[1600]                		mov		ax,[px]
   165 0000013F 50                      		push		ax
   166 00000140 A1[1800]                		mov		ax,[py]
   167 00000143 50                      		push		ax
   168 00000144 B81000                  		mov		ax,16
   169 00000147 50                      		push		ax
   170 00000148 E82E05                  		call	full_circle
   171                                  
   172 0000014B A1[1200]                		mov		ax, [player_x1] ; Desenhando a raquete
   173 0000014E 50                      		push 	ax
   174 0000014F B80A00                  		mov		ax, 10
   175 00000152 50                      		push	ax
   176 00000153 A1[1400]                		mov		ax, [player_x2]
   177 00000156 50                      		push 	ax
   178 00000157 B80A00                  		mov		ax, 10
   179 0000015A 50                      		push	ax
   180 0000015B E8D805                  		call	line
   181                                  
   182 0000015E 59                              pop cx ; Recupera cx da pilha
   183 0000015F E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   184 00000161 E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   185 00000163 C3                              ret
   186                                  
   187                                  del2:
   188 00000164 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   189 00000165 B90008                          mov cx, 0800h ; Teste modificando este valor
   190                                  
   191                                  del1:
   192 00000168 BB6702                          mov bx, 615 ;Limita o campo na parte da direita
   193 0000016B 391E[1600]                      cmp [px], bx
   194 0000016F 7D71                            jge moveesquerda
   195                                  
   196 00000171 BB1400                          mov bx, 20 ; Limita o campo na parte da esquerda
   197 00000174 391E[1600]                      cmp [px], bx
   198 00000178 7E79                            jle movedireita
   199                                  
   200 0000017A BB6C01                          mov bx, 364 ; Limita o campo na parte de cima
   201 0000017D C706[2800]AB01          		mov	word[yToDelete1], 427
   202 00000183 C706[2A00]8301          		mov	word[yToDelete2], 387
   203 00000189 391E[1800]                      cmp [py], bx
   204 0000018D 7D75                    		jge intermediateMoveBaixo2
   205                                  
   206                                  sobe_mais:
   207 0000018F BB9E01                  		mov	bx, 414
   208 00000192 C706[2800]DD01          		mov	word[yToDelete1], 477
   209 00000198 C706[2A00]B501          		mov	word[yToDelete2], 437
   210 0000019E 391E[1800]              		cmp	[py], bx
   211 000001A2 7D60                    		jge	intermediateMoveBaixo2
   212                                  
   213                                  sobe_tudo:
   214 000001A4 BBC201                  		mov	bx, 450
   215 000001A7 391E[1800]              		cmp	[py], bx
   216 000001AB 7D68                    		jge	intermediateNaoApaga
   217                                  
   218 000001AD BB0A00                          mov bx, 10 ; Limita o campo na parte de baixo
   219 000001B0 391E[1800]                      cmp [py], bx
   220 000001B4 7E51                            jle movecima
   221                                  
   222 000001B6 B40B                            mov ah, 0bh      
   223 000001B8 CD21                            int 21h
   224 000001BA 3C00                            cmp al,0
   225 000001BC 755A                            jne intermediateVerifTeclas
   226 000001BE E8C302                  		call calcular_colisao_raquete
   227 000001C1 E960FF                          jmp continua
   228                                  
   229 000001C4 E85DFF                  		call delay
   230 000001C7 E89EFF                  		call del1
   231 000001CA E897FF                  		call del2
   232                                  
   233                                  limpa_bola:
   234 000001CD C606[0000]00                    mov     byte[cor],preto ; limpa bola
   235 000001D2 A1[1600]                        mov     ax,[px]
   236 000001D5 50                              push        ax
   237 000001D6 A1[1800]                        mov     ax,[py]
   238 000001D9 50                              push        ax
   239 000001DA B81400                          mov     ax,20
   240 000001DD 50                              push        ax
   241 000001DE E89804                          call    full_circle
   242 000001E1 C3                              ret
   243                                  
   244                                  moveesquerda:
   245 000001E2 E8E8FF                          call limpa_bola
   246 000001E5 A1[2C00]                		mov ax, [vx]
   247 000001E8 F7D8                            neg ax
   248 000001EA 89C3                            mov bx, ax
   249 000001EC 891E[2C00]                      mov [vx], bx
   250 000001F0 E931FF                          jmp continua
   251                                  
   252                                  movedireita:
   253 000001F3 E8D7FF                  		call limpa_bola
   254 000001F6 A1[2C00]                        mov ax, [vx]
   255 000001F9 F7D8                            neg ax
   256 000001FB 89C3                            mov bx, ax
   257 000001FD 891E[2C00]                      mov [vx], bx
   258 00000201 E920FF                          jmp continua
   259                                  
   260                                  intermediateMoveBaixo2
   261 00000204 E91A00                  	jmp movebaixo2
   262                                  
   263                                  movecima:
   264 00000207 A1[2E00]                        mov ax, [vy]
   265 0000020A F7D8                            neg ax
   266 0000020C 89C3                            mov bx, ax
   267 0000020E 891E[2E00]                      mov [vy], bx
   268 00000212 E90FFF                          jmp continua
   269                                  
   270                                  ;  PONTOS INTERMEDIÁRIOS PARA AS FUNÇÕES
   271                                  
   272                                  intermediateNaoApaga
   273 00000215 E9E601                  	jmp	nao_apaga
   274                                  
   275                                  intermediateVerifTeclas: ;	Função intermediária para pular para outra parte do código
   276 00000218 E9FD01                  	jmp verificar_teclas
   277                                  
   278                                  intermediateSobeMais:
   279 0000021B E971FF                  	jmp	sobe_mais
   280                                  
   281                                  intermediateSobeTudo:
   282 0000021E E983FF                  	jmp	sobe_tudo
   283                                  
   284                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   285                                  
   286                                  movebaixo2:
   287 00000221 B80500                  		mov ax, 5 ; Quadrado 1
   288 00000224 3906[1600]              		cmp [px], ax
   289 00000228 7D2D                    		jge	verifica_quad1 ; Pula para verificar se acertou no limite do quadrado (todos repetem essa lógica)
   290                                  volta1:
   291 0000022A B86E00                  		mov ax, 110 ; Quadrado 2
   292 0000022D 3906[1600]              		cmp [px], ax
   293 00000231 7D5D                    		jge	verifica_quad2
   294                                  volta2:
   295 00000233 B8D700                  		mov ax, 215 ; Quadrado 3
   296 00000236 3906[1600]              		cmp [px], ax
   297 0000023A 7D51                    		jge	intermediateVerificaQuad3
   298                                  volta3:
   299 0000023C B84001                  		mov ax, 320 ; Quadrado 4
   300 0000023F 3906[1600]              		cmp [px], ax
   301 00000243 7D7B                    		jge	intermediateVerificaQuad4
   302                                  volta4:
   303 00000245 B8A901                  		mov ax, 425 ; Quadrado 5
   304 00000248 3906[1600]              		cmp [px], ax
   305 0000024C 7D7B                    		jge	intermediateVerificaQuad5
   306                                  volta5:
   307 0000024E B81202                  		mov ax, 530 ; Quadrado 6
   308 00000251 3906[1600]              		cmp [px], ax
   309 00000255 7D78                    		jge	intermediateVerificaQuad6
   310                                  
   311                                  
   312                                  verifica_quad1:
   313 00000257 B86900                  		mov ax, 105
   314 0000025A 3906[1600]              		cmp	[px], ax
   315 0000025E 7FCA                    		jg volta1 ; Se não acertou, volta para verificar o próximo quadrado
   316 00000260 B8DD01                  		mov	ax, 477
   317 00000263 3B06[2800]              		cmp ax, word[yToDelete1]
   318 00000267 7409                    		je	ignora1
   319 00000269 B80100                  		mov	ax, 1
   320 0000026C 3B06[1A00]              		cmp ax, word[bloco_quebrado1]
   321 00000270 74A9                    		je	intermediateSobeMais
   322                                  ignora1:
   323 00000272 C706[0E00]0500          		mov word[apaga1], 5
   324 00000278 C706[1000]6900          		mov word[apaga2], 105
   325 0000027E B80100                  		mov	ax, 1
   326 00000281 A3[1A00]                		mov	word[bloco_quebrado1], ax
   327 00000284 E92601                  		jmp	apaga_quad ; Se acertou no limite, apaga o quadrado e rebate a bola
   328                                  
   329                                  intermediateSobeMais2:
   330 00000287 E991FF                  	jmp intermediateSobeMais
   331                                  
   332                                  intermediateSobeTudo2:
   333 0000028A E991FF                  	jmp intermediateSobeTudo
   334                                  
   335                                  intermediateVerificaQuad3:
   336 0000028D E94200                  	jmp verifica_quad3
   337                                  
   338                                  verifica_quad2:
   339 00000290 B8D200                  		mov ax, 210
   340 00000293 3906[1600]              		cmp	[px], ax
   341 00000297 7F9A                    		jg volta2
   342 00000299 B8DD01                  		mov	ax, 477
   343 0000029C 3B06[2800]              		cmp ax, word[yToDelete1]
   344 000002A0 7409                    		je	ignora2
   345 000002A2 B80100                  		mov	ax, 1
   346 000002A5 3B06[1C00]              		cmp ax, [bloco_quebrado2]
   347 000002A9 74DC                    		je	intermediateSobeMais2
   348                                  ignora2:
   349 000002AB C706[0E00]6E00          		mov word[apaga1], 110
   350 000002B1 C706[1000]D200          		mov word[apaga2], 210
   351 000002B7 B80100                  		mov ax, 1
   352 000002BA A3[1C00]                		mov	word[bloco_quebrado2], ax
   353 000002BD E9ED00                  		jmp	apaga_quad
   354                                  
   355                                  ;	Funções intermediárias para resolver o 'short jump'
   356                                  
   357                                  intermediateVerificaQuad4:
   358 000002C0 E93F00                  	jmp verifica_quad4
   359                                  
   360                                  intermediateVolta4:
   361 000002C3 E97FFF                  	jmp	volta4
   362                                  
   363                                  
   364                                  intermediateVolta3:
   365 000002C6 E973FF                  	jmp	volta3
   366                                  
   367                                  intermediateVerificaQuad5:
   368 000002C9 E96C00                  	jmp verifica_quad5
   369                                  
   370                                  
   371                                  
   372                                  intermediateVolta5:
   373 000002CC E97FFF                  	jmp	volta5
   374                                  
   375                                  
   376                                  
   377                                  intermediateVerificaQuad6:
   378 000002CF E99600                  	jmp verifica_quad6
   379                                  
   380                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   381                                  
   382                                  verifica_quad3:
   383 000002D2 B83B01                  		mov ax, 315
   384 000002D5 3906[1600]              		cmp	[px], ax
   385 000002D9 7FEB                    		jg intermediateVolta3
   386 000002DB B8DD01                  		mov	ax, 477
   387 000002DE 3B06[2800]              		cmp ax, word[yToDelete1]
   388 000002E2 7409                    		je	ignora3
   389 000002E4 B80100                  		mov	ax, 1
   390 000002E7 3B06[1E00]              		cmp ax, [bloco_quebrado3]
   391 000002EB 749A                    		je	intermediateSobeMais2
   392                                  ignora3:
   393 000002ED C706[0E00]D700          		mov word[apaga1], 215
   394 000002F3 C706[1000]3B01          		mov word[apaga2], 315
   395 000002F9 B80100                  		mov	ax, 1
   396 000002FC A3[1E00]                		mov	word[bloco_quebrado3], ax
   397 000002FF E9AB00                  		jmp	apaga_quad
   398                                  
   399                                  
   400                                  verifica_quad4:
   401 00000302 B8A401                  		mov ax, 420
   402 00000305 3906[1600]              		cmp	[px], ax
   403 00000309 7FB8                    		jg intermediateVolta4
   404 0000030B B8DD01                  		mov	ax, 477
   405 0000030E 3B06[2800]              		cmp ax, word[yToDelete1]
   406 00000312 7409                    		je	ignora4
   407 00000314 B80100                  		mov	ax, 1
   408 00000317 3B06[2000]              		cmp ax, [bloco_quebrado4]
   409 0000031B 7415                    		je	intermediateSobeMais3
   410                                  ignora4:
   411 0000031D C706[0E00]4001          		mov word[apaga1], 320
   412 00000323 C706[1000]A401          		mov word[apaga2], 420
   413 00000329 B80100                  		mov	ax, 1
   414 0000032C A3[2000]                		mov	word[bloco_quebrado4], ax
   415 0000032F E97B00                  		jmp	apaga_quad
   416                                  
   417                                  intermediateSobeMais3
   418 00000332 E952FF                  	jmp intermediateSobeMais2
   419                                  
   420                                  intermediateSobeTudo3
   421 00000335 E952FF                  	jmp intermediateSobeTudo2
   422                                  
   423                                  verifica_quad5:
   424 00000338 B80D02                  		mov ax, 525
   425 0000033B 3906[1600]              		cmp	[px], ax
   426 0000033F 7F8B                    		jg intermediateVolta5
   427 00000341 B8DD01                  		mov	ax, 477
   428 00000344 3B06[2800]              		cmp ax, word[yToDelete1]
   429 00000348 7409                    		je	ignora5
   430 0000034A B80100                  		mov	ax, 1
   431 0000034D 3B06[2200]              		cmp ax, [bloco_quebrado5]
   432 00000351 74DF                    		je	intermediateSobeMais3
   433                                  ignora5:
   434 00000353 C706[0E00]A901          		mov word[apaga1], 425
   435 00000359 C706[1000]0D02          		mov word[apaga2], 525
   436 0000035F B80100                  		mov	ax, 1
   437 00000362 A3[2200]                		mov	word[bloco_quebrado5], ax
   438 00000365 E94500                  		jmp	apaga_quad
   439                                  
   440                                  verifica_quad6:
   441 00000368 B87602                  		mov ax, 630
   442 0000036B 3906[1600]              		cmp	[px], ax
   443 0000036F 7F39                    		jg intermediateNaoApaga2
   444 00000371 B80100                  		mov	ax, 1
   445 00000374 3B06[2600]              		cmp ax, [bloco_cima_quebrado6]
   446 00000378 74BB                    		je	intermediateSobeTudo3
   447 0000037A B8DD01                  		mov	ax, 477
   448 0000037D 3B06[2800]              		cmp ax, word[yToDelete1]
   449 00000381 741E                    		je	cima_quebrado6
   450 00000383 B80100                  		mov	ax, 1
   451 00000386 3B06[2400]              		cmp ax, [bloco_quebrado6]
   452 0000038A 74A6                    		je	intermediateSobeMais3
   453                                  ignora6:
   454 0000038C C706[0E00]1202          		mov word[apaga1], 530
   455 00000392 C706[1000]7602          		mov word[apaga2], 630
   456 00000398 B80100                  		mov	ax, 1
   457 0000039B A3[2400]                		mov	word[bloco_quebrado6], ax
   458 0000039E E90C00                  		jmp	apaga_quad
   459                                  cima_quebrado6:
   460 000003A1 B80100                  	mov	ax, 1
   461 000003A4 A3[2600]                	mov	word[bloco_cima_quebrado6], ax
   462 000003A7 E9E2FF                  	jmp	ignora6
   463                                  
   464                                  intermediateNaoApaga2
   465 000003AA E95100                  	jmp nao_apaga
   466                                  
   467                                  apaga_quad:
   468 000003AD C606[0000]00            		mov		byte[cor], preto
   469 000003B2 A1[0E00]                		mov		ax, word[apaga1]
   470 000003B5 50                      		push 	ax
   471 000003B6 A1[2800]                		mov		ax, word[yToDelete1]
   472 000003B9 50                      		push	ax
   473 000003BA A1[1000]                		mov		ax, word[apaga2]
   474 000003BD 50                      		push 	ax
   475 000003BE A1[2800]                		mov		ax, word[yToDelete1]
   476 000003C1 50                      		push	ax
   477 000003C2 E87103                  		call	line
   478                                  		
   479 000003C5 A1[1000]                		mov		ax, word[apaga2]
   480 000003C8 50                      		push 	ax
   481 000003C9 A1[2800]                		mov		ax, word[yToDelete1]
   482 000003CC 50                      		push	ax
   483 000003CD A1[1000]                		mov		ax, word[apaga2]
   484 000003D0 50                      		push 	ax
   485 000003D1 A1[2A00]                		mov		ax, word[yToDelete2]
   486 000003D4 50                      		push	ax
   487 000003D5 E85E03                  		call	line
   488                                  		
   489 000003D8 A1[1000]                		mov		ax, word[apaga2]
   490 000003DB 50                      		push 	ax
   491 000003DC A1[2A00]                		mov		ax, word[yToDelete2]
   492 000003DF 50                      		push	ax
   493 000003E0 A1[0E00]                		mov		ax, word[apaga1]
   494 000003E3 50                      		push 	ax
   495 000003E4 A1[2A00]                		mov		ax, word[yToDelete2]
   496 000003E7 50                      		push	ax
   497 000003E8 E84B03                  		call	line
   498                                  		
   499 000003EB A1[0E00]                		mov		ax, word[apaga1]
   500 000003EE 50                      		push 	ax
   501 000003EF A1[2A00]                		mov		ax, word[yToDelete2]
   502 000003F2 50                      		push	ax
   503 000003F3 A1[0E00]                		mov		ax, word[apaga1]
   504 000003F6 50                      		push 	ax
   505 000003F7 A1[2800]                		mov		ax, word[yToDelete1]
   506 000003FA 50                      		push	ax
   507 000003FB E83803                  		call	line
   508                                  
   509                                  nao_apaga:
   510 000003FE A1[2E00]                        mov ax, [vy]
   511 00000401 F7D8                            neg ax
   512 00000403 89C3                            mov bx, ax
   513 00000405 891E[2E00]                      mov [vy], bx
   514 00000409 E918FD                          jmp continua
   515                                  
   516                                  sai:
   517 0000040C B400                            mov ah,0 ; set video mode
   518 0000040E A0[0500]                        mov al,[modo_anterior] ; recupera o modo anterior
   519 00000411 CD10                            int 10h
   520 00000413 B8004C                          mov ax,4c00h
   521 00000416 CD21                            int 21h
   522                                  		
   523                                  
   524                                  verificar_teclas: ;Estrutura para decidir o que será feito durante o jogo
   525 00000418 55                              push bp
   526 00000419 89E5                            mov bp, sp
   527 0000041B B408                            mov ah, 08h
   528 0000041D CD21                            int 21h
   529 0000041F 3C70                    		cmp al, 70h ; Código ASCII para a tecla 'p'
   530 00000421 742B                    		je	pausa
   531 00000423 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   532 00000425 74E5                            je sai
   533 00000427 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   534 00000429 752E                            jne verificar_baixo
   535 0000042B E8B500                          call limpa_raquete ;Se 'd' não for pressionado, ele pula para baixo e mexe a raquete
   536 0000042E B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   537 00000431 BB7602                          mov bx, 630 ;testa se já chegou no limite
   538 00000434 391E[1400]                      cmp [player_x2], bx
   539 00000438 7D46                            jge fim_verificar_teclas
   540 0000043A 0306[1200]                      add ax, [player_x1]
   541 0000043E A3[1200]                        mov [player_x1], ax
   542 00000441 B81400                          mov ax, 20
   543 00000444 0306[1400]                      add ax, [player_x2]
   544 00000448 A3[1400]                        mov [player_x2], ax
   545 0000044B E93200                          jmp fim_verificar_teclas
   546                                  
   547                                  
   548                                  pausa:
   549 0000044E B408                            mov ah, 08h
   550 00000450 CD21                            int 21h
   551 00000452 3C70                    		cmp al, 70h ;Compara a tecla com a letra 'p', fica parado aqui até apertar 'p' novamente
   552 00000454 75F8                    		jne pausa
   553 00000456 E9CBFC                  		jmp continua
   554                                  
   555                                  verificar_baixo:
   556 00000459 3C61                            cmp al, 61h
   557 0000045B 7523                            jne fim_verificar_teclas
   558 0000045D E88300                          call limpa_raquete
   559 00000460 B8ECFF                          mov ax, -20
   560 00000463 BB0A00                          mov bx, 10
   561 00000466 391E[1200]                      cmp [player_x1], bx
   562 0000046A 7E14                            jle fim_verificar_teclas
   563 0000046C 0306[1200]                      add ax, [player_x1]
   564 00000470 A3[1200]                        mov [player_x1], ax
   565 00000473 B8ECFF                          mov ax, -20
   566 00000476 0306[1400]                      add ax, [player_x2]
   567 0000047A A3[1400]                        mov [player_x2], ax
   568 0000047D E90000                          jmp fim_verificar_teclas
   569                                  
   570                                  fim_verificar_teclas:
   571 00000480 5D                              pop bp
   572 00000481 E9A0FC                          jmp continua
   573                                  
   574                                  calcular_colisao_raquete:
   575 00000484 B81E00                          mov ax, 30
   576 00000487 3906[1800]                      cmp [py], ax
   577 0000048B 7403                            je verifica_colisao_raquete
   578 0000048D 7C6D                    		jl game_over
   579 0000048F C3                              ret
   580                                  
   581                                  verifica_colisao_raquete:
   582 00000490 8B1E[1400]                      mov bx, [player_x2]
   583 00000494 81C31000                        add bx, 16
   584 00000498 391E[1600]                      cmp [px], bx
   585 0000049C 7E0F                            jle rebate_cima1
   586 0000049E 8B1E[1200]                      mov bx, [player_x1]
   587 000004A2 81EB1000                        sub bx, 16
   588 000004A6 391E[1600]                      cmp [px], bx
   589 000004AA 7D1C                            jge rebate_baixo1
   590 000004AC C3                              ret
   591                                  
   592                                  ;FUNÇÕES RESPONSÁVEIS POR REBATER A BOLA E ALTERAR A DIREÇÃO (ESQUERDA OU DIREITA)
   593                                  rebate_cima1:
   594 000004AD 8B1E[1200]              		mov bx, [player_x1]
   595 000004B1 81EB1000                		sub bx, 16
   596 000004B5 391E[1600]              		cmp [px], bx
   597 000004B9 7D01                    		jge rebate_cima2
   598 000004BB C3                              ret
   599                                  
   600                                  rebate_cima2:
   601 000004BC A1[2E00]                        mov ax, [vy]
   602 000004BF F7D8                            neg ax
   603 000004C1 89C3                            mov bx, ax
   604 000004C3 891E[2E00]              		mov [vy], bx
   605 000004C7 C3                              ret
   606                                  
   607                                  rebate_baixo1:
   608 000004C8 8B1E[1400]                      mov bx, [player_x2]
   609 000004CC 81C31000                        add bx, 16
   610 000004D0 391E[1600]                      cmp [px], bx
   611 000004D4 7E01                            jle rebate_baixo2
   612 000004D6 C3                              ret
   613                                  
   614                                  rebate_baixo2:
   615 000004D7 A1[2E00]                        mov ax, [vy]
   616 000004DA F7D8                            neg ax
   617 000004DC 89C3                            mov bx, ax
   618 000004DE 891E[2E00]                      mov [vy], bx
   619 000004E2 C3                              ret
   620                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   621                                  
   622                                  limpa_raquete: ;FUNÇÃO UTILIZADA PARA ATUALIZAR A POSIÇÃO DA RAQUETE 
   623 000004E3 C606[0000]00                    mov     byte[cor], preto
   624 000004E8 A1[1200]                        mov     ax,[player_x1]
   625 000004EB 50                              push    ax
   626 000004EC B80A00                          mov     ax,10
   627 000004EF 50                              push    ax
   628 000004F0 A1[1400]                        mov     ax,[player_x2]
   629 000004F3 50                              push    ax
   630 000004F4 B80A00                          mov     ax,10
   631 000004F7 50                              push    ax
   632 000004F8 E83B02                          call    line
   633 000004FB C3                              ret
   634                                  
   635                                  game_over: ;;Escreve a mensagem na tela e espera a tecla do jogador
   636 000004FC B92300                  		mov     	cx,35			;número de caracteres
   637 000004FF BB0000                      	mov     	bx,0
   638 00000502 B60A                        	mov     	dh,10			
   639 00000504 B20A                        	mov     	dl,10
   640 00000506 C606[0000]0F            		mov		byte[cor],branco_intenso
   641                                  
   642                                  repete_para_escrever:
   643 0000050B E83100                  		call	cursor
   644 0000050E 8A87[3000]                  	mov     al,[bx+mens_3]
   645 00000512 E84100                  		call	caracter
   646 00000515 43                          	inc     bx			;proximo caracter
   647 00000516 FEC2                    		inc		dl			;avanca a coluna
   648 00000518 E2F1                        	loop    repete_para_escrever
   649                                  
   650                                  verfica_continua_ou_nao:
   651 0000051A 55                      		push bp
   652 0000051B 89E5                            mov bp, sp
   653                                  
   654 0000051D B408                    		mov ah, 08h
   655 0000051F CD21                            int 21h
   656 00000521 3C6E                    		cmp al, 6eh
   657 00000523 7407                    		je	acaba
   658 00000525 3C79                    		cmp al, 79h
   659 00000527 7413                    		je limpa_tudo
   660 00000529 E9EEFF                  		jmp	verfica_continua_ou_nao
   661                                  
   662                                  acaba: ;Finalizando o programa
   663 0000052C B408                    		mov    	ah,08h
   664 0000052E CD21                    		int     21h
   665 00000530 B400                    	    mov  	ah,0   					; set video mode
   666 00000532 A0[0500]                	    mov  	al,[modo_anterior]   	; modo anterior
   667 00000535 CD10                    	    int  	10h
   668 00000537 B8004C                  		mov     ax,4c00h
   669 0000053A CD21                    		int     21h
   670                                  
   671                                  limpa_tudo: ;FUNÇÃO PARA LIMPAR O CAMPO TODO E VOLTAR PARA O ZERO
   672 0000053C E8DBFA                  	call reset_game
   673                                  
   674                                  ;***************************************************************************
   675                                  ;
   676                                  ;   função cursor
   677                                  ;
   678                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   679                                  cursor:
   680 0000053F 9C                      		pushf
   681 00000540 50                      		push 		ax
   682 00000541 53                      		push 		bx
   683 00000542 51                      		push		cx
   684 00000543 52                      		push		dx
   685 00000544 56                      		push		si
   686 00000545 57                      		push		di
   687 00000546 55                      		push		bp
   688 00000547 B402                    		mov     	ah,2
   689 00000549 B700                    		mov     	bh,0
   690 0000054B CD10                    		int     	10h
   691 0000054D 5D                      		pop		bp
   692 0000054E 5F                      		pop		di
   693 0000054F 5E                      		pop		si
   694 00000550 5A                      		pop		dx
   695 00000551 59                      		pop		cx
   696 00000552 5B                      		pop		bx
   697 00000553 58                      		pop		ax
   698 00000554 9D                      		popf
   699 00000555 C3                      		ret
   700                                  ;_____________________________________________________________________________
   701                                  ;
   702                                  ;   fun��o caracter escrito na posi��o do cursor
   703                                  ;
   704                                  ; al= caracter a ser escrito
   705                                  ; cor definida na variavel cor
   706                                  caracter:
   707 00000556 9C                      		pushf
   708 00000557 50                      		push 		ax
   709 00000558 53                      		push 		bx
   710 00000559 51                      		push		cx
   711 0000055A 52                      		push		dx
   712 0000055B 56                      		push		si
   713 0000055C 57                      		push		di
   714 0000055D 55                      		push		bp
   715 0000055E B409                        	mov     	ah,9
   716 00000560 B700                        	mov     	bh,0
   717 00000562 B90100                      	mov     	cx,1
   718 00000565 8A1E[0000]                 		mov     	bl,[cor]
   719 00000569 CD10                        	int     	10h
   720 0000056B 5D                      		pop			bp
   721 0000056C 5F                      		pop			di
   722 0000056D 5E                      		pop			si
   723 0000056E 5A                      		pop			dx
   724 0000056F 59                      		pop			cx
   725 00000570 5B                      		pop			bx
   726 00000571 58                      		pop			ax
   727 00000572 9D                      		popf
   728 00000573 C3                      		ret
   729                                  ;_____________________________________________________________________________
   730                                  ;
   731                                  ;   fun��o plot_xy
   732                                  ;
   733                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   734                                  ; cor definida na variavel cor
   735                                  plot_xy:
   736 00000574 55                      		push		bp
   737 00000575 89E5                    		mov			bp,sp
   738 00000577 9C                      		pushf
   739 00000578 50                      		push 		ax
   740 00000579 53                      		push 		bx
   741 0000057A 51                      		push		cx
   742 0000057B 52                      		push		dx
   743 0000057C 56                      		push		si
   744 0000057D 57                      		push		di
   745 0000057E B40C                    	    mov     	ah,0ch
   746 00000580 A0[0000]                	    mov     	al,[cor]
   747 00000583 B700                    	    mov     	bh,0
   748 00000585 BADF01                  	    mov     	dx,479
   749 00000588 2B5604                  		sub			dx,[bp+4]
   750 0000058B 8B4E06                  	    mov     	cx,[bp+6]
   751 0000058E CD10                    	    int     	10h
   752 00000590 5F                      		pop			di
   753 00000591 5E                      		pop			si
   754 00000592 5A                      		pop			dx
   755 00000593 59                      		pop			cx
   756 00000594 5B                      		pop			bx
   757 00000595 58                      		pop			ax
   758 00000596 9D                      		popf	
   759 00000597 5D                      		pop			bp
   760 00000598 C20400                  		ret			4
   761                                  ;_____________________________________________________________________________
   762                                  ;    fun��o circle
   763                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   764                                  ; cor definida na variavel cor
   765                                  circle:
   766 0000059B 55                      		push 	bp
   767 0000059C 89E5                    		mov	 	bp,sp
   768 0000059E 9C                      		pushf                        ;coloca os flags na pilha
   769 0000059F 50                      		push 	ax
   770 000005A0 53                      		push 	bx
   771 000005A1 51                      		push	cx
   772 000005A2 52                      		push	dx
   773 000005A3 56                      		push	si
   774 000005A4 57                      		push	di
   775                                  		
   776 000005A5 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   777 000005A8 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   778 000005AB 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   779                                  		
   780 000005AE 89DA                    		mov 	dx,bx	
   781 000005B0 01CA                    		add		dx,cx       ;ponto extremo superior
   782 000005B2 50                      		push    ax			
   783 000005B3 52                      		push	dx
   784 000005B4 E8BDFF                  		call plot_xy
   785                                  		
   786 000005B7 89DA                    		mov		dx,bx
   787 000005B9 29CA                    		sub		dx,cx       ;ponto extremo inferior
   788 000005BB 50                      		push    ax			
   789 000005BC 52                      		push	dx
   790 000005BD E8B4FF                  		call plot_xy
   791                                  		
   792 000005C0 89C2                    		mov 	dx,ax	
   793 000005C2 01CA                    		add		dx,cx       ;ponto extremo direita
   794 000005C4 52                      		push    dx			
   795 000005C5 53                      		push	bx
   796 000005C6 E8ABFF                  		call plot_xy
   797                                  		
   798 000005C9 89C2                    		mov		dx,ax
   799 000005CB 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   800 000005CD 52                      		push    dx			
   801 000005CE 53                      		push	bx
   802 000005CF E8A2FF                  		call plot_xy
   803                                  			
   804 000005D2 89CF                    		mov		di,cx
   805 000005D4 81EF0100                		sub		di,1	 ;di=r-1
   806 000005D8 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   807                                  		
   808                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   809                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   810                                  ;valores positivos para d
   811                                  
   812                                  stay:				;loop
   813 000005DB 89FE                    		mov		si,di
   814 000005DD 81FE0000                		cmp		si,0
   815 000005E1 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   816 000005E3 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   817 000005E5 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   818 000005E7 81C60300                		add		si,3
   819 000005EB 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   820 000005ED 42                      		inc		dx		;incrementa dx
   821 000005EE E90E00                  		jmp		plotar
   822                                  inf:	
   823 000005F1 89D6                    		mov		si,dx
   824 000005F3 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   825 000005F5 D1E6                    		sal		si,1
   826 000005F7 81C60500                		add		si,5
   827 000005FB 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   828 000005FD 42                      		inc		dx		;incrementa x (dx)
   829 000005FE 49                      		dec		cx		;decrementa y (cx)
   830                                  	
   831                                  plotar:	
   832 000005FF 89D6                    		mov		si,dx
   833 00000601 01C6                    		add		si,ax
   834 00000603 56                      		push    si			;coloca a abcisa x+xc na pilha
   835 00000604 89CE                    		mov		si,cx
   836 00000606 01DE                    		add		si,bx
   837 00000608 56                      		push    si			;coloca a ordenada y+yc na pilha
   838 00000609 E868FF                  		call plot_xy		;toma conta do segundo octante
   839 0000060C 89C6                    		mov		si,ax
   840 0000060E 01D6                    		add		si,dx
   841 00000610 56                      		push    si			;coloca a abcisa xc+x na pilha
   842 00000611 89DE                    		mov		si,bx
   843 00000613 29CE                    		sub		si,cx
   844 00000615 56                      		push    si			;coloca a ordenada yc-y na pilha
   845 00000616 E85BFF                  		call plot_xy		;toma conta do s�timo octante
   846 00000619 89C6                    		mov		si,ax
   847 0000061B 01CE                    		add		si,cx
   848 0000061D 56                      		push    si			;coloca a abcisa xc+y na pilha
   849 0000061E 89DE                    		mov		si,bx
   850 00000620 01D6                    		add		si,dx
   851 00000622 56                      		push    si			;coloca a ordenada yc+x na pilha
   852 00000623 E84EFF                  		call plot_xy		;toma conta do segundo octante
   853 00000626 89C6                    		mov		si,ax
   854 00000628 01CE                    		add		si,cx
   855 0000062A 56                      		push    si			;coloca a abcisa xc+y na pilha
   856 0000062B 89DE                    		mov		si,bx
   857 0000062D 29D6                    		sub		si,dx
   858 0000062F 56                      		push    si			;coloca a ordenada yc-x na pilha
   859 00000630 E841FF                  		call plot_xy		;toma conta do oitavo octante
   860 00000633 89C6                    		mov		si,ax
   861 00000635 29D6                    		sub		si,dx
   862 00000637 56                      		push    si			;coloca a abcisa xc-x na pilha
   863 00000638 89DE                    		mov		si,bx
   864 0000063A 01CE                    		add		si,cx
   865 0000063C 56                      		push    si			;coloca a ordenada yc+y na pilha
   866 0000063D E834FF                  		call plot_xy		;toma conta do terceiro octante
   867 00000640 89C6                    		mov		si,ax
   868 00000642 29D6                    		sub		si,dx
   869 00000644 56                      		push    si			;coloca a abcisa xc-x na pilha
   870 00000645 89DE                    		mov		si,bx
   871 00000647 29CE                    		sub		si,cx
   872 00000649 56                      		push    si			;coloca a ordenada yc-y na pilha
   873 0000064A E827FF                  		call plot_xy		;toma conta do sexto octante
   874 0000064D 89C6                    		mov		si,ax
   875 0000064F 29CE                    		sub		si,cx
   876 00000651 56                      		push    si			;coloca a abcisa xc-y na pilha
   877 00000652 89DE                    		mov		si,bx
   878 00000654 29D6                    		sub		si,dx
   879 00000656 56                      		push    si			;coloca a ordenada yc-x na pilha
   880 00000657 E81AFF                  		call plot_xy		;toma conta do quinto octante
   881 0000065A 89C6                    		mov		si,ax
   882 0000065C 29CE                    		sub		si,cx
   883 0000065E 56                      		push    si			;coloca a abcisa xc-y na pilha
   884 0000065F 89DE                    		mov		si,bx
   885 00000661 01D6                    		add		si,dx
   886 00000663 56                      		push    si			;coloca a ordenada yc-x na pilha
   887 00000664 E80DFF                  		call plot_xy		;toma conta do quarto octante
   888                                  		
   889 00000667 39D1                    		cmp		cx,dx
   890 00000669 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   891 0000066B E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   892                                  		
   893                                  fim_circle:
   894 0000066E 5F                      		pop		di
   895 0000066F 5E                      		pop		si
   896 00000670 5A                      		pop		dx
   897 00000671 59                      		pop		cx
   898 00000672 5B                      		pop		bx
   899 00000673 58                      		pop		ax
   900 00000674 9D                      		popf
   901 00000675 5D                      		pop		bp
   902 00000676 C20600                  		ret		6
   903                                  ;-----------------------------------------------------------------------------
   904                                  ;    fun��o full_circle
   905                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   906                                  ; cor definida na variavel cor					  
   907                                  full_circle:
   908 00000679 55                      		push 	bp
   909 0000067A 89E5                    		mov	 	bp,sp
   910 0000067C 9C                      		pushf                        ;coloca os flags na pilha
   911 0000067D 50                      		push 	ax
   912 0000067E 53                      		push 	bx
   913 0000067F 51                      		push	cx
   914 00000680 52                      		push	dx
   915 00000681 56                      		push	si
   916 00000682 57                      		push	di
   917                                  
   918 00000683 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   919 00000686 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   920 00000689 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   921                                  		
   922 0000068C 89DE                    		mov		si,bx
   923 0000068E 29CE                    		sub		si,cx
   924 00000690 50                      		push    ax			;coloca xc na pilha			
   925 00000691 56                      		push	si			;coloca yc-r na pilha
   926 00000692 89DE                    		mov		si,bx
   927 00000694 01CE                    		add		si,cx
   928 00000696 50                      		push	ax		;coloca xc na pilha
   929 00000697 56                      		push	si		;coloca yc+r na pilha
   930 00000698 E89B00                  		call line
   931                                  		
   932                                  			
   933 0000069B 89CF                    		mov		di,cx
   934 0000069D 81EF0100                		sub		di,1	 ;di=r-1
   935 000006A1 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   936                                  		
   937                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   938                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   939                                  ;valores positivos para d
   940                                  
   941                                  stay_full:				;loop
   942 000006A4 89FE                    		mov		si,di
   943 000006A6 81FE0000                		cmp		si,0
   944 000006AA 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   945 000006AC 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   946 000006AE D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   947 000006B0 81C60300                		add		si,3
   948 000006B4 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   949 000006B6 42                      		inc		dx		;incrementa dx
   950 000006B7 E90E00                  		jmp		plotar_full
   951                                  
   952                                  inf_full:	
   953 000006BA 89D6                    		mov		si,dx
   954 000006BC 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   955 000006BE D1E6                    		sal		si,1
   956 000006C0 81C60500                		add		si,5
   957 000006C4 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   958 000006C6 42                      		inc		dx		;incrementa x (dx)
   959 000006C7 49                      		dec		cx		;decrementa y (cx)
   960                                  	
   961                                  plotar_full:	
   962 000006C8 89C6                    		mov		si,ax
   963 000006CA 01CE                    		add		si,cx
   964 000006CC 56                      		push	si		;coloca a abcisa y+xc na pilha			
   965 000006CD 89DE                    		mov		si,bx
   966 000006CF 29D6                    		sub		si,dx
   967 000006D1 56                      		push    si		;coloca a ordenada yc-x na pilha
   968 000006D2 89C6                    		mov		si,ax
   969 000006D4 01CE                    		add		si,cx
   970 000006D6 56                      		push	si		;coloca a abcisa y+xc na pilha	
   971 000006D7 89DE                    		mov		si,bx
   972 000006D9 01D6                    		add		si,dx
   973 000006DB 56                      		push    si		;coloca a ordenada yc+x na pilha	
   974 000006DC E85700                  		call 	line
   975                                  		
   976 000006DF 89C6                    		mov		si,ax
   977 000006E1 01D6                    		add		si,dx
   978 000006E3 56                      		push	si		;coloca a abcisa xc+x na pilha			
   979 000006E4 89DE                    		mov		si,bx
   980 000006E6 29CE                    		sub		si,cx
   981 000006E8 56                      		push    si		;coloca a ordenada yc-y na pilha
   982 000006E9 89C6                    		mov		si,ax
   983 000006EB 01D6                    		add		si,dx
   984 000006ED 56                      		push	si		;coloca a abcisa xc+x na pilha	
   985 000006EE 89DE                    		mov		si,bx
   986 000006F0 01CE                    		add		si,cx
   987 000006F2 56                      		push    si		;coloca a ordenada yc+y na pilha	
   988 000006F3 E84000                  		call	line
   989                                  		
   990 000006F6 89C6                    		mov		si,ax
   991 000006F8 29D6                    		sub		si,dx
   992 000006FA 56                      		push	si		;coloca a abcisa xc-x na pilha			
   993 000006FB 89DE                    		mov		si,bx
   994 000006FD 29CE                    		sub		si,cx
   995 000006FF 56                      		push    si		;coloca a ordenada yc-y na pilha
   996 00000700 89C6                    		mov		si,ax
   997 00000702 29D6                    		sub		si,dx
   998 00000704 56                      		push	si		;coloca a abcisa xc-x na pilha	
   999 00000705 89DE                    		mov		si,bx
  1000 00000707 01CE                    		add		si,cx
  1001 00000709 56                      		push    si		;coloca a ordenada yc+y na pilha	
  1002 0000070A E82900                  		call	line
  1003                                  		
  1004 0000070D 89C6                    		mov		si,ax
  1005 0000070F 29CE                    		sub		si,cx
  1006 00000711 56                      		push	si		;coloca a abcisa xc-y na pilha			
  1007 00000712 89DE                    		mov		si,bx
  1008 00000714 29D6                    		sub		si,dx
  1009 00000716 56                      		push    si		;coloca a ordenada yc-x na pilha
  1010 00000717 89C6                    		mov		si,ax
  1011 00000719 29CE                    		sub		si,cx
  1012 0000071B 56                      		push	si		;coloca a abcisa xc-y na pilha	
  1013 0000071C 89DE                    		mov		si,bx
  1014 0000071E 01D6                    		add		si,dx
  1015 00000720 56                      		push    si		;coloca a ordenada yc+x na pilha	
  1016 00000721 E81200                  		call	line
  1017                                  		
  1018 00000724 39D1                    		cmp		cx,dx
  1019 00000726 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1020 00000728 E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1021                                  			
  1022                                  fim_full_circle:
  1023 0000072B 5F                      		pop		di
  1024 0000072C 5E                      		pop		si
  1025 0000072D 5A                      		pop		dx
  1026 0000072E 59                      		pop		cx
  1027 0000072F 5B                      		pop		bx
  1028 00000730 58                      		pop		ax
  1029 00000731 9D                      		popf
  1030 00000732 5D                      		pop		bp
  1031 00000733 C20600                  		ret		6
  1032                                  ;-----------------------------------------------------------------------------
  1033                                  ;
  1034                                  ;   fun��o line
  1035                                  ;
  1036                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1037                                  line:
  1038 00000736 55                      		push		bp
  1039 00000737 89E5                    		mov		bp,sp
  1040 00000739 9C                      		pushf                        ;coloca os flags na pilha
  1041 0000073A 50                      		push 		ax
  1042 0000073B 53                      		push 		bx
  1043 0000073C 51                      		push		cx
  1044 0000073D 52                      		push		dx
  1045 0000073E 56                      		push		si
  1046 0000073F 57                      		push		di
  1047 00000740 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  1048 00000743 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  1049 00000746 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  1050 00000749 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  1051 0000074C 39C8                    		cmp		ax,cx
  1052 0000074E 7408                    		je		line2
  1053 00000750 721C                    		jb		line1
  1054 00000752 91                      		xchg		ax,cx
  1055 00000753 87DA                    		xchg		bx,dx
  1056 00000755 E91600                  		jmp		line1
  1057                                  
  1058                                  line2:		; deltax=0
  1059 00000758 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1060 0000075A 7202                    		jb		line3
  1061 0000075C 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1062                                  
  1063                                  line3:	; dx > bx
  1064 0000075E 50                      		push		ax
  1065 0000075F 53                      		push		bx
  1066 00000760 E811FE                  		call 		plot_xy
  1067 00000763 39D3                    		cmp		bx,dx
  1068 00000765 7503                    		jne		line31
  1069 00000767 E9C600                  		jmp		fim_line
  1070                                  line31:		
  1071 0000076A 43                      		inc		bx
  1072 0000076B E9F0FF                  		jmp		line3
  1073                                  ;deltax <>0
  1074                                  line1:
  1075                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1076                                  	; cx > ax
  1077 0000076E 51                      		push		cx
  1078 0000076F 29C1                    		sub		cx,ax
  1079 00000771 890E[0100]              		mov		[deltax],cx
  1080 00000775 59                      		pop		cx
  1081 00000776 52                      		push		dx
  1082 00000777 29DA                    		sub		dx,bx
  1083 00000779 7702                    		ja		line32
  1084 0000077B F7DA                    		neg		dx
  1085                                  line32:		
  1086 0000077D 8916[0300]              		mov		[deltay],dx
  1087 00000781 5A                      		pop		dx
  1088                                  
  1089 00000782 50                      		push		ax
  1090 00000783 A1[0100]                		mov		ax,[deltax]
  1091 00000786 3B06[0300]              		cmp		ax,[deltay]
  1092 0000078A 58                      		pop		ax
  1093 0000078B 724D                    		jb		line5
  1094                                  
  1095                                  	; cx > ax e deltax>deltay
  1096 0000078D 51                      		push		cx
  1097 0000078E 29C1                    		sub		cx,ax
  1098 00000790 890E[0100]              		mov		[deltax],cx
  1099 00000794 59                      		pop		cx
  1100 00000795 52                      		push		dx
  1101 00000796 29DA                    		sub		dx,bx
  1102 00000798 8916[0300]              		mov		[deltay],dx
  1103 0000079C 5A                      		pop		dx
  1104                                  
  1105 0000079D 89C6                    		mov		si,ax
  1106                                  line4:
  1107 0000079F 50                      		push		ax
  1108 000007A0 52                      		push		dx
  1109 000007A1 56                      		push		si
  1110 000007A2 29C6                    		sub		si,ax	;(x-x1)
  1111 000007A4 A1[0300]                		mov		ax,[deltay]
  1112 000007A7 F7EE                    		imul		si
  1113 000007A9 8B36[0100]              		mov		si,[deltax]		;arredondar
  1114 000007AD D1EE                    		shr		si,1
  1115                                  ; se numerador (DX)>0 soma se <0 subtrai
  1116 000007AF 81FA0000                		cmp		dx,0
  1117 000007B3 7C09                    		jl		ar1
  1118 000007B5 01F0                    		add		ax,si
  1119 000007B7 81D20000                		adc		dx,0
  1120 000007BB E90600                  		jmp		arc1
  1121 000007BE 29F0                    ar1:		sub		ax,si
  1122 000007C0 81DA0000                		sbb		dx,0
  1123                                  arc1:
  1124 000007C4 F73E[0100]              		idiv		word [deltax]
  1125 000007C8 01D8                    		add		ax,bx
  1126 000007CA 5E                      		pop		si
  1127 000007CB 56                      		push		si
  1128 000007CC 50                      		push		ax
  1129 000007CD E8A4FD                  		call		plot_xy
  1130 000007D0 5A                      		pop		dx
  1131 000007D1 58                      		pop		ax
  1132 000007D2 39CE                    		cmp		si,cx
  1133 000007D4 745A                    		je		fim_line
  1134 000007D6 46                      		inc		si
  1135 000007D7 E9C5FF                  		jmp		line4
  1136                                  
  1137 000007DA 39D3                    line5:		cmp		bx,dx
  1138 000007DC 7203                    		jb 		line7
  1139 000007DE 91                      		xchg		ax,cx
  1140 000007DF 87DA                    		xchg		bx,dx
  1141                                  line7:
  1142 000007E1 51                      		push		cx
  1143 000007E2 29C1                    		sub		cx,ax
  1144 000007E4 890E[0100]              		mov		[deltax],cx
  1145 000007E8 59                      		pop		cx
  1146 000007E9 52                      		push		dx
  1147 000007EA 29DA                    		sub		dx,bx
  1148 000007EC 8916[0300]              		mov		[deltay],dx
  1149 000007F0 5A                      		pop		dx
  1150 000007F1 89DE                    		mov		si,bx
  1151                                  line6:
  1152 000007F3 52                      		push		dx
  1153 000007F4 56                      		push		si
  1154 000007F5 50                      		push		ax
  1155 000007F6 29DE                    		sub		si,bx	;(y-y1)
  1156 000007F8 A1[0100]                		mov		ax,[deltax]
  1157 000007FB F7EE                    		imul		si
  1158 000007FD 8B36[0300]              		mov		si,[deltay]		;arredondar
  1159 00000801 D1EE                    		shr		si,1
  1160                                  ; se numerador (DX)>0 soma se <0 subtrai
  1161 00000803 81FA0000                		cmp		dx,0
  1162 00000807 7C09                    		jl		ar2
  1163 00000809 01F0                    		add		ax,si
  1164 0000080B 81D20000                		adc		dx,0
  1165 0000080F E90600                  		jmp		arc2
  1166                                  ar2:		
  1167 00000812 29F0                    		sub		ax,si
  1168 00000814 81EA0000                		sub		dx,0
  1169                                  arc2:
  1170 00000818 F73E[0300]              		idiv		word [deltay]
  1171 0000081C 89C7                    		mov		di,ax
  1172 0000081E 58                      		pop		ax
  1173 0000081F 01C7                    		add		di,ax
  1174 00000821 5E                      		pop		si
  1175 00000822 57                      		push		di
  1176 00000823 56                      		push		si
  1177 00000824 E84DFD                  		call		plot_xy
  1178 00000827 5A                      		pop		dx
  1179 00000828 39D6                    		cmp		si,dx
  1180 0000082A 7404                    		je		fim_line
  1181 0000082C 46                      		inc		si
  1182 0000082D E9C3FF                  		jmp		line6
  1183                                  
  1184                                  fim_line:
  1185 00000830 5F                      		pop		di
  1186 00000831 5E                      		pop		si
  1187 00000832 5A                      		pop		dx
  1188 00000833 59                      		pop		cx
  1189 00000834 5B                      		pop		bx
  1190 00000835 58                      		pop		ax
  1191 00000836 9D                      		popf
  1192 00000837 5D                      		pop		bp
  1193 00000838 C20800                  		ret		8
  1194                                  ;*******************************************************************
  1195                                  segment data
  1196                                  
  1197                                  ;	I R G B COR
  1198                                  ;	0 0 0 0 preto
  1199                                  ;	0 0 0 1 azul
  1200                                  ;	0 0 1 0 verde
  1201                                  ;	0 0 1 1 cyan
  1202                                  ;	0 1 0 0 vermelho
  1203                                  ;	0 1 0 1 magenta
  1204                                  ;	0 1 1 0 marrom
  1205                                  ;	0 1 1 1 branco
  1206                                  ;	1 0 0 0 cinza
  1207                                  ;	1 0 0 1 azul claro
  1208                                  ;	1 0 1 0 verde claro
  1209                                  ;	1 0 1 1 cyan claro
  1210                                  ;	1 1 0 0 rosa
  1211                                  ;	1 1 0 1 magenta claro
  1212                                  ;	1 1 1 0 amarelo
  1213                                  ;	1 1 1 1 branco intenso
  1214                                  
  1215                                  
  1216 00000000 0F                      cor				db		branco_intenso
  1217                                  preto			equ		0
  1218                                  azul			equ		1
  1219                                  verde			equ		2
  1220                                  cyan			equ		3
  1221                                  vermelho		equ		4
  1222                                  magenta			equ		5
  1223                                  marrom			equ		6
  1224                                  branco			equ		7
  1225                                  cinza			equ		8
  1226                                  azul_claro		equ		9
  1227                                  verde_claro		equ		10
  1228                                  cyan_claro		equ		11
  1229                                  rosa			equ		12
  1230                                  magenta_claro	equ		13
  1231                                  amarelo			equ		14
  1232                                  branco_intenso	equ		15
  1233 00000001 0000                    deltax			dw		0
  1234 00000003 0000                    deltay			dw		0
  1235 00000005 00                      modo_anterior	db		0
  1236                                  
  1237 00000006 0500                    x1A				dw		5	;Usados para printar os quadrados
  1238 00000008 6900                    x2A				dw		105
  1239 0000000A 0500                    x1B 			dw		5
  1240 0000000C 6900                    x2B  			dw		105
  1241                                  
  1242 0000000E 0000                    apaga1			dw		0	;Variáveis para pegar qual quadrado apagar
  1243 00000010 0000                    apaga2			dw		0
  1244                                  
  1245 00000012 0E01                    player_x1    	dw      270	;Posição da raquete
  1246 00000014 7201                    player_x2    	dw      370
  1247                                  
  1248 00000016 4001                    px      		dw      320	;Posição da bola
  1249 00000018 1E00                    py      		dw      30
  1250                                  
  1251 0000001A 0000                    bloco_quebrado1	dw		0	;Variável para testar se a bola pode subir mais
  1252 0000001C 0000                    bloco_quebrado2	dw		0
  1253 0000001E 0000                    bloco_quebrado3	dw		0
  1254 00000020 0000                    bloco_quebrado4	dw		0
  1255 00000022 0000                    bloco_quebrado5	dw		0
  1256 00000024 0000                    bloco_quebrado6	dw		0
  1257                                  
  1258 00000026 0000                    bloco_cima_quebrado6	dw		0
  1259                                  
  1260 00000028 0000                    yToDelete1		dw		0
  1261 0000002A 0000                    yToDelete2		dw		0
  1262                                  
  1263 0000002C 0500                    vx      		dw      5	;Velocidade que a bola anda
  1264 0000002E 0500                    vy      		dw      5
  1265 00000030 47414D45204F564552-     mens_3      	db          'GAME OVER. Deseja continuar? Y ou N'
  1266 00000039 2E20446573656A6120-
  1267 00000042 636F6E74696E756172-
  1268 0000004B 3F2059206F75204E   
  1269                                  
  1270                                  ;*************************************************************************
  1271                                  segment stack stack
  1272 00000000 <res 00000200>              		resb 		512
  1273                                  stacktop:
