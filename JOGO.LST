     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0100]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  ; Desenhando o campo (bordas brancas)
    21 0000001A C606[0000]0F            		mov		byte[cor],branco_intenso
    22 0000001F B80000                  		mov		ax, 0
    23 00000022 50                      		push 	ax
    24 00000023 B80000                  		mov		ax, 0
    25 00000026 50                      		push	ax
    26 00000027 B80000                  		mov		ax, 0
    27 0000002A 50                      		push 	ax
    28 0000002B B8DF01                  		mov		ax, 479
    29 0000002E 50                      		push	ax
    30 0000002F E8CB04                  		call	line
    31                                  
    32 00000032 B80000                  		mov		ax, 0
    33 00000035 50                      		push 	ax
    34 00000036 B8DF01                  		mov		ax, 479
    35 00000039 50                      		push	ax
    36 0000003A B87F02                  		mov		ax, 639
    37 0000003D 50                      		push 	ax
    38 0000003E B8DF01                  		mov		ax, 479
    39 00000041 50                      		push	ax
    40 00000042 E8B804                  		call	line
    41                                  		
    42 00000045 B87F02                  		mov		ax, 639
    43 00000048 50                      		push 	ax
    44 00000049 B8DF01                  		mov		ax, 479
    45 0000004C 50                      		push	ax
    46 0000004D B87F02                  		mov		ax, 639
    47 00000050 50                      		push 	ax
    48 00000051 B80000                  		mov		ax, 0
    49 00000054 50                      		push	ax
    50 00000055 E8A504                  		call	line
    51                                  
    52                                  ; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    53 00000058 B90600                  		mov		cx, 6
    54 0000005B C606[0000]01            		mov		byte[cor], azul
    55                                  	
    56                                  ; Primeira linha de quadrados (linha superior)
    57                                  fazQuadrado1:
    58 00000060 FE06[0000]              		inc		byte[cor]
    59 00000064 A1[0A00]                		mov		ax, word[x1A]
    60 00000067 50                      		push 	ax
    61 00000068 B8DD01                  		mov		ax, 477
    62 0000006B 50                      		push	ax
    63 0000006C A1[0C00]                		mov		ax, word[x2A]
    64 0000006F 50                      		push 	ax
    65 00000070 B8DD01                  		mov		ax, 477
    66 00000073 50                      		push	ax
    67 00000074 E88604                  		call	line
    68                                  		
    69 00000077 A1[0C00]                		mov		ax, word[x2A]
    70 0000007A 50                      		push 	ax
    71 0000007B B8DD01                  		mov		ax, 477
    72 0000007E 50                      		push	ax
    73 0000007F A1[0C00]                		mov		ax, word[x2A]
    74 00000082 50                      		push 	ax
    75 00000083 B8B501                  		mov		ax, 437
    76 00000086 50                      		push	ax
    77 00000087 E87304                  		call	line
    78                                  		
    79 0000008A A1[0C00]                		mov		ax, word[x2A]
    80 0000008D 50                      		push 	ax
    81 0000008E B8B501                  		mov		ax, 437
    82 00000091 50                      		push	ax
    83 00000092 A1[0A00]                		mov		ax, word[x1A]
    84 00000095 50                      		push 	ax
    85 00000096 B8B501                  		mov		ax, 437
    86 00000099 50                      		push	ax
    87 0000009A E86004                  		call	line
    88                                  		
    89 0000009D A1[0A00]                		mov		ax, word[x1A]
    90 000000A0 50                      		push 	ax
    91 000000A1 B8B501                  		mov		ax, 437
    92 000000A4 50                      		push	ax
    93 000000A5 A1[0A00]                		mov		ax, word[x1A]
    94 000000A8 50                      		push 	ax
    95 000000A9 B8DD01                  		mov		ax, 477
    96 000000AC 50                      		push	ax
    97 000000AD E84D04                  		call	line
    98 000000B0 8106[0C00]6900          		add		word[x2A], 105
    99 000000B6 8106[0A00]6900          		add		word[x1A] , 105
   100 000000BC E2A2                    		loop 	fazQuadrado1
   101                                  		
   102                                  	; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   103 000000BE B90600                  		mov		cx, 6
   104 000000C1 C606[0000]08            		mov		byte[cor], cinza
   105                                  		
   106                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   107 000000C6 FE06[0000]              		inc		byte[cor]
   108 000000CA A1[0E00]                		mov		ax, word[x1B]
   109 000000CD 50                      		push 	ax
   110 000000CE B8AB01                  		mov		ax, 427
   111 000000D1 50                      		push	ax
   112 000000D2 A1[1000]                		mov		ax, word[x2B]
   113 000000D5 50                      		push 	ax
   114 000000D6 B8AB01                  		mov		ax, 427
   115 000000D9 50                      		push	ax
   116 000000DA E82004                  		call	line
   117                                  		
   118 000000DD A1[1000]                		mov		ax, word[x2B]
   119 000000E0 50                      		push 	ax
   120 000000E1 B8AB01                  		mov		ax, 427
   121 000000E4 50                      		push	ax
   122 000000E5 A1[1000]                		mov		ax, word[x2B]
   123 000000E8 50                      		push 	ax
   124 000000E9 B88301                  		mov		ax, 387
   125 000000EC 50                      		push	ax
   126 000000ED E80D04                  		call	line
   127                                  		
   128 000000F0 A1[1000]                		mov		ax, word[x2B]
   129 000000F3 50                      		push 	ax
   130 000000F4 B88301                  		mov		ax, 387
   131 000000F7 50                      		push	ax
   132 000000F8 A1[0E00]                		mov		ax, word[x1B]
   133 000000FB 50                      		push 	ax
   134 000000FC B88301                  		mov		ax, 387
   135 000000FF 50                      		push	ax
   136 00000100 E8FA03                  		call	line
   137                                  		
   138 00000103 A1[0E00]                		mov		ax, word[x1B]
   139 00000106 50                      		push 	ax
   140 00000107 B88301                  		mov		ax, 387
   141 0000010A 50                      		push	ax
   142 0000010B A1[0E00]                		mov		ax, word[x1B]
   143 0000010E 50                      		push 	ax
   144 0000010F B8AB01                  		mov		ax, 427
   145 00000112 50                      		push	ax
   146 00000113 E8E703                  		call	line
   147 00000116 8106[1000]6900          		add		word[x2B], 105
   148 0000011C 8106[0E00]6900          		add		word[x1B] , 105
   149 00000122 E2A2                    		loop 	fazQuadrado2
   150                                  
   151                                  
   152                                  
   153                                  
   154                                  
   155                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   156                                  
   157                                  
   158                                  continua:
   159 00000124 E87C00                      	call limpa_bola
   160                                  
   161 00000127 8B1E[1A00]                      mov bx, [vx]
   162 0000012B 011E[1600]                      add [px], bx
   163 0000012F 8B1E[1C00]                      mov bx, [vy]
   164 00000133 011E[1800]                      add [py], bx
   165                                  
   166 00000137 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   167 0000013C A1[1600]                		mov		ax,[px]
   168 0000013F 50                      		push		ax
   169 00000140 A1[1800]                		mov		ax,[py]
   170 00000143 50                      		push		ax
   171 00000144 B81000                  		mov		ax,16
   172 00000147 50                      		push		ax
   173 00000148 E8F502                  		call	full_circle
   174                                  
   175 0000014B A1[1200]                		mov		ax, [player_x1] ; Desenhando a raquete
   176 0000014E 50                      		push 	ax
   177 0000014F B80A00                  		mov		ax, 10
   178 00000152 50                      		push	ax
   179 00000153 A1[1400]                		mov		ax, [player_x2]
   180 00000156 50                      		push 	ax
   181 00000157 B80A00                  		mov		ax, 10
   182 0000015A 50                      		push	ax
   183 0000015B E89F03                  		call	line
   184                                         
   185 0000015E 59                              pop cx ; Recupera cx da pilha
   186 0000015F E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   187 00000161 E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   188 00000163 C3                              ret
   189                                  
   190                                  del2:
   191 00000164 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   192 00000165 B90008                          mov cx, 0800h ; Teste modificando este valor
   193                                  
   194                                  del1:
   195 00000168 BB6702                          mov bx, 615
   196 0000016B 391E[1600]                      cmp [px], bx
   197 0000016F 7D47                            jge moveesquerda
   198                                  
   199 00000171 BB1400                          mov bx, 20
   200 00000174 391E[1600]                      cmp [px], bx
   201 00000178 7E4F                            jle movedireita
   202                                  
   203 0000017A BB6801                          mov bx, 360
   204 0000017D 391E[1800]                      cmp [py], bx
   205 00000181 7D57                            jge movebaixo
   206                                  
   207 00000183 BB0A00                          mov bx, 10
   208 00000186 391E[1800]                      cmp [py], bx
   209 0000018A 7E5C                            jle movecima
   210                                  
   211 0000018C B40B                            mov ah, 0bh      
   212 0000018E CD21                            int 21h
   213 00000190 3C00                            cmp al,0
   214 00000192 756E                            jne verificar_teclas
   215 00000194 E8D700                  		call calcular_colisao_raquete
   216 00000197 E98AFF                          jmp continua
   217                                  
   218 0000019A E887FF                  		call delay
   219 0000019D E8C8FF                  		call del1
   220 000001A0 E8C1FF                  		call del2
   221                                  
   222                                  limpa_bola:
   223 000001A3 C606[0000]00                    mov     byte[cor],preto ; limpa bola
   224 000001A8 A1[1600]                        mov     ax,[px]
   225 000001AB 50                              push        ax
   226 000001AC A1[1800]                        mov     ax,[py]
   227 000001AF 50                              push        ax
   228 000001B0 B81400                          mov     ax,20
   229 000001B3 50                              push        ax
   230 000001B4 E88902                          call    full_circle
   231 000001B7 C3                              ret
   232                                  
   233                                  moveesquerda:
   234 000001B8 E8E8FF                          call limpa_bola
   235 000001BB A1[1A00]                		mov ax, [vx]
   236 000001BE F7D8                            neg ax
   237 000001C0 89C3                            mov bx, ax
   238 000001C2 891E[1A00]                      mov [vx], bx
   239 000001C6 E95BFF                          jmp continua
   240                                  
   241                                  movedireita:
   242 000001C9 E8D7FF                  		call limpa_bola
   243 000001CC A1[1A00]                        mov ax, [vx]
   244 000001CF F7D8                            neg ax
   245 000001D1 89C3                            mov bx, ax
   246 000001D3 891E[1A00]                      mov [vx], bx
   247 000001D7 E94AFF                          jmp continua
   248                                  
   249                                  movebaixo:
   250 000001DA A1[1C00]                        mov ax, [vy]
   251 000001DD F7D8                            neg ax
   252 000001DF 89C3                            mov bx, ax
   253 000001E1 891E[1C00]                      mov [vy], bx
   254 000001E5 E93CFF                          jmp continua
   255                                  
   256                                  movecima:
   257 000001E8 A1[1C00]                        mov ax, [vy]
   258 000001EB F7D8                            neg ax
   259 000001ED 89C3                            mov bx, ax
   260 000001EF 891E[1C00]                      mov [vy], bx
   261 000001F3 E92EFF                          jmp continua
   262                                  
   263                                  
   264                                  sai:
   265 000001F6 B400                            mov ah,0 ; set video mode
   266 000001F8 A0[0100]                        mov al,[modo_anterior] ; recupera o modo anterior
   267 000001FB CD10                            int 10h
   268 000001FD B8004C                          mov ax,4c00h
   269 00000200 CD21                            int 21h
   270                                  
   271                                  verificar_teclas:
   272 00000202 55                              push bp
   273 00000203 89E5                            mov bp, sp
   274                                  		
   275 00000205 B408                            mov ah, 08h
   276 00000207 CD21                            int 21h
   277 00000209 3C70                    		cmp al, 70h
   278 0000020B 742B                    		je	pausa
   279 0000020D 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   280 0000020F 74E5                            je sai
   281 00000211 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   282 00000213 752E                            jne verificar_baixo
   283                                  
   284 00000215 E8C500                          call limpa_raquete
   285 00000218 B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   286 0000021B BB7602                          mov bx, 630 ;testa se já chegou no limite
   287 0000021E 391E[1400]                      cmp [player_x2], bx
   288 00000222 7D46                            jge fim_verificar_teclas
   289 00000224 0306[1200]                      add ax, [player_x1]
   290 00000228 A3[1200]                        mov [player_x1], ax
   291 0000022B B81400                          mov ax, 20
   292 0000022E 0306[1400]                      add ax, [player_x2]
   293 00000232 A3[1400]                        mov [player_x2], ax
   294 00000235 E93200                          jmp fim_verificar_teclas
   295                                  
   296                                  
   297                                  pausa:
   298 00000238 B408                            mov ah, 08h
   299 0000023A CD21                            int 21h
   300 0000023C 3C70                    		cmp al, 70h
   301 0000023E 75F8                    		jne pausa
   302 00000240 E9E1FE                  		jmp continua
   303                                  
   304                                  verificar_baixo:
   305 00000243 3C61                            cmp al, 61h
   306 00000245 7523                            jne fim_verificar_teclas
   307 00000247 E89300                          call limpa_raquete
   308 0000024A B8ECFF                          mov ax, -20
   309 0000024D BB0A00                          mov bx, 10
   310 00000250 391E[1200]                      cmp [player_x1], bx
   311 00000254 7E14                            jle fim_verificar_teclas
   312 00000256 0306[1200]                      add ax, [player_x1]
   313 0000025A A3[1200]                        mov [player_x1], ax
   314 0000025D B8ECFF                          mov ax, -20
   315 00000260 0306[1400]                      add ax, [player_x2]
   316 00000264 A3[1400]                        mov [player_x2], ax
   317 00000267 E90000                          jmp fim_verificar_teclas
   318                                  
   319                                  fim_verificar_teclas:
   320 0000026A 5D                              pop bp
   321 0000026B E9B6FE                          jmp continua
   322                                  
   323                                  calcular_colisao_raquete:
   324 0000026E B81A00                          mov ax, 26
   325 00000271 3906[1800]                      cmp [py], ax
   326 00000275 7433                            je verifica1
   327 00000277 7C01                    		@ jl	game_over
   328 00000279 C3                              ret
   329                                  
   330                                  game_over:
   331 0000027A B92300                  		mov     	cx,35			;número de caracteres
   332 0000027D BB0000                      	mov     	bx,0
   333 00000280 B60A                        	mov     	dh,10			;linha 0-29
   334 00000282 B20A                        	mov     	dl,10			;coluna 0-79
   335 00000284 C606[0000]0F            		mov		byte[cor],branco_intenso
   336                                  
   337                                  repete_para_escrever:
   338 00000289 E87A00                  		call	cursor
   339 0000028C 8A87[2400]                  	mov     al,[bx+mens_3]
   340 00000290 E88A00                  		call	caracter
   341 00000293 43                          	inc     bx			;proximo caracter
   342 00000294 FEC2                    		inc		dl			;avanca a coluna
   343 00000296 E2F1                        	loop    repete_para_escrever
   344                                  
   345                                  verfica_continua_ou_nao:
   346 00000298 55                      		push bp
   347 00000299 89E5                            mov bp, sp
   348                                  
   349 0000029B B408                    		mov ah, 08h
   350 0000029D CD21                            int 21h
   351 0000029F 3C79                    		cmp al, 79h
   352 000002A1 7453                    		je	user_finaliza
   353 000002A3 3C6E                    		cmp al, 6eh
   354 000002A5 744F                    		je	user_finaliza
   355 000002A7 E9EEFF                  		jmp	verfica_continua_ou_nao
   356                                  
   357                                  verifica1:
   358 000002AA 8B1E[1400]                      mov bx, [player_x2]
   359 000002AE 81C31000                        add bx, 16
   360 000002B2 391E[1600]                      cmp [px], bx
   361                                  
   362                                  rebate_cima2:
   363 000002B6 A1[1C00]                        mov ax, [vy]
   364 000002B9 F7D8                            neg ax
   365 000002BB 89C3                            mov bx, ax
   366 000002BD 891E[1C00]              		mov [vy], bx
   367 000002C1 C3                              ret
   368                                  
   369                                  rebate_baixo1:
   370 000002C2 8B1E[1400]                      mov bx, [player_x2]
   371 000002C6 81C31000                        add bx, 16
   372 000002CA 391E[1600]                      cmp [px], bx
   373 000002CE 7E01                            jle rebate_baixo2
   374 000002D0 C3                              ret
   375                                  
   376                                  rebate_baixo2:
   377 000002D1 A1[1C00]                        mov ax, [vy]
   378 000002D4 F7D8                            neg ax
   379 000002D6 89C3                            mov bx, ax
   380 000002D8 891E[1C00]                      mov [vy], bx
   381 000002DC C3                              ret
   382                                  
   383                                  limpa_raquete:
   384 000002DD C606[0000]00                    mov     byte[cor], preto    ;limpa raquete
   385 000002E2 A1[1200]                        mov     ax,[player_x1]
   386 000002E5 50                              push    ax
   387 000002E6 B80A00                          mov     ax,10
   388 000002E9 50                              push    ax
   389 000002EA A1[1400]                        mov     ax,[player_x2]
   390 000002ED 50                              push    ax
   391 000002EE B80A00                          mov     ax,10
   392 000002F1 50                              push    ax
   393 000002F2 E80802                          call    line
   394 000002F5 C3                              ret
   395                                  
   396                                  user_finaliza:
   397                                  ; Finalizando o programa
   398 000002F6 B408                    		mov    	ah,08h
   399 000002F8 CD21                    		int     21h
   400 000002FA B400                    	    mov  	ah,0   					; set video mode
   401 000002FC A0[0100]                	    mov  	al,[modo_anterior]   	; modo anterior
   402 000002FF CD10                    	    int  	10h
   403 00000301 B8004C                  		mov     ax,4c00h
   404 00000304 CD21                    		int     21h
   405                                  
   406                                  
   407                                  ;***************************************************************************
   408                                  ;
   409                                  ;   função cursor
   410                                  ;
   411                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   412                                  cursor:
   413 00000306 9C                      		pushf
   414 00000307 50                      		push 		ax
   415 00000308 53                      		push 		bx
   416 00000309 51                      		push		cx
   417 0000030A 52                      		push		dx
   418 0000030B 56                      		push		si
   419 0000030C 57                      		push		di
   420 0000030D 55                      		push		bp
   421 0000030E B402                    		mov     	ah,2
   422 00000310 B700                    		mov     	bh,0
   423 00000312 CD10                    		int     	10h
   424 00000314 5D                      		pop		bp
   425 00000315 5F                      		pop		di
   426 00000316 5E                      		pop		si
   427 00000317 5A                      		pop		dx
   428 00000318 59                      		pop		cx
   429 00000319 5B                      		pop		bx
   430 0000031A 58                      		pop		ax
   431 0000031B 9D                      		popf
   432 0000031C C3                      		ret
   433                                  ;_____________________________________________________________________________
   434                                  ;
   435                                  ;   fun��o caracter escrito na posi��o do cursor
   436                                  ;
   437                                  ; al= caracter a ser escrito
   438                                  ; cor definida na variavel cor
   439                                  caracter:
   440 0000031D 9C                      		pushf
   441 0000031E 50                      		push 		ax
   442 0000031F 53                      		push 		bx
   443 00000320 51                      		push		cx
   444 00000321 52                      		push		dx
   445 00000322 56                      		push		si
   446 00000323 57                      		push		di
   447 00000324 55                      		push		bp
   448 00000325 B409                        	mov     	ah,9
   449 00000327 B700                        	mov     	bh,0
   450 00000329 B90100                      	mov     	cx,1
   451 0000032C 8A1E[0000]                 		mov     	bl,[cor]
   452 00000330 CD10                        	int     	10h
   453 00000332 5D                      		pop			bp
   454 00000333 5F                      		pop			di
   455 00000334 5E                      		pop			si
   456 00000335 5A                      		pop			dx
   457 00000336 59                      		pop			cx
   458 00000337 5B                      		pop			bx
   459 00000338 58                      		pop			ax
   460 00000339 9D                      		popf
   461 0000033A C3                      		ret
   462                                  ;_____________________________________________________________________________
   463                                  ;
   464                                  ;   fun��o plot_xy
   465                                  ;
   466                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   467                                  ; cor definida na variavel cor
   468                                  plot_xy:
   469 0000033B 55                      		push		bp
   470 0000033C 89E5                    		mov			bp,sp
   471 0000033E 9C                      		pushf
   472 0000033F 50                      		push 		ax
   473 00000340 53                      		push 		bx
   474 00000341 51                      		push		cx
   475 00000342 52                      		push		dx
   476 00000343 56                      		push		si
   477 00000344 57                      		push		di
   478 00000345 B40C                    	    mov     	ah,0ch
   479 00000347 A0[0000]                	    mov     	al,[cor]
   480 0000034A B700                    	    mov     	bh,0
   481 0000034C BADF01                  	    mov     	dx,479
   482 0000034F 2B5604                  		sub			dx,[bp+4]
   483 00000352 8B4E06                  	    mov     	cx,[bp+6]
   484 00000355 CD10                    	    int     	10h
   485 00000357 5F                      		pop			di
   486 00000358 5E                      		pop			si
   487 00000359 5A                      		pop			dx
   488 0000035A 59                      		pop			cx
   489 0000035B 5B                      		pop			bx
   490 0000035C 58                      		pop			ax
   491 0000035D 9D                      		popf	
   492 0000035E 5D                      		pop			bp
   493 0000035F C20400                  		ret			4
   494                                  ;_____________________________________________________________________________
   495                                  ;    fun��o circle
   496                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   497                                  ; cor definida na variavel cor
   498                                  circle:
   499 00000362 55                      		push 	bp
   500 00000363 89E5                    		mov	 	bp,sp
   501 00000365 9C                      		pushf                        ;coloca os flags na pilha
   502 00000366 50                      		push 	ax
   503 00000367 53                      		push 	bx
   504 00000368 51                      		push	cx
   505 00000369 52                      		push	dx
   506 0000036A 56                      		push	si
   507 0000036B 57                      		push	di
   508                                  		
   509 0000036C 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   510 0000036F 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   511 00000372 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   512                                  		
   513 00000375 89DA                    		mov 	dx,bx	
   514 00000377 01CA                    		add		dx,cx       ;ponto extremo superior
   515 00000379 50                      		push    ax			
   516 0000037A 52                      		push	dx
   517 0000037B E8BDFF                  		call plot_xy
   518                                  		
   519 0000037E 89DA                    		mov		dx,bx
   520 00000380 29CA                    		sub		dx,cx       ;ponto extremo inferior
   521 00000382 50                      		push    ax			
   522 00000383 52                      		push	dx
   523 00000384 E8B4FF                  		call plot_xy
   524                                  		
   525 00000387 89C2                    		mov 	dx,ax	
   526 00000389 01CA                    		add		dx,cx       ;ponto extremo direita
   527 0000038B 52                      		push    dx			
   528 0000038C 53                      		push	bx
   529 0000038D E8ABFF                  		call plot_xy
   530                                  		
   531 00000390 89C2                    		mov		dx,ax
   532 00000392 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   533 00000394 52                      		push    dx			
   534 00000395 53                      		push	bx
   535 00000396 E8A2FF                  		call plot_xy
   536                                  			
   537 00000399 89CF                    		mov		di,cx
   538 0000039B 81EF0100                		sub		di,1	 ;di=r-1
   539 0000039F BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   540                                  		
   541                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   542                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   543                                  ;valores positivos para d
   544                                  
   545                                  stay:				;loop
   546 000003A2 89FE                    		mov		si,di
   547 000003A4 81FE0000                		cmp		si,0
   548 000003A8 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   549 000003AA 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   550 000003AC D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   551 000003AE 81C60300                		add		si,3
   552 000003B2 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   553 000003B4 42                      		inc		dx		;incrementa dx
   554 000003B5 E90E00                  		jmp		plotar
   555                                  inf:	
   556 000003B8 89D6                    		mov		si,dx
   557 000003BA 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   558 000003BC D1E6                    		sal		si,1
   559 000003BE 81C60500                		add		si,5
   560 000003C2 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   561 000003C4 42                      		inc		dx		;incrementa x (dx)
   562 000003C5 49                      		dec		cx		;decrementa y (cx)
   563                                  	
   564                                  plotar:	
   565 000003C6 89D6                    		mov		si,dx
   566 000003C8 01C6                    		add		si,ax
   567 000003CA 56                      		push    si			;coloca a abcisa x+xc na pilha
   568 000003CB 89CE                    		mov		si,cx
   569 000003CD 01DE                    		add		si,bx
   570 000003CF 56                      		push    si			;coloca a ordenada y+yc na pilha
   571 000003D0 E868FF                  		call plot_xy		;toma conta do segundo octante
   572 000003D3 89C6                    		mov		si,ax
   573 000003D5 01D6                    		add		si,dx
   574 000003D7 56                      		push    si			;coloca a abcisa xc+x na pilha
   575 000003D8 89DE                    		mov		si,bx
   576 000003DA 29CE                    		sub		si,cx
   577 000003DC 56                      		push    si			;coloca a ordenada yc-y na pilha
   578 000003DD E85BFF                  		call plot_xy		;toma conta do s�timo octante
   579 000003E0 89C6                    		mov		si,ax
   580 000003E2 01CE                    		add		si,cx
   581 000003E4 56                      		push    si			;coloca a abcisa xc+y na pilha
   582 000003E5 89DE                    		mov		si,bx
   583 000003E7 01D6                    		add		si,dx
   584 000003E9 56                      		push    si			;coloca a ordenada yc+x na pilha
   585 000003EA E84EFF                  		call plot_xy		;toma conta do segundo octante
   586 000003ED 89C6                    		mov		si,ax
   587 000003EF 01CE                    		add		si,cx
   588 000003F1 56                      		push    si			;coloca a abcisa xc+y na pilha
   589 000003F2 89DE                    		mov		si,bx
   590 000003F4 29D6                    		sub		si,dx
   591 000003F6 56                      		push    si			;coloca a ordenada yc-x na pilha
   592 000003F7 E841FF                  		call plot_xy		;toma conta do oitavo octante
   593 000003FA 89C6                    		mov		si,ax
   594 000003FC 29D6                    		sub		si,dx
   595 000003FE 56                      		push    si			;coloca a abcisa xc-x na pilha
   596 000003FF 89DE                    		mov		si,bx
   597 00000401 01CE                    		add		si,cx
   598 00000403 56                      		push    si			;coloca a ordenada yc+y na pilha
   599 00000404 E834FF                  		call plot_xy		;toma conta do terceiro octante
   600 00000407 89C6                    		mov		si,ax
   601 00000409 29D6                    		sub		si,dx
   602 0000040B 56                      		push    si			;coloca a abcisa xc-x na pilha
   603 0000040C 89DE                    		mov		si,bx
   604 0000040E 29CE                    		sub		si,cx
   605 00000410 56                      		push    si			;coloca a ordenada yc-y na pilha
   606 00000411 E827FF                  		call plot_xy		;toma conta do sexto octante
   607 00000414 89C6                    		mov		si,ax
   608 00000416 29CE                    		sub		si,cx
   609 00000418 56                      		push    si			;coloca a abcisa xc-y na pilha
   610 00000419 89DE                    		mov		si,bx
   611 0000041B 29D6                    		sub		si,dx
   612 0000041D 56                      		push    si			;coloca a ordenada yc-x na pilha
   613 0000041E E81AFF                  		call plot_xy		;toma conta do quinto octante
   614 00000421 89C6                    		mov		si,ax
   615 00000423 29CE                    		sub		si,cx
   616 00000425 56                      		push    si			;coloca a abcisa xc-y na pilha
   617 00000426 89DE                    		mov		si,bx
   618 00000428 01D6                    		add		si,dx
   619 0000042A 56                      		push    si			;coloca a ordenada yc-x na pilha
   620 0000042B E80DFF                  		call plot_xy		;toma conta do quarto octante
   621                                  		
   622 0000042E 39D1                    		cmp		cx,dx
   623 00000430 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   624 00000432 E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   625                                  		
   626                                  fim_circle:
   627 00000435 5F                      		pop		di
   628 00000436 5E                      		pop		si
   629 00000437 5A                      		pop		dx
   630 00000438 59                      		pop		cx
   631 00000439 5B                      		pop		bx
   632 0000043A 58                      		pop		ax
   633 0000043B 9D                      		popf
   634 0000043C 5D                      		pop		bp
   635 0000043D C20600                  		ret		6
   636                                  ;-----------------------------------------------------------------------------
   637                                  ;    fun��o full_circle
   638                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   639                                  ; cor definida na variavel cor					  
   640                                  full_circle:
   641 00000440 55                      		push 	bp
   642 00000441 89E5                    		mov	 	bp,sp
   643 00000443 9C                      		pushf                        ;coloca os flags na pilha
   644 00000444 50                      		push 	ax
   645 00000445 53                      		push 	bx
   646 00000446 51                      		push	cx
   647 00000447 52                      		push	dx
   648 00000448 56                      		push	si
   649 00000449 57                      		push	di
   650                                  
   651 0000044A 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   652 0000044D 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   653 00000450 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   654                                  		
   655 00000453 89DE                    		mov		si,bx
   656 00000455 29CE                    		sub		si,cx
   657 00000457 50                      		push    ax			;coloca xc na pilha			
   658 00000458 56                      		push	si			;coloca yc-r na pilha
   659 00000459 89DE                    		mov		si,bx
   660 0000045B 01CE                    		add		si,cx
   661 0000045D 50                      		push	ax		;coloca xc na pilha
   662 0000045E 56                      		push	si		;coloca yc+r na pilha
   663 0000045F E89B00                  		call line
   664                                  		
   665                                  			
   666 00000462 89CF                    		mov		di,cx
   667 00000464 81EF0100                		sub		di,1	 ;di=r-1
   668 00000468 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   669                                  		
   670                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   671                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   672                                  ;valores positivos para d
   673                                  
   674                                  stay_full:				;loop
   675 0000046B 89FE                    		mov		si,di
   676 0000046D 81FE0000                		cmp		si,0
   677 00000471 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   678 00000473 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   679 00000475 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   680 00000477 81C60300                		add		si,3
   681 0000047B 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   682 0000047D 42                      		inc		dx		;incrementa dx
   683 0000047E E90E00                  		jmp		plotar_full
   684                                  
   685                                  inf_full:	
   686 00000481 89D6                    		mov		si,dx
   687 00000483 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   688 00000485 D1E6                    		sal		si,1
   689 00000487 81C60500                		add		si,5
   690 0000048B 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   691 0000048D 42                      		inc		dx		;incrementa x (dx)
   692 0000048E 49                      		dec		cx		;decrementa y (cx)
   693                                  	
   694                                  plotar_full:	
   695 0000048F 89C6                    		mov		si,ax
   696 00000491 01CE                    		add		si,cx
   697 00000493 56                      		push	si		;coloca a abcisa y+xc na pilha			
   698 00000494 89DE                    		mov		si,bx
   699 00000496 29D6                    		sub		si,dx
   700 00000498 56                      		push    si		;coloca a ordenada yc-x na pilha
   701 00000499 89C6                    		mov		si,ax
   702 0000049B 01CE                    		add		si,cx
   703 0000049D 56                      		push	si		;coloca a abcisa y+xc na pilha	
   704 0000049E 89DE                    		mov		si,bx
   705 000004A0 01D6                    		add		si,dx
   706 000004A2 56                      		push    si		;coloca a ordenada yc+x na pilha	
   707 000004A3 E85700                  		call 	line
   708                                  		
   709 000004A6 89C6                    		mov		si,ax
   710 000004A8 01D6                    		add		si,dx
   711 000004AA 56                      		push	si		;coloca a abcisa xc+x na pilha			
   712 000004AB 89DE                    		mov		si,bx
   713 000004AD 29CE                    		sub		si,cx
   714 000004AF 56                      		push    si		;coloca a ordenada yc-y na pilha
   715 000004B0 89C6                    		mov		si,ax
   716 000004B2 01D6                    		add		si,dx
   717 000004B4 56                      		push	si		;coloca a abcisa xc+x na pilha	
   718 000004B5 89DE                    		mov		si,bx
   719 000004B7 01CE                    		add		si,cx
   720 000004B9 56                      		push    si		;coloca a ordenada yc+y na pilha	
   721 000004BA E84000                  		call	line
   722                                  		
   723 000004BD 89C6                    		mov		si,ax
   724 000004BF 29D6                    		sub		si,dx
   725 000004C1 56                      		push	si		;coloca a abcisa xc-x na pilha			
   726 000004C2 89DE                    		mov		si,bx
   727 000004C4 29CE                    		sub		si,cx
   728 000004C6 56                      		push    si		;coloca a ordenada yc-y na pilha
   729 000004C7 89C6                    		mov		si,ax
   730 000004C9 29D6                    		sub		si,dx
   731 000004CB 56                      		push	si		;coloca a abcisa xc-x na pilha	
   732 000004CC 89DE                    		mov		si,bx
   733 000004CE 01CE                    		add		si,cx
   734 000004D0 56                      		push    si		;coloca a ordenada yc+y na pilha	
   735 000004D1 E82900                  		call	line
   736                                  		
   737 000004D4 89C6                    		mov		si,ax
   738 000004D6 29CE                    		sub		si,cx
   739 000004D8 56                      		push	si		;coloca a abcisa xc-y na pilha			
   740 000004D9 89DE                    		mov		si,bx
   741 000004DB 29D6                    		sub		si,dx
   742 000004DD 56                      		push    si		;coloca a ordenada yc-x na pilha
   743 000004DE 89C6                    		mov		si,ax
   744 000004E0 29CE                    		sub		si,cx
   745 000004E2 56                      		push	si		;coloca a abcisa xc-y na pilha	
   746 000004E3 89DE                    		mov		si,bx
   747 000004E5 01D6                    		add		si,dx
   748 000004E7 56                      		push    si		;coloca a ordenada yc+x na pilha	
   749 000004E8 E81200                  		call	line
   750                                  		
   751 000004EB 39D1                    		cmp		cx,dx
   752 000004ED 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   753 000004EF E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   754                                  			
   755                                  fim_full_circle:
   756 000004F2 5F                      		pop		di
   757 000004F3 5E                      		pop		si
   758 000004F4 5A                      		pop		dx
   759 000004F5 59                      		pop		cx
   760 000004F6 5B                      		pop		bx
   761 000004F7 58                      		pop		ax
   762 000004F8 9D                      		popf
   763 000004F9 5D                      		pop		bp
   764 000004FA C20600                  		ret		6
   765                                  ;-----------------------------------------------------------------------------
   766                                  ;
   767                                  ;   fun��o line
   768                                  ;
   769                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   770                                  line:
   771 000004FD 55                      		push		bp
   772 000004FE 89E5                    		mov		bp,sp
   773 00000500 9C                      		pushf                        ;coloca os flags na pilha
   774 00000501 50                      		push 		ax
   775 00000502 53                      		push 		bx
   776 00000503 51                      		push		cx
   777 00000504 52                      		push		dx
   778 00000505 56                      		push		si
   779 00000506 57                      		push		di
   780 00000507 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   781 0000050A 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   782 0000050D 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   783 00000510 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   784 00000513 39C8                    		cmp		ax,cx
   785 00000515 7408                    		je		line2
   786 00000517 721C                    		jb		line1
   787 00000519 91                      		xchg		ax,cx
   788 0000051A 87DA                    		xchg		bx,dx
   789 0000051C E91600                  		jmp		line1
   790                                  
   791                                  line2:		; deltax=0
   792 0000051F 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   793 00000521 7202                    		jb		line3
   794 00000523 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   795                                  
   796                                  line3:	; dx > bx
   797 00000525 50                      		push		ax
   798 00000526 53                      		push		bx
   799 00000527 E811FE                  		call 		plot_xy
   800 0000052A 39D3                    		cmp		bx,dx
   801 0000052C 7503                    		jne		line31
   802 0000052E E9C600                  		jmp		fim_line
   803                                  line31:		
   804 00000531 43                      		inc		bx
   805 00000532 E9F0FF                  		jmp		line3
   806                                  ;deltax <>0
   807                                  line1:
   808                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   809                                  	; cx > ax
   810 00000535 51                      		push		cx
   811 00000536 29C1                    		sub		cx,ax
   812 00000538 890E[0600]              		mov		[deltax],cx
   813 0000053C 59                      		pop		cx
   814 0000053D 52                      		push		dx
   815 0000053E 29DA                    		sub		dx,bx
   816 00000540 7702                    		ja		line32
   817 00000542 F7DA                    		neg		dx
   818                                  line32:		
   819 00000544 8916[0800]              		mov		[deltay],dx
   820 00000548 5A                      		pop		dx
   821                                  
   822 00000549 50                      		push		ax
   823 0000054A A1[0600]                		mov		ax,[deltax]
   824 0000054D 3B06[0800]              		cmp		ax,[deltay]
   825 00000551 58                      		pop		ax
   826 00000552 724D                    		jb		line5
   827                                  
   828                                  	; cx > ax e deltax>deltay
   829 00000554 51                      		push		cx
   830 00000555 29C1                    		sub		cx,ax
   831 00000557 890E[0600]              		mov		[deltax],cx
   832 0000055B 59                      		pop		cx
   833 0000055C 52                      		push		dx
   834 0000055D 29DA                    		sub		dx,bx
   835 0000055F 8916[0800]              		mov		[deltay],dx
   836 00000563 5A                      		pop		dx
   837                                  
   838 00000564 89C6                    		mov		si,ax
   839                                  line4:
   840 00000566 50                      		push		ax
   841 00000567 52                      		push		dx
   842 00000568 56                      		push		si
   843 00000569 29C6                    		sub		si,ax	;(x-x1)
   844 0000056B A1[0800]                		mov		ax,[deltay]
   845 0000056E F7EE                    		imul		si
   846 00000570 8B36[0600]              		mov		si,[deltax]		;arredondar
   847 00000574 D1EE                    		shr		si,1
   848                                  ; se numerador (DX)>0 soma se <0 subtrai
   849 00000576 81FA0000                		cmp		dx,0
   850 0000057A 7C09                    		jl		ar1
   851 0000057C 01F0                    		add		ax,si
   852 0000057E 81D20000                		adc		dx,0
   853 00000582 E90600                  		jmp		arc1
   854 00000585 29F0                    ar1:		sub		ax,si
   855 00000587 81DA0000                		sbb		dx,0
   856                                  arc1:
   857 0000058B F73E[0600]              		idiv		word [deltax]
   858 0000058F 01D8                    		add		ax,bx
   859 00000591 5E                      		pop		si
   860 00000592 56                      		push		si
   861 00000593 50                      		push		ax
   862 00000594 E8A4FD                  		call		plot_xy
   863 00000597 5A                      		pop		dx
   864 00000598 58                      		pop		ax
   865 00000599 39CE                    		cmp		si,cx
   866 0000059B 745A                    		je		fim_line
   867 0000059D 46                      		inc		si
   868 0000059E E9C5FF                  		jmp		line4
   869                                  
   870 000005A1 39D3                    line5:		cmp		bx,dx
   871 000005A3 7203                    		jb 		line7
   872 000005A5 91                      		xchg		ax,cx
   873 000005A6 87DA                    		xchg		bx,dx
   874                                  line7:
   875 000005A8 51                      		push		cx
   876 000005A9 29C1                    		sub		cx,ax
   877 000005AB 890E[0600]              		mov		[deltax],cx
   878 000005AF 59                      		pop		cx
   879 000005B0 52                      		push		dx
   880 000005B1 29DA                    		sub		dx,bx
   881 000005B3 8916[0800]              		mov		[deltay],dx
   882 000005B7 5A                      		pop		dx
   883 000005B8 89DE                    		mov		si,bx
   884                                  line6:
   885 000005BA 52                      		push		dx
   886 000005BB 56                      		push		si
   887 000005BC 50                      		push		ax
   888 000005BD 29DE                    		sub		si,bx	;(y-y1)
   889 000005BF A1[0600]                		mov		ax,[deltax]
   890 000005C2 F7EE                    		imul		si
   891 000005C4 8B36[0800]              		mov		si,[deltay]		;arredondar
   892 000005C8 D1EE                    		shr		si,1
   893                                  ; se numerador (DX)>0 soma se <0 subtrai
   894 000005CA 81FA0000                		cmp		dx,0
   895 000005CE 7C09                    		jl		ar2
   896 000005D0 01F0                    		add		ax,si
   897 000005D2 81D20000                		adc		dx,0
   898 000005D6 E90600                  		jmp		arc2
   899                                  ar2:		
   900 000005D9 29F0                    		sub		ax,si
   901 000005DB 81EA0000                		sub		dx,0
   902                                  arc2:
   903 000005DF F73E[0800]              		idiv		word [deltay]
   904 000005E3 89C7                    		mov		di,ax
   905 000005E5 58                      		pop		ax
   906 000005E6 01C7                    		add		di,ax
   907 000005E8 5E                      		pop		si
   908 000005E9 57                      		push		di
   909 000005EA 56                      		push		si
   910 000005EB E84DFD                  		call		plot_xy
   911 000005EE 5A                      		pop		dx
   912 000005EF 39D6                    		cmp		si,dx
   913 000005F1 7404                    		je		fim_line
   914 000005F3 46                      		inc		si
   915 000005F4 E9C3FF                  		jmp		line6
   916                                  
   917                                  fim_line:
   918 000005F7 5F                      		pop		di
   919 000005F8 5E                      		pop		si
   920 000005F9 5A                      		pop		dx
   921 000005FA 59                      		pop		cx
   922 000005FB 5B                      		pop		bx
   923 000005FC 58                      		pop		ax
   924 000005FD 9D                      		popf
   925 000005FE 5D                      		pop		bp
   926 000005FF C20800                  		ret		8
   927                                  ;*******************************************************************
   928                                  segment data
   929                                  
   930 00000000 0F                      cor		db		branco_intenso
   931                                  
   932                                  ;	I R G B COR
   933                                  ;	0 0 0 0 preto
   934                                  ;	0 0 0 1 azul
   935                                  ;	0 0 1 0 verde
   936                                  ;	0 0 1 1 cyan
   937                                  ;	0 1 0 0 vermelho
   938                                  ;	0 1 0 1 magenta
   939                                  ;	0 1 1 0 marrom
   940                                  ;	0 1 1 1 branco
   941                                  ;	1 0 0 0 cinza
   942                                  ;	1 0 0 1 azul claro
   943                                  ;	1 0 1 0 verde claro
   944                                  ;	1 0 1 1 cyan claro
   945                                  ;	1 1 0 0 rosa
   946                                  ;	1 1 0 1 magenta claro
   947                                  ;	1 1 1 0 amarelo
   948                                  ;	1 1 1 1 branco intenso
   949                                  
   950                                  preto			equ		0
   951                                  azul			equ		1
   952                                  verde			equ		2
   953                                  cyan			equ		3
   954                                  vermelho		equ		4
   955                                  magenta			equ		5
   956                                  marrom			equ		6
   957                                  branco			equ		7
   958                                  cinza			equ		8
   959                                  azul_claro		equ		9
   960                                  verde_claro		equ		10
   961                                  cyan_claro		equ		11
   962                                  rosa			equ		12
   963                                  magenta_claro	equ		13
   964                                  amarelo			equ		14
   965                                  branco_intenso	equ		15
   966                                  
   967 00000001 00                      modo_anterior	db		0
   968 00000002 0000                    linha   		dw  		0
   969 00000004 0000                    coluna  		dw  		0
   970 00000006 0000                    deltax			dw		0
   971 00000008 0000                    deltay			dw		0
   972 0000000A 0500                    x1A				dw		5
   973 0000000C 6900                    x2A				dw		105
   974 0000000E 0500                    x1B 			dw		5
   975 00000010 6900                    x2B  			dw		105
   976                                  
   977 00000012 0E01                    player_x1    	dw      270
   978 00000014 7201                    player_x2    	dw      370
   979 00000016 4001                    px      		dw      320
   980 00000018 1E00                    py      		dw      30
   981 0000001A 0500                    vx      		dw      5
   982 0000001C 0500                    vy      		dw      5
   983 0000001E 506175736520            mens_2      	db          'Pause '
   984 00000024 47414D45204F564552-     mens_3      	db          'GAME OVER. Deseja continuar? Y ou N'
   985 0000002D 2E20446573656A6120-
   986 00000036 636F6E74696E756172-
   987 0000003F 3F2059206F75204E   
   988                                  
   989                                  ;*************************************************************************
   990                                  segment stack stack
   991 00000000 <res 00000200>              		resb 		512
   992                                  stacktop:
