     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0500]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  reset_game:
    21                                  
    22                                  	; Apagar a mensagem de game over
    23 0000001A B92300                  	mov     	cx,35			;número de caracteres
    24 0000001D BB0000                  	mov     	bx,0
    25 00000020 B60A                    	mov     	dh,10			
    26 00000022 B20A                    	mov     	dl,10
    27 00000024 C606[0000]00            	mov		byte[cor],preto
    28                                  
    29                                  repete_para_apagar:
    30 00000029 E8BA06                  	call	cursor
    31 0000002C 8A87[3C00]              	mov     al,[bx+mens_3]
    32 00000030 E8CA06                  	call	caracter
    33 00000033 43                      	inc     bx			;proximo caracter
    34 00000034 FEC2                    	inc		dl			;avanca a coluna
    35 00000036 E2F1                    	loop    repete_para_apagar
    36                                  
    37                                  ; Desenhando o campo (bordas brancas)
    38 00000038 C606[0000]0F            		mov		byte[cor],branco_intenso
    39 0000003D B80000                  		mov		ax, 0
    40 00000040 50                      		push 	ax
    41 00000041 B80000                  		mov		ax, 0
    42 00000044 50                      		push	ax
    43 00000045 B80000                  		mov		ax, 0
    44 00000048 50                      		push 	ax
    45 00000049 B8DF01                  		mov		ax, 479
    46 0000004C 50                      		push	ax
    47 0000004D E88D08                  		call	line
    48                                  
    49 00000050 B80000                  		mov		ax, 0
    50 00000053 50                      		push 	ax
    51 00000054 B8DF01                  		mov		ax, 479
    52 00000057 50                      		push	ax
    53 00000058 B87F02                  		mov		ax, 639
    54 0000005B 50                      		push 	ax
    55 0000005C B8DF01                  		mov		ax, 479
    56 0000005F 50                      		push	ax
    57 00000060 E87A08                  		call	line
    58                                  		
    59 00000063 B87F02                  		mov		ax, 639
    60 00000066 50                      		push 	ax
    61 00000067 B8DF01                  		mov		ax, 479
    62 0000006A 50                      		push	ax
    63 0000006B B87F02                  		mov		ax, 639
    64 0000006E 50                      		push 	ax
    65 0000006F B80000                  		mov		ax, 0
    66 00000072 50                      		push	ax
    67 00000073 E86708                  		call	line
    68                                  
    69                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    70 00000076 B90600                  		mov		cx, 6
    71 00000079 C606[0000]01            		mov		byte[cor], azul
    72                                  	
    73                                  ; Primeira linha de quadrados (linha superior)
    74                                  fazQuadrado1:
    75 0000007E FE06[0000]              		inc		byte[cor]
    76 00000082 A1[0600]                		mov		ax, word[x1A]
    77 00000085 50                      		push 	ax
    78 00000086 B8DD01                  		mov		ax, 477
    79 00000089 50                      		push	ax
    80 0000008A A1[0800]                		mov		ax, word[x2A]
    81 0000008D 50                      		push 	ax
    82 0000008E B8DD01                  		mov		ax, 477
    83 00000091 50                      		push	ax
    84 00000092 E84808                  		call	line
    85                                  		
    86 00000095 A1[0800]                		mov		ax, word[x2A]
    87 00000098 50                      		push 	ax
    88 00000099 B8DD01                  		mov		ax, 477
    89 0000009C 50                      		push	ax
    90 0000009D A1[0800]                		mov		ax, word[x2A]
    91 000000A0 50                      		push 	ax
    92 000000A1 B8B501                  		mov		ax, 437
    93 000000A4 50                      		push	ax
    94 000000A5 E83508                  		call	line
    95                                  		
    96 000000A8 A1[0800]                		mov		ax, word[x2A]
    97 000000AB 50                      		push 	ax
    98 000000AC B8B501                  		mov		ax, 437
    99 000000AF 50                      		push	ax
   100 000000B0 A1[0600]                		mov		ax, word[x1A]
   101 000000B3 50                      		push 	ax
   102 000000B4 B8B501                  		mov		ax, 437
   103 000000B7 50                      		push	ax
   104 000000B8 E82208                  		call	line
   105                                  		
   106 000000BB A1[0600]                		mov		ax, word[x1A]
   107 000000BE 50                      		push 	ax
   108 000000BF B8B501                  		mov		ax, 437
   109 000000C2 50                      		push	ax
   110 000000C3 A1[0600]                		mov		ax, word[x1A]
   111 000000C6 50                      		push 	ax
   112 000000C7 B8DD01                  		mov		ax, 477
   113 000000CA 50                      		push	ax
   114 000000CB E80F08                  		call	line
   115 000000CE 8106[0800]6900          		add		word[x2A], 105
   116 000000D4 8106[0600]6900          		add		word[x1A] , 105
   117 000000DA E2A2                    		loop 	fazQuadrado1
   118                                  		
   119                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   120 000000DC B90600                  		mov		cx, 6
   121 000000DF C606[0000]08            		mov		byte[cor], cinza
   122                                  		
   123                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   124 000000E4 FE06[0000]              		inc		byte[cor]
   125 000000E8 A1[0A00]                		mov		ax, word[x1B]
   126 000000EB 50                      		push 	ax
   127 000000EC B8AB01                  		mov		ax, 427
   128 000000EF 50                      		push	ax
   129 000000F0 A1[0C00]                		mov		ax, word[x2B]
   130 000000F3 50                      		push 	ax
   131 000000F4 B8AB01                  		mov		ax, 427
   132 000000F7 50                      		push	ax
   133 000000F8 E8E207                  		call	line
   134                                  		
   135 000000FB A1[0C00]                		mov		ax, word[x2B]
   136 000000FE 50                      		push 	ax
   137 000000FF B8AB01                  		mov		ax, 427
   138 00000102 50                      		push	ax
   139 00000103 A1[0C00]                		mov		ax, word[x2B]
   140 00000106 50                      		push 	ax
   141 00000107 B88301                  		mov		ax, 387
   142 0000010A 50                      		push	ax
   143 0000010B E8CF07                  		call	line
   144                                  		
   145 0000010E A1[0C00]                		mov		ax, word[x2B]
   146 00000111 50                      		push 	ax
   147 00000112 B88301                  		mov		ax, 387
   148 00000115 50                      		push	ax
   149 00000116 A1[0A00]                		mov		ax, word[x1B]
   150 00000119 50                      		push 	ax
   151 0000011A B88301                  		mov		ax, 387
   152 0000011D 50                      		push	ax
   153 0000011E E8BC07                  		call	line
   154                                  		
   155 00000121 A1[0A00]                		mov		ax, word[x1B]
   156 00000124 50                      		push 	ax
   157 00000125 B88301                  		mov		ax, 387
   158 00000128 50                      		push	ax
   159 00000129 A1[0A00]                		mov		ax, word[x1B]
   160 0000012C 50                      		push 	ax
   161 0000012D B8AB01                  		mov		ax, 427
   162 00000130 50                      		push	ax
   163 00000131 E8A907                  		call	line
   164 00000134 8106[0C00]6900          		add		word[x2B], 105
   165 0000013A 8106[0A00]6900          		add		word[x1B] , 105
   166 00000140 E2A2                    		loop 	fazQuadrado2
   167                                  
   168                                  
   169                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   170                                  
   171                                  continua: ;	Função central do jogo, é nela que a bola se movimenta e são feitas as verificações
   172 00000142 E8AF00                      	call limpa_bola
   173                                  
   174 00000145 8B1E[3800]                      mov bx, [vx]
   175 00000149 011E[1600]                      add [px], bx
   176 0000014D 8B1E[3A00]                      mov bx, [vy]
   177 00000151 011E[1800]                      add [py], bx
   178                                  
   179 00000155 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   180 0000015A A1[1600]                		mov		ax,[px]
   181 0000015D 50                      		push		ax
   182 0000015E A1[1800]                		mov		ax,[py]
   183 00000161 50                      		push		ax
   184 00000162 B81000                  		mov		ax,16
   185 00000165 50                      		push		ax
   186 00000166 E8B706                  		call	full_circle
   187                                  
   188 00000169 A1[1200]                		mov		ax, [player_x1] ; Desenhando a raquete
   189 0000016C 50                      		push 	ax
   190 0000016D B80A00                  		mov		ax, 10
   191 00000170 50                      		push	ax
   192 00000171 A1[1400]                		mov		ax, [player_x2]
   193 00000174 50                      		push 	ax
   194 00000175 B80A00                  		mov		ax, 10
   195 00000178 50                      		push	ax
   196 00000179 E86107                  		call	line
   197                                  
   198 0000017C 59                              pop cx ; Recupera cx da pilha
   199 0000017D E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   200 0000017F E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   201 00000181 C3                              ret
   202                                  
   203                                  del2:
   204 00000182 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   205 00000183 B90008                          mov cx, 0800h ; Teste modificando este valor
   206                                  
   207                                  del1:
   208 00000186 B80C00                  		mov	ax, 12
   209 00000189 3906[3200]              		cmp	word[pontuacao], ax ; Verificação da pontuação para finalizar o game
   210 0000018D 747A                    		je	intermediateWin
   211 0000018F BB6702                          mov bx, 615 ;Limita o campo na parte da direita
   212 00000192 391E[1600]                      cmp [px], bx
   213 00000196 7D74                            jge moveesquerda
   214                                  
   215 00000198 BB1400                          mov bx, 20 ; Limita o campo na parte da esquerda
   216 0000019B 391E[1600]                      cmp [px], bx
   217 0000019F 7E7C                            jle movedireita
   218                                  
   219 000001A1 BB6C01                          mov bx, 364 ; Limita o campo na parte de cima
   220 000001A4 C706[3400]AB01          		mov	word[yToDelete1], 427
   221 000001AA C706[3600]8301          		mov	word[yToDelete2], 387
   222 000001B0 391E[1800]                      cmp [py], bx
   223 000001B4 7D78                    		jge intermediateMoveBaixo2
   224                                  
   225                                  sobe_mais: ; Sobe para quebrar a linha de cima
   226 000001B6 BB9E01                  		mov	bx, 414
   227 000001B9 C706[3400]DD01          		mov	word[yToDelete1], 477
   228 000001BF C706[3600]B501          		mov	word[yToDelete2], 437
   229 000001C5 391E[1800]              		cmp	[py], bx
   230 000001C9 7D63                    		jge	intermediateMoveBaixo2
   231                                  
   232                                  sobe_tudo: ; Sobe para bater a bola no teto
   233 000001CB BBC201                  		mov	bx, 450
   234 000001CE 391E[1800]              		cmp	[py], bx
   235 000001D2 7D6B                    		jge	intermediateNaoApaga
   236                                  
   237 000001D4 BB0A00                          mov bx, 10 ; Limita o campo na parte de baixo
   238 000001D7 391E[1800]                      cmp [py], bx
   239 000001DB 7E54                            jle movecima
   240                                  
   241 000001DD B40B                            mov ah, 0bh      
   242 000001DF CD21                            int 21h
   243 000001E1 3C00                            cmp al,0
   244 000001E3 755D                            jne intermediateVerifTeclas ; Verifica as teclas que o usuário clicou
   245 000001E5 E83503                  		call calcular_colisao_raquete
   246 000001E8 E957FF                          jmp continua
   247                                  
   248 000001EB E854FF                  		call delay
   249 000001EE E895FF                  		call del1
   250 000001F1 E88EFF                  		call del2
   251                                  
   252                                  limpa_bola:
   253 000001F4 C606[0000]00                    mov     byte[cor],preto ; limpa bola
   254 000001F9 A1[1600]                        mov     ax,[px]
   255 000001FC 50                              push        ax
   256 000001FD A1[1800]                        mov     ax,[py]
   257 00000200 50                              push        ax
   258 00000201 B81400                          mov     ax,20
   259 00000204 50                              push        ax
   260 00000205 E81806                          call    full_circle
   261 00000208 C3                              ret
   262                                  
   263                                  intermediateWin ; Função intermediária para corrigir o 'short jump'
   264 00000209 E9B903                  	jmp win_mensage
   265                                  
   266                                  moveesquerda: ; Função para rebater a bola na parede
   267 0000020C E8E5FF                          call limpa_bola
   268 0000020F A1[3800]                		mov ax, [vx]
   269 00000212 F7D8                            neg ax
   270 00000214 89C3                            mov bx, ax
   271 00000216 891E[3800]                      mov [vx], bx
   272 0000021A E925FF                          jmp continua
   273                                  
   274                                  movedireita: ; Função para rebater a bola na parede
   275 0000021D E8D4FF                  		call limpa_bola
   276 00000220 A1[3800]                        mov ax, [vx]
   277 00000223 F7D8                            neg ax
   278 00000225 89C3                            mov bx, ax
   279 00000227 891E[3800]                      mov [vx], bx
   280 0000022B E914FF                          jmp continua
   281                                  
   282                                  intermediateMoveBaixo2 ; Função intermediária para corrigir o 'short jump'
   283 0000022E E91A00                  	jmp movebaixo2
   284                                  
   285                                  movecima: ; Função para rebater a bola na raquete
   286 00000231 A1[3A00]                        mov ax, [vy]
   287 00000234 F7D8                            neg ax
   288 00000236 89C3                            mov bx, ax
   289 00000238 891E[3A00]                      mov [vy], bx
   290 0000023C E903FF                          jmp continua
   291                                  
   292                                  ;  PONTOS INTERMEDIÁRIOS PARA AS FUNÇÕES
   293                                  
   294                                  intermediateNaoApaga:
   295 0000023F E94A02                  	jmp	nao_apaga
   296                                  
   297                                  intermediateVerifTeclas:
   298 00000242 E96C02                  	jmp verificar_teclas
   299                                  
   300                                  intermediateSobeMais:
   301 00000245 E96EFF                  	jmp	sobe_mais
   302                                  
   303                                  intermediateSobeTudo:
   304 00000248 E980FF                  	jmp	sobe_tudo
   305                                  
   306                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   307                                  
   308                                  movebaixo2: ; Função para rebater a bola quando pegar no bloco ou no teto
   309 0000024B B80500                  		mov ax, 5 ; Quadrado 1
   310 0000024E 3906[1600]              		cmp [px], ax
   311 00000252 7D33                    		jge	verifica_quad1 ; Pula para verificar se acertou no limite do quadrado (todos repetem essa lógica)
   312                                  volta1:
   313 00000254 B86E00                  		mov ax, 110 ; Quadrado 2
   314 00000257 3906[1600]              		cmp [px], ax
   315 0000025B 7D7E                    		jge	verifica_quad2
   316                                  volta2:
   317 0000025D B8D700                  		mov ax, 215 ; Quadrado 3
   318 00000260 3906[1600]              		cmp [px], ax
   319 00000264 7D69                    		jge	intermediateVerificaQuad3
   320                                  volta3:
   321 00000266 B84001                  		mov ax, 320 ; Quadrado 4
   322 00000269 3906[1600]              		cmp [px], ax
   323 0000026D 7D63                    		jge	intermediateVerificaQuad4
   324                                  volta4:
   325 0000026F B8A901                  		mov ax, 425 ; Quadrado 5
   326 00000272 3906[1600]              		cmp [px], ax
   327 00000276 7D5D                    		jge	intermediateVerificaQuad5
   328                                  volta5:
   329 00000278 B81202                  		mov ax, 530 ; Quadrado 6
   330 0000027B 3906[1600]              		cmp [px], ax
   331 0000027F 7D57                    		jge	intermediateVerificaQuad6
   332                                  
   333                                  intermediateVolta2
   334 00000281 E9D9FF                  	jmp volta2
   335                                  
   336                                  intermediateSobeTudo4
   337 00000284 E944FF                  	jmp sobe_tudo
   338                                  
   339                                  ; Verificação para saber se pegou realmente no quadrado, e ver em que posição ele está (se está quebrado ou não)
   340                                  verifica_quad1:
   341 00000287 B86900                  		mov ax, 105
   342 0000028A 3906[1600]              		cmp	[px], ax
   343 0000028E 7FC4                    		jg volta1 ; Se não acertou, volta para verificar o próximo quadrado
   344 00000290 B80100                  		mov	ax, 1
   345 00000293 3B06[2600]              		cmp ax, [bloco_cima_quebrado1]
   346 00000297 74AF                    		je	intermediateSobeTudo ; Verifica se nessa posição, os quadrados da primeira e segunda linha foram quebrados
   347 00000299 B8DD01                  		mov	ax, 477
   348 0000029C 3B06[3400]              		cmp ax, word[yToDelete1]
   349 000002A0 741E                    		je	cima_quebrado1
   350 000002A2 B80100                  		mov	ax, 1
   351 000002A5 3B06[1A00]              		cmp ax, word[bloco_quebrado1]
   352 000002A9 749A                    		je	intermediateSobeMais ; Sobe para a segunda linha se o bloco já foi quebrado
   353                                  ignora1:
   354 000002AB C706[0E00]0500          		mov word[apaga1], 5
   355 000002B1 C706[1000]6900          		mov word[apaga2], 105
   356 000002B7 B80100                  		mov	ax, 1
   357 000002BA A3[1A00]                		mov	word[bloco_quebrado1], ax
   358 000002BD E97701                  		jmp	apaga_quad ; Se acertou no limite, apaga o quadrado e rebate a bola
   359                                  cima_quebrado1:
   360 000002C0 B80100                  	mov	ax, 1
   361 000002C3 A3[2600]                	mov	word[bloco_cima_quebrado1], ax ; Carrega para indicar que o segundo bloco foi quebrado 
   362 000002C6 E9E2FF                  	jmp	ignora1 ; Volta para quebrar o quadrado
   363                                  
   364                                  intermediateSobeMais2:
   365 000002C9 E979FF                  	jmp intermediateSobeMais
   366                                  
   367                                  intermediateSobeTudo2:
   368 000002CC E979FF                  	jmp intermediateSobeTudo
   369                                  
   370                                  intermediateVerificaQuad3:
   371 000002CF E95100                  	jmp verifica_quad3
   372                                  
   373                                  intermediateVerificaQuad4:
   374 000002D2 E99300                  	jmp verifica_quad4
   375                                  
   376                                  intermediateVerificaQuad5:
   377 000002D5 E9D800                  	jmp verifica_quad5
   378                                  
   379                                  intermediateVerificaQuad6:
   380 000002D8 E91701                  	jmp verifica_quad6
   381                                  
   382                                  verifica_quad2:
   383 000002DB B8D200                  		mov ax, 210
   384 000002DE 3906[1600]              		cmp	[px], ax
   385 000002E2 7F9D                    		jg intermediateVolta2
   386 000002E4 B80100                  		mov	ax, 1
   387 000002E7 3B06[2800]              		cmp ax, [bloco_cima_quebrado2]
   388 000002EB 7497                    		je	intermediateSobeTudo4
   389 000002ED B8DD01                  		mov	ax, 477
   390 000002F0 3B06[3400]              		cmp ax, word[yToDelete1]
   391 000002F4 741E                    		je	cima_quebrado2
   392 000002F6 B80100                  		mov	ax, 1
   393 000002F9 3B06[1C00]              		cmp ax, [bloco_quebrado2]
   394 000002FD 74CA                    		je	intermediateSobeMais2
   395                                  ignora2:
   396 000002FF C706[0E00]6E00          		mov word[apaga1], 110
   397 00000305 C706[1000]D200          		mov word[apaga2], 210
   398 0000030B B80100                  		mov ax, 1
   399 0000030E A3[1C00]                		mov	word[bloco_quebrado2], ax
   400 00000311 E92301                  		jmp	apaga_quad
   401                                  cima_quebrado2:
   402 00000314 B80100                  	mov	ax, 1
   403 00000317 A3[2800]                	mov	word[bloco_cima_quebrado2], ax
   404 0000031A E9E2FF                  	jmp	ignora2
   405                                  
   406                                  
   407                                  ;	Funções intermediárias para resolver o 'short jump
   408                                  intermediateVolta4:
   409 0000031D E94FFF                  	jmp	volta4
   410                                  
   411                                  intermediateVolta3:
   412 00000320 E943FF                  	jmp	volta3
   413                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   414                                  
   415                                  verifica_quad3:
   416 00000323 B83B01                  		mov ax, 315
   417 00000326 3906[1600]              		cmp	[px], ax
   418 0000032A 7FF4                    		jg intermediateVolta3
   419 0000032C B80100                  		mov	ax, 1
   420 0000032F 3B06[2A00]              		cmp ax, [bloco_cima_quebrado3]
   421 00000333 7478                    		je	intermediateSobeTudo3
   422 00000335 B8DD01                  		mov	ax, 477
   423 00000338 3B06[3400]              		cmp ax, word[yToDelete1]
   424 0000033C 7421                    		je	cima_quebrado3
   425 0000033E B80100                  		mov	ax, 1
   426 00000341 3B06[1E00]              		cmp ax, [bloco_quebrado3]
   427 00000345 7463                    		je	intermediateSobeMais3
   428                                  ignora3:
   429 00000347 C706[0E00]D700          		mov word[apaga1], 215
   430 0000034D C706[1000]3B01          		mov word[apaga2], 315
   431 00000353 B80100                  		mov	ax, 1
   432 00000356 A3[1E00]                		mov	word[bloco_quebrado3], ax
   433 00000359 E9DB00                  		jmp	apaga_quad
   434                                  
   435                                  intermediateVolta5:
   436 0000035C E919FF                  	jmp	volta5
   437                                  
   438                                  cima_quebrado3:
   439 0000035F B80100                  	mov	ax, 1
   440 00000362 A3[2A00]                	mov	word[bloco_cima_quebrado3], ax
   441 00000365 E9DFFF                  	jmp	ignora3
   442                                  
   443                                  
   444                                  
   445                                  verifica_quad4:
   446 00000368 B8A401                  		mov ax, 420
   447 0000036B 3906[1600]              		cmp	[px], ax
   448 0000036F 7FAC                    		jg intermediateVolta4
   449 00000371 B80100                  		mov	ax, 1
   450 00000374 3B06[2C00]              		cmp ax, [bloco_cima_quebrado4]
   451 00000378 7433                    		je	intermediateSobeTudo3
   452 0000037A B8DD01                  		mov	ax, 477
   453 0000037D 3B06[3400]              		cmp ax, word[yToDelete1]
   454 00000381 741E                    		je	cima_quebrado4
   455 00000383 B80100                  		mov	ax, 1
   456 00000386 3B06[2000]              		cmp ax, [bloco_quebrado4]
   457 0000038A 741E                    		je	intermediateSobeMais3
   458                                  ignora4:
   459 0000038C C706[0E00]4001          		mov word[apaga1], 320
   460 00000392 C706[1000]A401          		mov word[apaga2], 420
   461 00000398 B80100                  		mov	ax, 1
   462 0000039B A3[2000]                		mov	word[bloco_quebrado4], ax
   463 0000039E E99600                  		jmp	apaga_quad
   464                                  cima_quebrado4:
   465 000003A1 B80100                  	mov	ax, 1
   466 000003A4 A3[2C00]                	mov	word[bloco_cima_quebrado4], ax
   467 000003A7 E9E2FF                  	jmp	ignora4
   468                                  
   469                                  
   470                                  
   471                                  intermediateSobeMais3
   472 000003AA E91CFF                  	jmp intermediateSobeMais2
   473                                  
   474                                  intermediateSobeTudo3
   475 000003AD E91CFF                  	jmp intermediateSobeTudo2
   476                                  
   477                                  verifica_quad5:
   478 000003B0 B80D02                  		mov ax, 525
   479 000003B3 3906[1600]              		cmp	[px], ax
   480 000003B7 7FA3                    		jg intermediateVolta5
   481 000003B9 B80100                  		mov	ax, 1
   482 000003BC 3B06[2E00]              		cmp ax, [bloco_cima_quebrado5]
   483 000003C0 74EB                    		je	intermediateSobeTudo3
   484 000003C2 B8DD01                  		mov	ax, 477
   485 000003C5 3B06[3400]              		cmp ax, word[yToDelete1]
   486 000003C9 741E                    		je	cima_quebrado5
   487 000003CB B80100                  		mov	ax, 1
   488 000003CE 3B06[2200]              		cmp ax, [bloco_quebrado5]
   489 000003D2 74D6                    		je	intermediateSobeMais3
   490                                  ignora5:
   491 000003D4 C706[0E00]A901          		mov word[apaga1], 425
   492 000003DA C706[1000]0D02          		mov word[apaga2], 525
   493 000003E0 B80100                  		mov	ax, 1
   494 000003E3 A3[2200]                		mov	word[bloco_quebrado5], ax
   495 000003E6 E94E00                  		jmp	apaga_quad
   496                                  cima_quebrado5:
   497 000003E9 B80100                  	mov	ax, 1
   498 000003EC A3[2E00]                	mov	word[bloco_cima_quebrado5], ax
   499 000003EF E9E2FF                  	jmp	ignora5
   500                                  
   501                                  verifica_quad6:
   502 000003F2 B87602                  		mov ax, 630
   503 000003F5 3906[1600]              		cmp	[px], ax
   504 000003F9 7F39                    		jg intermediateNaoApaga2
   505 000003FB B80100                  		mov	ax, 1
   506 000003FE 3B06[3000]              		cmp ax, [bloco_cima_quebrado6]
   507 00000402 74A9                    		je	intermediateSobeTudo3
   508 00000404 B8DD01                  		mov	ax, 477
   509 00000407 3B06[3400]              		cmp ax, word[yToDelete1]
   510 0000040B 741E                    		je	cima_quebrado6
   511 0000040D B80100                  		mov	ax, 1
   512 00000410 3B06[2400]              		cmp ax, [bloco_quebrado6]
   513 00000414 7494                    		je	intermediateSobeMais3
   514                                  ignora6:
   515 00000416 C706[0E00]1202          		mov word[apaga1], 530
   516 0000041C C706[1000]7602          		mov word[apaga2], 630
   517 00000422 B80100                  		mov	ax, 1
   518 00000425 A3[2400]                		mov	word[bloco_quebrado6], ax
   519 00000428 E90C00                  		jmp	apaga_quad
   520                                  cima_quebrado6:
   521 0000042B B80100                  	mov	ax, 1
   522 0000042E A3[3000]                	mov	word[bloco_cima_quebrado6], ax
   523 00000431 E9E2FF                  	jmp	ignora6
   524                                  
   525                                  intermediateNaoApaga2
   526 00000434 E95500                  	jmp nao_apaga
   527                                  
   528                                  apaga_quad: ; Função para apagar os quadrados
   529 00000437 FF06[3200]              		inc		word[pontuacao]
   530 0000043B C606[0000]00            		mov		byte[cor], preto
   531 00000440 A1[0E00]                		mov		ax, word[apaga1] ; Posição em x do quadrado para apagar
   532 00000443 50                      		push 	ax
   533 00000444 A1[3400]                		mov		ax, word[yToDelete1] ; Posição em y do quadrado para apagar
   534 00000447 50                      		push	ax
   535 00000448 A1[1000]                		mov		ax, word[apaga2]
   536 0000044B 50                      		push 	ax
   537 0000044C A1[3400]                		mov		ax, word[yToDelete1]
   538 0000044F 50                      		push	ax
   539 00000450 E88A04                  		call	line
   540                                  		
   541 00000453 A1[1000]                		mov		ax, word[apaga2]
   542 00000456 50                      		push 	ax
   543 00000457 A1[3400]                		mov		ax, word[yToDelete1]
   544 0000045A 50                      		push	ax
   545 0000045B A1[1000]                		mov		ax, word[apaga2]
   546 0000045E 50                      		push 	ax
   547 0000045F A1[3600]                		mov		ax, word[yToDelete2]
   548 00000462 50                      		push	ax
   549 00000463 E87704                  		call	line
   550                                  		
   551 00000466 A1[1000]                		mov		ax, word[apaga2]
   552 00000469 50                      		push 	ax
   553 0000046A A1[3600]                		mov		ax, word[yToDelete2]
   554 0000046D 50                      		push	ax
   555 0000046E A1[0E00]                		mov		ax, word[apaga1]
   556 00000471 50                      		push 	ax
   557 00000472 A1[3600]                		mov		ax, word[yToDelete2]
   558 00000475 50                      		push	ax
   559 00000476 E86404                  		call	line
   560                                  		
   561 00000479 A1[0E00]                		mov		ax, word[apaga1]
   562 0000047C 50                      		push 	ax
   563 0000047D A1[3600]                		mov		ax, word[yToDelete2]
   564 00000480 50                      		push	ax
   565 00000481 A1[0E00]                		mov		ax, word[apaga1]
   566 00000484 50                      		push 	ax
   567 00000485 A1[3400]                		mov		ax, word[yToDelete1]
   568 00000488 50                      		push	ax
   569 00000489 E85104                  		call	line
   570                                  
   571                                  nao_apaga: ; Rebate a bola para não apagar
   572 0000048C A1[3A00]                        mov ax, [vy]
   573 0000048F F7D8                            neg ax
   574 00000491 89C3                            mov bx, ax
   575 00000493 891E[3A00]                      mov [vy], bx
   576 00000497 E9A8FC                          jmp continua
   577                                  
   578                                  sai: ; Finalizar o game
   579 0000049A B400                            mov ah,0 ; set video mode
   580 0000049C A0[0500]                        mov al,[modo_anterior] ; recupera o modo anterior
   581 0000049F CD10                            int 10h
   582 000004A1 B8004C                          mov ax,4c00h
   583 000004A4 CD21                            int 21h
   584                                  
   585                                  ganhou: ; Função de ganhar o jogo
   586 000004A6 B408                    	    mov ah, 08h
   587 000004A8 CD21                            int 21h
   588 000004AA 3C71                    		cmp al, 71h ;Compara a tecla com a letra 'q', fica parado aqui até apertar 'q' novamente
   589 000004AC 75F8                    		jne ganhou
   590 000004AE E9E9FF                  		jmp sai
   591                                  
   592                                  verificar_teclas: ;Estrutura para decidir o que será feito durante o jogo
   593 000004B1 55                              push bp
   594 000004B2 89E5                            mov bp, sp
   595 000004B4 B408                            mov ah, 08h
   596 000004B6 CD21                            int 21h
   597 000004B8 3C70                    		cmp al, 70h ; Código ASCII para a tecla 'p'
   598 000004BA 742B                    		je	pausa
   599 000004BC 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   600 000004BE 74DA                            je sai
   601 000004C0 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   602 000004C2 752E                            jne verificar_baixo
   603 000004C4 E8B500                          call limpa_raquete ;Se 'd' não for pressionado, ele pula para baixo e mexe a raquete
   604 000004C7 B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   605 000004CA BB7602                          mov bx, 630 ;testa se já chegou no limite
   606 000004CD 391E[1400]                      cmp [player_x2], bx
   607 000004D1 7D46                            jge fim_verificar_teclas
   608 000004D3 0306[1200]                      add ax, [player_x1]
   609 000004D7 A3[1200]                        mov [player_x1], ax
   610 000004DA B81400                          mov ax, 20
   611 000004DD 0306[1400]                      add ax, [player_x2]
   612 000004E1 A3[1400]                        mov [player_x2], ax
   613 000004E4 E93200                          jmp fim_verificar_teclas
   614                                  
   615                                  
   616                                  pausa:
   617 000004E7 B408                            mov ah, 08h
   618 000004E9 CD21                            int 21h
   619 000004EB 3C70                    		cmp al, 70h ;Compara a tecla com a letra 'p', fica parado aqui até apertar 'p' novamente
   620 000004ED 75F8                    		jne pausa
   621 000004EF E950FC                  		jmp continua
   622                                  
   623                                  verificar_baixo:
   624 000004F2 3C61                            cmp al, 61h
   625 000004F4 7523                            jne fim_verificar_teclas
   626 000004F6 E88300                          call limpa_raquete
   627 000004F9 B8ECFF                          mov ax, -20
   628 000004FC BB0A00                          mov bx, 10
   629 000004FF 391E[1200]                      cmp [player_x1], bx
   630 00000503 7E14                            jle fim_verificar_teclas
   631 00000505 0306[1200]                      add ax, [player_x1]
   632 00000509 A3[1200]                        mov [player_x1], ax
   633 0000050C B8ECFF                          mov ax, -20
   634 0000050F 0306[1400]                      add ax, [player_x2]
   635 00000513 A3[1400]                        mov [player_x2], ax
   636 00000516 E90000                          jmp fim_verificar_teclas
   637                                  
   638                                  fim_verificar_teclas:
   639 00000519 5D                              pop bp
   640 0000051A E925FC                          jmp continua
   641                                  
   642                                  calcular_colisao_raquete:
   643 0000051D B81E00                          mov ax, 30
   644 00000520 3906[1800]                      cmp [py], ax
   645 00000524 7403                            je verifica_colisao_raquete
   646 00000526 7C6D                    		jl game_over
   647 00000528 C3                              ret
   648                                  
   649                                  verifica_colisao_raquete:
   650 00000529 8B1E[1400]                      mov bx, [player_x2]
   651 0000052D 81C31000                        add bx, 16
   652 00000531 391E[1600]                      cmp [px], bx
   653 00000535 7E0F                            jle rebate_cima1
   654 00000537 8B1E[1200]                      mov bx, [player_x1]
   655 0000053B 81EB1000                        sub bx, 16
   656 0000053F 391E[1600]                      cmp [px], bx
   657 00000543 7D1C                            jge rebate_baixo1
   658 00000545 C3                              ret
   659                                  
   660                                  ;FUNÇÕES RESPONSÁVEIS POR REBATER A BOLA E ALTERAR A DIREÇÃO (ESQUERDA OU DIREITA)
   661                                  rebate_cima1:
   662 00000546 8B1E[1200]              		mov bx, [player_x1]
   663 0000054A 81EB1000                		sub bx, 16
   664 0000054E 391E[1600]              		cmp [px], bx
   665 00000552 7D01                    		jge rebate_cima2
   666 00000554 C3                              ret
   667                                  
   668                                  rebate_cima2:
   669 00000555 A1[3A00]                        mov ax, [vy]
   670 00000558 F7D8                            neg ax
   671 0000055A 89C3                            mov bx, ax
   672 0000055C 891E[3A00]              		mov [vy], bx
   673 00000560 C3                              ret
   674                                  
   675                                  rebate_baixo1:
   676 00000561 8B1E[1400]                      mov bx, [player_x2]
   677 00000565 81C31000                        add bx, 16
   678 00000569 391E[1600]                      cmp [px], bx
   679 0000056D 7E01                            jle rebate_baixo2
   680 0000056F C3                              ret
   681                                  
   682                                  rebate_baixo2:
   683 00000570 A1[3A00]                        mov ax, [vy]
   684 00000573 F7D8                            neg ax
   685 00000575 89C3                            mov bx, ax
   686 00000577 891E[3A00]                      mov [vy], bx
   687 0000057B C3                              ret
   688                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   689                                  
   690                                  limpa_raquete: ;FUNÇÃO UTILIZADA PARA ATUALIZAR A POSIÇÃO DA RAQUETE 
   691 0000057C C606[0000]00                    mov     byte[cor], preto
   692 00000581 A1[1200]                        mov     ax,[player_x1]
   693 00000584 50                              push    ax
   694 00000585 B80A00                          mov     ax,10
   695 00000588 50                              push    ax
   696 00000589 A1[1400]                        mov     ax,[player_x2]
   697 0000058C 50                              push    ax
   698 0000058D B80A00                          mov     ax,10
   699 00000590 50                              push    ax
   700 00000591 E84903                          call    line
   701 00000594 C3                              ret
   702                                  
   703                                  game_over: ;;Escreve a mensagem na tela e espera a tecla do jogador
   704 00000595 B92300                  		mov     	cx,35			;número de caracteres
   705 00000598 BB0000                      	mov     	bx,0
   706 0000059B B60A                        	mov     	dh,10			
   707 0000059D B20A                        	mov     	dl,10
   708 0000059F C606[0000]0F            		mov		byte[cor],branco_intenso
   709                                  
   710                                  repete_para_escrever:
   711 000005A4 E83F01                  		call	cursor
   712 000005A7 8A87[3C00]                  	mov     al,[bx+mens_3]
   713 000005AB E84F01                  		call	caracter
   714 000005AE 43                          	inc     bx			;proximo caracter
   715 000005AF FEC2                    		inc		dl			;avanca a coluna
   716 000005B1 E2F1                        	loop    repete_para_escrever
   717                                  
   718                                  verfica_continua_ou_nao:
   719 000005B3 55                      		push bp
   720 000005B4 89E5                            mov bp, sp
   721                                  
   722 000005B6 B408                    		mov ah, 08h
   723 000005B8 CD21                            int 21h
   724 000005BA 3C6E                    		cmp al, 6eh
   725 000005BC 7428                    		je	acaba
   726 000005BE 3C79                    		cmp al, 79h
   727 000005C0 7434                    		je limpa_tudo
   728 000005C2 E9EEFF                  		jmp	verfica_continua_ou_nao
   729                                  
   730                                  win_mensage: ;Escreve a mensagem na tela e espera a tecla do jogador
   731 000005C5 B91F00                  		mov     	cx,31			;número de caracteres
   732 000005C8 BB0000                      	mov     	bx,0
   733 000005CB B60C                        	mov     	dh,12			
   734 000005CD B20C                        	mov     	dl,12
   735 000005CF C606[0000]0F            		mov		byte[cor],branco_intenso
   736                                  
   737                                  repete_para_escrever_win:
   738 000005D4 E80F01                  		call	cursor
   739 000005D7 8A87[5F00]                  	mov     al,[bx+mens_4]
   740 000005DB E81F01                  		call	caracter
   741 000005DE 43                          	inc     bx			;proximo caracter
   742 000005DF FEC2                    		inc		dl			;avanca a coluna
   743 000005E1 E2F1                        	loop    repete_para_escrever_win
   744 000005E3 E9C0FE                  		jmp		ganhou
   745                                  
   746                                  acaba: ;Finalizando o programa
   747 000005E6 B408                    		mov    	ah,08h
   748 000005E8 CD21                    		int     21h
   749 000005EA B400                    	    mov  	ah,0   					; set video mode
   750 000005EC A0[0500]                	    mov  	al,[modo_anterior]   	; modo anterior
   751 000005EF CD10                    	    int  	10h
   752 000005F1 B8004C                  		mov     ax,4c00h
   753 000005F4 CD21                    		int     21h
   754                                  
   755                                  limpa_tudo: ;FUNÇÃO PARA LIMPAR O CAMPO TODO E VOLTAR PARA O ZERO
   756                                  
   757                                  	;Apagar as antigas funções (jogo passado)
   758 000005F6 E8FBFB                  	call limpa_bola
   759 000005F9 E880FF                  	call limpa_raquete
   760                                  
   761                                  	;Redefinindo os parametros do jogo
   762 000005FC B80000                  	mov	ax, 0
   763 000005FF A3[1A00]                	mov	word[bloco_quebrado1], ax
   764 00000602 B80000                  	mov	ax, 0
   765 00000605 A3[1C00]                	mov	word[bloco_quebrado2], ax
   766 00000608 B80000                  	mov	ax, 0
   767 0000060B A3[1E00]                	mov	word[bloco_quebrado3], ax
   768 0000060E B80000                  	mov	ax, 0
   769 00000611 A3[2000]                	mov	word[bloco_quebrado4], ax
   770 00000614 B80000                  	mov	ax, 0
   771 00000617 A3[2200]                	mov	word[bloco_quebrado5], ax
   772 0000061A B80000                  	mov	ax, 0
   773 0000061D A3[2400]                	mov	word[bloco_quebrado6], ax
   774 00000620 B80000                  	mov	ax, 0
   775 00000623 A3[2600]                	mov	word[bloco_cima_quebrado1], ax
   776 00000626 B80000                  	mov	ax, 0
   777 00000629 A3[2800]                	mov	word[bloco_cima_quebrado2], ax
   778 0000062C B80000                  	mov	ax, 0
   779 0000062F A3[2A00]                	mov	word[bloco_cima_quebrado3], ax
   780 00000632 B80000                  	mov	ax, 0
   781 00000635 A3[2C00]                	mov	word[bloco_cima_quebrado4], ax
   782 00000638 B80000                  	mov	ax, 0
   783 0000063B A3[2E00]                	mov	word[bloco_cima_quebrado5], ax
   784 0000063E B80000                  	mov	ax, 0
   785 00000641 A3[3000]                	mov	word[bloco_cima_quebrado6], ax
   786 00000644 B80000                  	mov	ax, 0
   787 00000647 A3[0E00]                	mov	word[apaga1], ax
   788 0000064A B80000                  	mov	ax, 0
   789 0000064D A3[1000]                	mov	word[apaga2], ax
   790 00000650 B80000                  	mov	ax, 0
   791 00000653 A3[3200]                	mov	word[pontuacao], ax
   792 00000656 B80000                  	mov	ax, 0
   793 00000659 A3[3400]                	mov	word[yToDelete1], ax
   794 0000065C B80000                  	mov	ax, 0
   795 0000065F A3[3600]                	mov	word[yToDelete2], ax
   796 00000662 B80500                  	mov	ax, 5
   797 00000665 A3[0600]                	mov	word[x1A], ax
   798 00000668 B86900                  	mov	ax, 105
   799 0000066B A3[0800]                	mov	word[x2A], ax
   800 0000066E B80500                  	mov	ax, 5
   801 00000671 A3[0A00]                	mov	word[x1B], ax
   802 00000674 B86900                  	mov	ax, 105
   803 00000677 A3[0C00]                	mov	word[x2B], ax
   804 0000067A B80E01                  	mov	ax, 270
   805 0000067D A3[1200]                	mov	word[player_x1], ax
   806 00000680 B87201                  	mov	ax, 370
   807 00000683 A3[1400]                	mov	word[player_x2], ax
   808 00000686 B84001                  	mov	ax, 320
   809 00000689 A3[1600]                	mov	word[px], ax
   810 0000068C B81E00                  	mov	ax, 30
   811 0000068F A3[1800]                	mov	word[py], ax
   812 00000692 B80500                  	mov	ax, 5
   813 00000695 A3[3800]                	mov	word[vx], ax
   814 00000698 B80500                  	mov	ax, 5
   815 0000069B A3[3A00]                	mov	word[vy], ax
   816 0000069E B020                    	mov al, ' '
   817 000006A0 8887[3C00]              	mov [bx+mens_3], al
   818                                  	
   819 000006A4 E873F9                  	call reset_game
   820                                  
   821 000006A7 E8A1FB                  	call movebaixo2
   822 000006AA E8A7FB                  	call volta1
   823 000006AD E8ADFB                  	call volta2
   824 000006B0 E8B3FB                  	call volta3
   825 000006B3 E8B9FB                  	call volta4
   826 000006B6 E8BFFB                  	call volta5
   827 000006B9 E8CBFB                  	call verifica_quad1
   828 000006BC E8ECFB                  	call ignora1
   829 000006BF E819FC                  	call verifica_quad2
   830 000006C2 E83AFC                  	call ignora2
   831 000006C5 E85BFC                  	call verifica_quad3
   832 000006C8 E87CFC                  	call ignora3
   833 000006CB E89AFC                  	call verifica_quad4
   834 000006CE E8BBFC                  	call ignora4
   835 000006D1 E8DCFC                  	call verifica_quad5
   836 000006D4 E8FDFC                  	call ignora5
   837 000006D7 E818FD                  	call verifica_quad6
   838 000006DA E839FD                  	call ignora6
   839 000006DD E857FD                  	call apaga_quad
   840                                  
   841                                  	;Chamar as funções que desenham o jogo
   842 000006E0 E837F9                  	call reset_game
   843                                  
   844                                  	;Pular para a função principal do jogo
   845 000006E3 E85CFA                  	call continua
   846                                  
   847                                  ;***************************************************************************
   848                                  ;
   849                                  ;   função cursor
   850                                  ;
   851                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   852                                  cursor:
   853 000006E6 9C                      		pushf
   854 000006E7 50                      		push 		ax
   855 000006E8 53                      		push 		bx
   856 000006E9 51                      		push		cx
   857 000006EA 52                      		push		dx
   858 000006EB 56                      		push		si
   859 000006EC 57                      		push		di
   860 000006ED 55                      		push		bp
   861 000006EE B402                    		mov     	ah,2
   862 000006F0 B700                    		mov     	bh,0
   863 000006F2 CD10                    		int     	10h
   864 000006F4 5D                      		pop		bp
   865 000006F5 5F                      		pop		di
   866 000006F6 5E                      		pop		si
   867 000006F7 5A                      		pop		dx
   868 000006F8 59                      		pop		cx
   869 000006F9 5B                      		pop		bx
   870 000006FA 58                      		pop		ax
   871 000006FB 9D                      		popf
   872 000006FC C3                      		ret
   873                                  ;_____________________________________________________________________________
   874                                  ;
   875                                  ;   fun��o caracter escrito na posi��o do cursor
   876                                  ;
   877                                  ; al= caracter a ser escrito
   878                                  ; cor definida na variavel cor
   879                                  caracter:
   880 000006FD 9C                      		pushf
   881 000006FE 50                      		push 		ax
   882 000006FF 53                      		push 		bx
   883 00000700 51                      		push		cx
   884 00000701 52                      		push		dx
   885 00000702 56                      		push		si
   886 00000703 57                      		push		di
   887 00000704 55                      		push		bp
   888 00000705 B409                        	mov     	ah,9
   889 00000707 B700                        	mov     	bh,0
   890 00000709 B90100                      	mov     	cx,1
   891 0000070C 8A1E[0000]                 		mov     	bl,[cor]
   892 00000710 CD10                        	int     	10h
   893 00000712 5D                      		pop			bp
   894 00000713 5F                      		pop			di
   895 00000714 5E                      		pop			si
   896 00000715 5A                      		pop			dx
   897 00000716 59                      		pop			cx
   898 00000717 5B                      		pop			bx
   899 00000718 58                      		pop			ax
   900 00000719 9D                      		popf
   901 0000071A C3                      		ret
   902                                  ;_____________________________________________________________________________
   903                                  ;
   904                                  ;   fun��o plot_xy
   905                                  ;
   906                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   907                                  ; cor definida na variavel cor
   908                                  plot_xy:
   909 0000071B 55                      		push		bp
   910 0000071C 89E5                    		mov			bp,sp
   911 0000071E 9C                      		pushf
   912 0000071F 50                      		push 		ax
   913 00000720 53                      		push 		bx
   914 00000721 51                      		push		cx
   915 00000722 52                      		push		dx
   916 00000723 56                      		push		si
   917 00000724 57                      		push		di
   918 00000725 B40C                    	    mov     	ah,0ch
   919 00000727 A0[0000]                	    mov     	al,[cor]
   920 0000072A B700                    	    mov     	bh,0
   921 0000072C BADF01                  	    mov     	dx,479
   922 0000072F 2B5604                  		sub			dx,[bp+4]
   923 00000732 8B4E06                  	    mov     	cx,[bp+6]
   924 00000735 CD10                    	    int     	10h
   925 00000737 5F                      		pop			di
   926 00000738 5E                      		pop			si
   927 00000739 5A                      		pop			dx
   928 0000073A 59                      		pop			cx
   929 0000073B 5B                      		pop			bx
   930 0000073C 58                      		pop			ax
   931 0000073D 9D                      		popf	
   932 0000073E 5D                      		pop			bp
   933 0000073F C20400                  		ret			4
   934                                  ;_____________________________________________________________________________
   935                                  ;    fun��o circle
   936                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   937                                  ; cor definida na variavel cor
   938                                  circle:
   939 00000742 55                      		push 	bp
   940 00000743 89E5                    		mov	 	bp,sp
   941 00000745 9C                      		pushf                        ;coloca os flags na pilha
   942 00000746 50                      		push 	ax
   943 00000747 53                      		push 	bx
   944 00000748 51                      		push	cx
   945 00000749 52                      		push	dx
   946 0000074A 56                      		push	si
   947 0000074B 57                      		push	di
   948                                  		
   949 0000074C 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   950 0000074F 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   951 00000752 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   952                                  		
   953 00000755 89DA                    		mov 	dx,bx	
   954 00000757 01CA                    		add		dx,cx       ;ponto extremo superior
   955 00000759 50                      		push    ax			
   956 0000075A 52                      		push	dx
   957 0000075B E8BDFF                  		call plot_xy
   958                                  		
   959 0000075E 89DA                    		mov		dx,bx
   960 00000760 29CA                    		sub		dx,cx       ;ponto extremo inferior
   961 00000762 50                      		push    ax			
   962 00000763 52                      		push	dx
   963 00000764 E8B4FF                  		call plot_xy
   964                                  		
   965 00000767 89C2                    		mov 	dx,ax	
   966 00000769 01CA                    		add		dx,cx       ;ponto extremo direita
   967 0000076B 52                      		push    dx			
   968 0000076C 53                      		push	bx
   969 0000076D E8ABFF                  		call plot_xy
   970                                  		
   971 00000770 89C2                    		mov		dx,ax
   972 00000772 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   973 00000774 52                      		push    dx			
   974 00000775 53                      		push	bx
   975 00000776 E8A2FF                  		call plot_xy
   976                                  			
   977 00000779 89CF                    		mov		di,cx
   978 0000077B 81EF0100                		sub		di,1	 ;di=r-1
   979 0000077F BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   980                                  		
   981                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   982                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   983                                  ;valores positivos para d
   984                                  
   985                                  stay:				;loop
   986 00000782 89FE                    		mov		si,di
   987 00000784 81FE0000                		cmp		si,0
   988 00000788 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   989 0000078A 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   990 0000078C D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   991 0000078E 81C60300                		add		si,3
   992 00000792 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   993 00000794 42                      		inc		dx		;incrementa dx
   994 00000795 E90E00                  		jmp		plotar
   995                                  inf:	
   996 00000798 89D6                    		mov		si,dx
   997 0000079A 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   998 0000079C D1E6                    		sal		si,1
   999 0000079E 81C60500                		add		si,5
  1000 000007A2 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1001 000007A4 42                      		inc		dx		;incrementa x (dx)
  1002 000007A5 49                      		dec		cx		;decrementa y (cx)
  1003                                  	
  1004                                  plotar:	
  1005 000007A6 89D6                    		mov		si,dx
  1006 000007A8 01C6                    		add		si,ax
  1007 000007AA 56                      		push    si			;coloca a abcisa x+xc na pilha
  1008 000007AB 89CE                    		mov		si,cx
  1009 000007AD 01DE                    		add		si,bx
  1010 000007AF 56                      		push    si			;coloca a ordenada y+yc na pilha
  1011 000007B0 E868FF                  		call plot_xy		;toma conta do segundo octante
  1012 000007B3 89C6                    		mov		si,ax
  1013 000007B5 01D6                    		add		si,dx
  1014 000007B7 56                      		push    si			;coloca a abcisa xc+x na pilha
  1015 000007B8 89DE                    		mov		si,bx
  1016 000007BA 29CE                    		sub		si,cx
  1017 000007BC 56                      		push    si			;coloca a ordenada yc-y na pilha
  1018 000007BD E85BFF                  		call plot_xy		;toma conta do s�timo octante
  1019 000007C0 89C6                    		mov		si,ax
  1020 000007C2 01CE                    		add		si,cx
  1021 000007C4 56                      		push    si			;coloca a abcisa xc+y na pilha
  1022 000007C5 89DE                    		mov		si,bx
  1023 000007C7 01D6                    		add		si,dx
  1024 000007C9 56                      		push    si			;coloca a ordenada yc+x na pilha
  1025 000007CA E84EFF                  		call plot_xy		;toma conta do segundo octante
  1026 000007CD 89C6                    		mov		si,ax
  1027 000007CF 01CE                    		add		si,cx
  1028 000007D1 56                      		push    si			;coloca a abcisa xc+y na pilha
  1029 000007D2 89DE                    		mov		si,bx
  1030 000007D4 29D6                    		sub		si,dx
  1031 000007D6 56                      		push    si			;coloca a ordenada yc-x na pilha
  1032 000007D7 E841FF                  		call plot_xy		;toma conta do oitavo octante
  1033 000007DA 89C6                    		mov		si,ax
  1034 000007DC 29D6                    		sub		si,dx
  1035 000007DE 56                      		push    si			;coloca a abcisa xc-x na pilha
  1036 000007DF 89DE                    		mov		si,bx
  1037 000007E1 01CE                    		add		si,cx
  1038 000007E3 56                      		push    si			;coloca a ordenada yc+y na pilha
  1039 000007E4 E834FF                  		call plot_xy		;toma conta do terceiro octante
  1040 000007E7 89C6                    		mov		si,ax
  1041 000007E9 29D6                    		sub		si,dx
  1042 000007EB 56                      		push    si			;coloca a abcisa xc-x na pilha
  1043 000007EC 89DE                    		mov		si,bx
  1044 000007EE 29CE                    		sub		si,cx
  1045 000007F0 56                      		push    si			;coloca a ordenada yc-y na pilha
  1046 000007F1 E827FF                  		call plot_xy		;toma conta do sexto octante
  1047 000007F4 89C6                    		mov		si,ax
  1048 000007F6 29CE                    		sub		si,cx
  1049 000007F8 56                      		push    si			;coloca a abcisa xc-y na pilha
  1050 000007F9 89DE                    		mov		si,bx
  1051 000007FB 29D6                    		sub		si,dx
  1052 000007FD 56                      		push    si			;coloca a ordenada yc-x na pilha
  1053 000007FE E81AFF                  		call plot_xy		;toma conta do quinto octante
  1054 00000801 89C6                    		mov		si,ax
  1055 00000803 29CE                    		sub		si,cx
  1056 00000805 56                      		push    si			;coloca a abcisa xc-y na pilha
  1057 00000806 89DE                    		mov		si,bx
  1058 00000808 01D6                    		add		si,dx
  1059 0000080A 56                      		push    si			;coloca a ordenada yc-x na pilha
  1060 0000080B E80DFF                  		call plot_xy		;toma conta do quarto octante
  1061                                  		
  1062 0000080E 39D1                    		cmp		cx,dx
  1063 00000810 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1064 00000812 E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
  1065                                  		
  1066                                  fim_circle:
  1067 00000815 5F                      		pop		di
  1068 00000816 5E                      		pop		si
  1069 00000817 5A                      		pop		dx
  1070 00000818 59                      		pop		cx
  1071 00000819 5B                      		pop		bx
  1072 0000081A 58                      		pop		ax
  1073 0000081B 9D                      		popf
  1074 0000081C 5D                      		pop		bp
  1075 0000081D C20600                  		ret		6
  1076                                  ;-----------------------------------------------------------------------------
  1077                                  ;    fun��o full_circle
  1078                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1079                                  ; cor definida na variavel cor					  
  1080                                  full_circle:
  1081 00000820 55                      		push 	bp
  1082 00000821 89E5                    		mov	 	bp,sp
  1083 00000823 9C                      		pushf                        ;coloca os flags na pilha
  1084 00000824 50                      		push 	ax
  1085 00000825 53                      		push 	bx
  1086 00000826 51                      		push	cx
  1087 00000827 52                      		push	dx
  1088 00000828 56                      		push	si
  1089 00000829 57                      		push	di
  1090                                  
  1091 0000082A 8B4608                  		mov		ax,[bp+8]    ; resgata xc
  1092 0000082D 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
  1093 00000830 8B4E04                  		mov		cx,[bp+4]    ; resgata r
  1094                                  		
  1095 00000833 89DE                    		mov		si,bx
  1096 00000835 29CE                    		sub		si,cx
  1097 00000837 50                      		push    ax			;coloca xc na pilha			
  1098 00000838 56                      		push	si			;coloca yc-r na pilha
  1099 00000839 89DE                    		mov		si,bx
  1100 0000083B 01CE                    		add		si,cx
  1101 0000083D 50                      		push	ax		;coloca xc na pilha
  1102 0000083E 56                      		push	si		;coloca yc+r na pilha
  1103 0000083F E89B00                  		call line
  1104                                  		
  1105                                  			
  1106 00000842 89CF                    		mov		di,cx
  1107 00000844 81EF0100                		sub		di,1	 ;di=r-1
  1108 00000848 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  1109                                  		
  1110                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1111                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1112                                  ;valores positivos para d
  1113                                  
  1114                                  stay_full:				;loop
  1115 0000084B 89FE                    		mov		si,di
  1116 0000084D 81FE0000                		cmp		si,0
  1117 00000851 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1118 00000853 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  1119 00000855 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
  1120 00000857 81C60300                		add		si,3
  1121 0000085B 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
  1122 0000085D 42                      		inc		dx		;incrementa dx
  1123 0000085E E90E00                  		jmp		plotar_full
  1124                                  
  1125                                  inf_full:	
  1126 00000861 89D6                    		mov		si,dx
  1127 00000863 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  1128 00000865 D1E6                    		sal		si,1
  1129 00000867 81C60500                		add		si,5
  1130 0000086B 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1131 0000086D 42                      		inc		dx		;incrementa x (dx)
  1132 0000086E 49                      		dec		cx		;decrementa y (cx)
  1133                                  	
  1134                                  plotar_full:	
  1135 0000086F 89C6                    		mov		si,ax
  1136 00000871 01CE                    		add		si,cx
  1137 00000873 56                      		push	si		;coloca a abcisa y+xc na pilha			
  1138 00000874 89DE                    		mov		si,bx
  1139 00000876 29D6                    		sub		si,dx
  1140 00000878 56                      		push    si		;coloca a ordenada yc-x na pilha
  1141 00000879 89C6                    		mov		si,ax
  1142 0000087B 01CE                    		add		si,cx
  1143 0000087D 56                      		push	si		;coloca a abcisa y+xc na pilha	
  1144 0000087E 89DE                    		mov		si,bx
  1145 00000880 01D6                    		add		si,dx
  1146 00000882 56                      		push    si		;coloca a ordenada yc+x na pilha	
  1147 00000883 E85700                  		call 	line
  1148                                  		
  1149 00000886 89C6                    		mov		si,ax
  1150 00000888 01D6                    		add		si,dx
  1151 0000088A 56                      		push	si		;coloca a abcisa xc+x na pilha			
  1152 0000088B 89DE                    		mov		si,bx
  1153 0000088D 29CE                    		sub		si,cx
  1154 0000088F 56                      		push    si		;coloca a ordenada yc-y na pilha
  1155 00000890 89C6                    		mov		si,ax
  1156 00000892 01D6                    		add		si,dx
  1157 00000894 56                      		push	si		;coloca a abcisa xc+x na pilha	
  1158 00000895 89DE                    		mov		si,bx
  1159 00000897 01CE                    		add		si,cx
  1160 00000899 56                      		push    si		;coloca a ordenada yc+y na pilha	
  1161 0000089A E84000                  		call	line
  1162                                  		
  1163 0000089D 89C6                    		mov		si,ax
  1164 0000089F 29D6                    		sub		si,dx
  1165 000008A1 56                      		push	si		;coloca a abcisa xc-x na pilha			
  1166 000008A2 89DE                    		mov		si,bx
  1167 000008A4 29CE                    		sub		si,cx
  1168 000008A6 56                      		push    si		;coloca a ordenada yc-y na pilha
  1169 000008A7 89C6                    		mov		si,ax
  1170 000008A9 29D6                    		sub		si,dx
  1171 000008AB 56                      		push	si		;coloca a abcisa xc-x na pilha	
  1172 000008AC 89DE                    		mov		si,bx
  1173 000008AE 01CE                    		add		si,cx
  1174 000008B0 56                      		push    si		;coloca a ordenada yc+y na pilha	
  1175 000008B1 E82900                  		call	line
  1176                                  		
  1177 000008B4 89C6                    		mov		si,ax
  1178 000008B6 29CE                    		sub		si,cx
  1179 000008B8 56                      		push	si		;coloca a abcisa xc-y na pilha			
  1180 000008B9 89DE                    		mov		si,bx
  1181 000008BB 29D6                    		sub		si,dx
  1182 000008BD 56                      		push    si		;coloca a ordenada yc-x na pilha
  1183 000008BE 89C6                    		mov		si,ax
  1184 000008C0 29CE                    		sub		si,cx
  1185 000008C2 56                      		push	si		;coloca a abcisa xc-y na pilha	
  1186 000008C3 89DE                    		mov		si,bx
  1187 000008C5 01D6                    		add		si,dx
  1188 000008C7 56                      		push    si		;coloca a ordenada yc+x na pilha	
  1189 000008C8 E81200                  		call	line
  1190                                  		
  1191 000008CB 39D1                    		cmp		cx,dx
  1192 000008CD 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1193 000008CF E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1194                                  			
  1195                                  fim_full_circle:
  1196 000008D2 5F                      		pop		di
  1197 000008D3 5E                      		pop		si
  1198 000008D4 5A                      		pop		dx
  1199 000008D5 59                      		pop		cx
  1200 000008D6 5B                      		pop		bx
  1201 000008D7 58                      		pop		ax
  1202 000008D8 9D                      		popf
  1203 000008D9 5D                      		pop		bp
  1204 000008DA C20600                  		ret		6
  1205                                  ;-----------------------------------------------------------------------------
  1206                                  ;
  1207                                  ;   fun��o line
  1208                                  ;
  1209                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1210                                  line:
  1211 000008DD 55                      		push		bp
  1212 000008DE 89E5                    		mov		bp,sp
  1213 000008E0 9C                      		pushf                        ;coloca os flags na pilha
  1214 000008E1 50                      		push 		ax
  1215 000008E2 53                      		push 		bx
  1216 000008E3 51                      		push		cx
  1217 000008E4 52                      		push		dx
  1218 000008E5 56                      		push		si
  1219 000008E6 57                      		push		di
  1220 000008E7 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  1221 000008EA 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  1222 000008ED 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  1223 000008F0 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  1224 000008F3 39C8                    		cmp		ax,cx
  1225 000008F5 7408                    		je		line2
  1226 000008F7 721C                    		jb		line1
  1227 000008F9 91                      		xchg		ax,cx
  1228 000008FA 87DA                    		xchg		bx,dx
  1229 000008FC E91600                  		jmp		line1
  1230                                  
  1231                                  line2:		; deltax=0
  1232 000008FF 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1233 00000901 7202                    		jb		line3
  1234 00000903 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1235                                  
  1236                                  line3:	; dx > bx
  1237 00000905 50                      		push		ax
  1238 00000906 53                      		push		bx
  1239 00000907 E811FE                  		call 		plot_xy
  1240 0000090A 39D3                    		cmp		bx,dx
  1241 0000090C 7503                    		jne		line31
  1242 0000090E E9C600                  		jmp		fim_line
  1243                                  line31:		
  1244 00000911 43                      		inc		bx
  1245 00000912 E9F0FF                  		jmp		line3
  1246                                  ;deltax <>0
  1247                                  line1:
  1248                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1249                                  	; cx > ax
  1250 00000915 51                      		push		cx
  1251 00000916 29C1                    		sub		cx,ax
  1252 00000918 890E[0100]              		mov		[deltax],cx
  1253 0000091C 59                      		pop		cx
  1254 0000091D 52                      		push		dx
  1255 0000091E 29DA                    		sub		dx,bx
  1256 00000920 7702                    		ja		line32
  1257 00000922 F7DA                    		neg		dx
  1258                                  line32:		
  1259 00000924 8916[0300]              		mov		[deltay],dx
  1260 00000928 5A                      		pop		dx
  1261                                  
  1262 00000929 50                      		push		ax
  1263 0000092A A1[0100]                		mov		ax,[deltax]
  1264 0000092D 3B06[0300]              		cmp		ax,[deltay]
  1265 00000931 58                      		pop		ax
  1266 00000932 724D                    		jb		line5
  1267                                  
  1268                                  	; cx > ax e deltax>deltay
  1269 00000934 51                      		push		cx
  1270 00000935 29C1                    		sub		cx,ax
  1271 00000937 890E[0100]              		mov		[deltax],cx
  1272 0000093B 59                      		pop		cx
  1273 0000093C 52                      		push		dx
  1274 0000093D 29DA                    		sub		dx,bx
  1275 0000093F 8916[0300]              		mov		[deltay],dx
  1276 00000943 5A                      		pop		dx
  1277                                  
  1278 00000944 89C6                    		mov		si,ax
  1279                                  line4:
  1280 00000946 50                      		push		ax
  1281 00000947 52                      		push		dx
  1282 00000948 56                      		push		si
  1283 00000949 29C6                    		sub		si,ax	;(x-x1)
  1284 0000094B A1[0300]                		mov		ax,[deltay]
  1285 0000094E F7EE                    		imul		si
  1286 00000950 8B36[0100]              		mov		si,[deltax]		;arredondar
  1287 00000954 D1EE                    		shr		si,1
  1288                                  ; se numerador (DX)>0 soma se <0 subtrai
  1289 00000956 81FA0000                		cmp		dx,0
  1290 0000095A 7C09                    		jl		ar1
  1291 0000095C 01F0                    		add		ax,si
  1292 0000095E 81D20000                		adc		dx,0
  1293 00000962 E90600                  		jmp		arc1
  1294 00000965 29F0                    ar1:		sub		ax,si
  1295 00000967 81DA0000                		sbb		dx,0
  1296                                  arc1:
  1297 0000096B F73E[0100]              		idiv		word [deltax]
  1298 0000096F 01D8                    		add		ax,bx
  1299 00000971 5E                      		pop		si
  1300 00000972 56                      		push		si
  1301 00000973 50                      		push		ax
  1302 00000974 E8A4FD                  		call		plot_xy
  1303 00000977 5A                      		pop		dx
  1304 00000978 58                      		pop		ax
  1305 00000979 39CE                    		cmp		si,cx
  1306 0000097B 745A                    		je		fim_line
  1307 0000097D 46                      		inc		si
  1308 0000097E E9C5FF                  		jmp		line4
  1309                                  
  1310 00000981 39D3                    line5:		cmp		bx,dx
  1311 00000983 7203                    		jb 		line7
  1312 00000985 91                      		xchg		ax,cx
  1313 00000986 87DA                    		xchg		bx,dx
  1314                                  line7:
  1315 00000988 51                      		push		cx
  1316 00000989 29C1                    		sub		cx,ax
  1317 0000098B 890E[0100]              		mov		[deltax],cx
  1318 0000098F 59                      		pop		cx
  1319 00000990 52                      		push		dx
  1320 00000991 29DA                    		sub		dx,bx
  1321 00000993 8916[0300]              		mov		[deltay],dx
  1322 00000997 5A                      		pop		dx
  1323 00000998 89DE                    		mov		si,bx
  1324                                  line6:
  1325 0000099A 52                      		push		dx
  1326 0000099B 56                      		push		si
  1327 0000099C 50                      		push		ax
  1328 0000099D 29DE                    		sub		si,bx	;(y-y1)
  1329 0000099F A1[0100]                		mov		ax,[deltax]
  1330 000009A2 F7EE                    		imul		si
  1331 000009A4 8B36[0300]              		mov		si,[deltay]		;arredondar
  1332 000009A8 D1EE                    		shr		si,1
  1333                                  ; se numerador (DX)>0 soma se <0 subtrai
  1334 000009AA 81FA0000                		cmp		dx,0
  1335 000009AE 7C09                    		jl		ar2
  1336 000009B0 01F0                    		add		ax,si
  1337 000009B2 81D20000                		adc		dx,0
  1338 000009B6 E90600                  		jmp		arc2
  1339                                  ar2:		
  1340 000009B9 29F0                    		sub		ax,si
  1341 000009BB 81EA0000                		sub		dx,0
  1342                                  arc2:
  1343 000009BF F73E[0300]              		idiv		word [deltay]
  1344 000009C3 89C7                    		mov		di,ax
  1345 000009C5 58                      		pop		ax
  1346 000009C6 01C7                    		add		di,ax
  1347 000009C8 5E                      		pop		si
  1348 000009C9 57                      		push		di
  1349 000009CA 56                      		push		si
  1350 000009CB E84DFD                  		call		plot_xy
  1351 000009CE 5A                      		pop		dx
  1352 000009CF 39D6                    		cmp		si,dx
  1353 000009D1 7404                    		je		fim_line
  1354 000009D3 46                      		inc		si
  1355 000009D4 E9C3FF                  		jmp		line6
  1356                                  
  1357                                  fim_line:
  1358 000009D7 5F                      		pop		di
  1359 000009D8 5E                      		pop		si
  1360 000009D9 5A                      		pop		dx
  1361 000009DA 59                      		pop		cx
  1362 000009DB 5B                      		pop		bx
  1363 000009DC 58                      		pop		ax
  1364 000009DD 9D                      		popf
  1365 000009DE 5D                      		pop		bp
  1366 000009DF C20800                  		ret		8
  1367                                  ;*******************************************************************
  1368                                  segment data
  1369                                  
  1370                                  ;	I R G B COR
  1371                                  ;	0 0 0 0 preto
  1372                                  ;	0 0 0 1 azul
  1373                                  ;	0 0 1 0 verde
  1374                                  ;	0 0 1 1 cyan
  1375                                  ;	0 1 0 0 vermelho
  1376                                  ;	0 1 0 1 magenta
  1377                                  ;	0 1 1 0 marrom
  1378                                  ;	0 1 1 1 branco
  1379                                  ;	1 0 0 0 cinza
  1380                                  ;	1 0 0 1 azul claro
  1381                                  ;	1 0 1 0 verde claro
  1382                                  ;	1 0 1 1 cyan claro
  1383                                  ;	1 1 0 0 rosa
  1384                                  ;	1 1 0 1 magenta claro
  1385                                  ;	1 1 1 0 amarelo
  1386                                  ;	1 1 1 1 branco intenso
  1387                                  
  1388                                  
  1389 00000000 0F                      cor				db		branco_intenso
  1390                                  preto			equ		0
  1391                                  azul			equ		1
  1392                                  verde			equ		2
  1393                                  cyan			equ		3
  1394                                  vermelho		equ		4
  1395                                  magenta			equ		5
  1396                                  marrom			equ		6
  1397                                  branco			equ		7
  1398                                  cinza			equ		8
  1399                                  azul_claro		equ		9
  1400                                  verde_claro		equ		10
  1401                                  cyan_claro		equ		11
  1402                                  rosa			equ		12
  1403                                  magenta_claro	equ		13
  1404                                  amarelo			equ		14
  1405                                  branco_intenso	equ		15
  1406 00000001 0000                    deltax			dw		0
  1407 00000003 0000                    deltay			dw		0
  1408 00000005 00                      modo_anterior	db		0
  1409                                  
  1410 00000006 0500                    x1A				dw		5	;Usados para printar os quadrados
  1411 00000008 6900                    x2A				dw		105
  1412 0000000A 0500                    x1B 			dw		5
  1413 0000000C 6900                    x2B  			dw		105
  1414                                  
  1415 0000000E 0000                    apaga1			dw		0	;Variáveis para pegar qual quadrado apagar
  1416 00000010 0000                    apaga2			dw		0
  1417                                  
  1418 00000012 0E01                    player_x1    	dw      270	;Posição da raquete
  1419 00000014 7201                    player_x2    	dw      370
  1420                                  
  1421 00000016 4001                    px      		dw      320	;Posição da bola
  1422 00000018 1E00                    py      		dw      30
  1423                                  
  1424 0000001A 0000                    bloco_quebrado1	dw		0	;Variável para testar se a bola pode subir mais
  1425 0000001C 0000                    bloco_quebrado2	dw		0
  1426 0000001E 0000                    bloco_quebrado3	dw		0
  1427 00000020 0000                    bloco_quebrado4	dw		0
  1428 00000022 0000                    bloco_quebrado5	dw		0
  1429 00000024 0000                    bloco_quebrado6	dw		0
  1430                                  
  1431 00000026 0000                    bloco_cima_quebrado1	dw		0 ;Variável para testar se a bola pode bater no 'teto'
  1432 00000028 0000                    bloco_cima_quebrado2	dw		0
  1433 0000002A 0000                    bloco_cima_quebrado3	dw		0
  1434 0000002C 0000                    bloco_cima_quebrado4	dw		0
  1435 0000002E 0000                    bloco_cima_quebrado5	dw		0
  1436 00000030 0000                    bloco_cima_quebrado6	dw		0
  1437                                  
  1438 00000032 0000                    pontuacao				dw		0
  1439                                  
  1440 00000034 0000                    yToDelete1		dw		0
  1441 00000036 0000                    yToDelete2		dw		0
  1442                                  
  1443 00000038 0500                    vx      		dw      5	;Velocidade que a bola anda
  1444 0000003A 0500                    vy      		dw      5
  1445 0000003C 47414D45204F564552-     mens_3      	db          'GAME OVER. Deseja continuar? Y ou N'
  1446 00000045 2E20446573656A6120-
  1447 0000004E 636F6E74696E756172-
  1448 00000057 3F2059206F75204E   
  1449 0000005F 46494D204445204A4F-     mens_4      	db          'FIM DE JOGO. Aperte Q para sair'
  1450 00000068 474F2E204170657274-
  1451 00000071 652051207061726120-
  1452 0000007A 73616972           
  1453                                  
  1454                                  ;*************************************************************************
  1455                                  segment stack stack
  1456 00000000 <res 00000200>              		resb 		512
  1457                                  stacktop:
