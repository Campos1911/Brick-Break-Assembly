     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0500]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  reset_game:
    21                                  ; Desenhando o campo (bordas brancas)
    22 0000001A C606[0000]0F            		mov		byte[cor],branco_intenso
    23 0000001F B80000                  		mov		ax, 0
    24 00000022 50                      		push 	ax
    25 00000023 B80000                  		mov		ax, 0
    26 00000026 50                      		push	ax
    27 00000027 B80000                  		mov		ax, 0
    28 0000002A 50                      		push 	ax
    29 0000002B B8DF01                  		mov		ax, 479
    30 0000002E 50                      		push	ax
    31 0000002F E89506                  		call	line
    32                                  
    33 00000032 B80000                  		mov		ax, 0
    34 00000035 50                      		push 	ax
    35 00000036 B8DF01                  		mov		ax, 479
    36 00000039 50                      		push	ax
    37 0000003A B87F02                  		mov		ax, 639
    38 0000003D 50                      		push 	ax
    39 0000003E B8DF01                  		mov		ax, 479
    40 00000041 50                      		push	ax
    41 00000042 E88206                  		call	line
    42                                  		
    43 00000045 B87F02                  		mov		ax, 639
    44 00000048 50                      		push 	ax
    45 00000049 B8DF01                  		mov		ax, 479
    46 0000004C 50                      		push	ax
    47 0000004D B87F02                  		mov		ax, 639
    48 00000050 50                      		push 	ax
    49 00000051 B80000                  		mov		ax, 0
    50 00000054 50                      		push	ax
    51 00000055 E86F06                  		call	line
    52                                  
    53                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    54 00000058 B90600                  		mov		cx, 6
    55 0000005B C606[0000]01            		mov		byte[cor], azul
    56                                  	
    57                                  ; Primeira linha de quadrados (linha superior)
    58                                  fazQuadrado1:
    59 00000060 FE06[0000]              		inc		byte[cor]
    60 00000064 A1[0600]                		mov		ax, word[x1A]
    61 00000067 50                      		push 	ax
    62 00000068 B8DD01                  		mov		ax, 477
    63 0000006B 50                      		push	ax
    64 0000006C A1[0800]                		mov		ax, word[x2A]
    65 0000006F 50                      		push 	ax
    66 00000070 B8DD01                  		mov		ax, 477
    67 00000073 50                      		push	ax
    68 00000074 E85006                  		call	line
    69                                  		
    70 00000077 A1[0800]                		mov		ax, word[x2A]
    71 0000007A 50                      		push 	ax
    72 0000007B B8DD01                  		mov		ax, 477
    73 0000007E 50                      		push	ax
    74 0000007F A1[0800]                		mov		ax, word[x2A]
    75 00000082 50                      		push 	ax
    76 00000083 B8B501                  		mov		ax, 437
    77 00000086 50                      		push	ax
    78 00000087 E83D06                  		call	line
    79                                  		
    80 0000008A A1[0800]                		mov		ax, word[x2A]
    81 0000008D 50                      		push 	ax
    82 0000008E B8B501                  		mov		ax, 437
    83 00000091 50                      		push	ax
    84 00000092 A1[0600]                		mov		ax, word[x1A]
    85 00000095 50                      		push 	ax
    86 00000096 B8B501                  		mov		ax, 437
    87 00000099 50                      		push	ax
    88 0000009A E82A06                  		call	line
    89                                  		
    90 0000009D A1[0600]                		mov		ax, word[x1A]
    91 000000A0 50                      		push 	ax
    92 000000A1 B8B501                  		mov		ax, 437
    93 000000A4 50                      		push	ax
    94 000000A5 A1[0600]                		mov		ax, word[x1A]
    95 000000A8 50                      		push 	ax
    96 000000A9 B8DD01                  		mov		ax, 477
    97 000000AC 50                      		push	ax
    98 000000AD E81706                  		call	line
    99 000000B0 8106[0800]6900          		add		word[x2A], 105
   100 000000B6 8106[0600]6900          		add		word[x1A] , 105
   101 000000BC E2A2                    		loop 	fazQuadrado1
   102                                  		
   103                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   104 000000BE B90600                  		mov		cx, 6
   105 000000C1 C606[0000]08            		mov		byte[cor], cinza
   106                                  		
   107                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   108 000000C6 FE06[0000]              		inc		byte[cor]
   109 000000CA A1[0A00]                		mov		ax, word[x1B]
   110 000000CD 50                      		push 	ax
   111 000000CE B8AB01                  		mov		ax, 427
   112 000000D1 50                      		push	ax
   113 000000D2 A1[0C00]                		mov		ax, word[x2B]
   114 000000D5 50                      		push 	ax
   115 000000D6 B8AB01                  		mov		ax, 427
   116 000000D9 50                      		push	ax
   117 000000DA E8EA05                  		call	line
   118                                  		
   119 000000DD A1[0C00]                		mov		ax, word[x2B]
   120 000000E0 50                      		push 	ax
   121 000000E1 B8AB01                  		mov		ax, 427
   122 000000E4 50                      		push	ax
   123 000000E5 A1[0C00]                		mov		ax, word[x2B]
   124 000000E8 50                      		push 	ax
   125 000000E9 B88301                  		mov		ax, 387
   126 000000EC 50                      		push	ax
   127 000000ED E8D705                  		call	line
   128                                  		
   129 000000F0 A1[0C00]                		mov		ax, word[x2B]
   130 000000F3 50                      		push 	ax
   131 000000F4 B88301                  		mov		ax, 387
   132 000000F7 50                      		push	ax
   133 000000F8 A1[0A00]                		mov		ax, word[x1B]
   134 000000FB 50                      		push 	ax
   135 000000FC B88301                  		mov		ax, 387
   136 000000FF 50                      		push	ax
   137 00000100 E8C405                  		call	line
   138                                  		
   139 00000103 A1[0A00]                		mov		ax, word[x1B]
   140 00000106 50                      		push 	ax
   141 00000107 B88301                  		mov		ax, 387
   142 0000010A 50                      		push	ax
   143 0000010B A1[0A00]                		mov		ax, word[x1B]
   144 0000010E 50                      		push 	ax
   145 0000010F B8AB01                  		mov		ax, 427
   146 00000112 50                      		push	ax
   147 00000113 E8B105                  		call	line
   148 00000116 8106[0C00]6900          		add		word[x2B], 105
   149 0000011C 8106[0A00]6900          		add		word[x1B] , 105
   150 00000122 E2A2                    		loop 	fazQuadrado2
   151                                  
   152                                  
   153                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   154                                  
   155                                  continua:
   156 00000124 E89100                      	call limpa_bola
   157                                  
   158 00000127 8B1E[2A00]                      mov bx, [vx]
   159 0000012B 011E[1600]                      add [px], bx
   160 0000012F 8B1E[2C00]                      mov bx, [vy]
   161 00000133 011E[1800]                      add [py], bx
   162                                  
   163 00000137 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   164 0000013C A1[1600]                		mov		ax,[px]
   165 0000013F 50                      		push		ax
   166 00000140 A1[1800]                		mov		ax,[py]
   167 00000143 50                      		push		ax
   168 00000144 B81000                  		mov		ax,16
   169 00000147 50                      		push		ax
   170 00000148 E8BF04                  		call	full_circle
   171                                  
   172 0000014B A1[1200]                		mov		ax, [player_x1] ; Desenhando a raquete
   173 0000014E 50                      		push 	ax
   174 0000014F B80A00                  		mov		ax, 10
   175 00000152 50                      		push	ax
   176 00000153 A1[1400]                		mov		ax, [player_x2]
   177 00000156 50                      		push 	ax
   178 00000157 B80A00                  		mov		ax, 10
   179 0000015A 50                      		push	ax
   180 0000015B E86905                  		call	line
   181                                  
   182 0000015E 59                              pop cx ; Recupera cx da pilha
   183 0000015F E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   184 00000161 E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   185 00000163 C3                              ret
   186                                  
   187                                  del2:
   188 00000164 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   189 00000165 B90008                          mov cx, 0800h ; Teste modificando este valor
   190                                  
   191                                  del1:
   192 00000168 BB6702                          mov bx, 615 ;Limita o campo na parte da direita
   193 0000016B 391E[1600]                      cmp [px], bx
   194 0000016F 7D5C                            jge moveesquerda
   195                                  
   196 00000171 BB1400                          mov bx, 20 ; Limita o campo na parte da esquerda
   197 00000174 391E[1600]                      cmp [px], bx
   198 00000178 7E64                            jle movedireita
   199                                  
   200 0000017A BB6C01                          mov bx, 364 ; Limita o campo na parte de cima
   201 0000017D C706[2600]AB01          		mov	word[yToDelete1], 427
   202 00000183 C706[2800]8301          		mov	word[yToDelete2], 387
   203 00000189 391E[1800]                      cmp [py], bx
   204 0000018D 7D77                    		jge movebaixo
   205                                  
   206                                  sobe_mais:
   207 0000018F BB9E01                  		mov	bx, 414
   208 00000192 391E[1800]              		cmp	[py], bx
   209 00000196 7D57                    		jge	intermediateNaoApaga
   210                                  
   211 00000198 BB0A00                          mov bx, 10 ; Limita o campo na parte de baixo
   212 0000019B 391E[1800]                      cmp [py], bx
   213 0000019F 7E54                            jle movecima
   214                                  
   215 000001A1 B40B                            mov ah, 0bh      
   216 000001A3 CD21                            int 21h
   217 000001A5 3C00                            cmp al,0
   218 000001A7 7549                            jne intermediateVerifTeclas
   219 000001A9 E86902                  		call calcular_colisao_raquete
   220 000001AC E975FF                          jmp continua
   221                                  
   222 000001AF E872FF                  		call delay
   223 000001B2 E8B3FF                  		call del1
   224 000001B5 E8ACFF                  		call del2
   225                                  
   226                                  limpa_bola:
   227 000001B8 C606[0000]00                    mov     byte[cor],preto ; limpa bola
   228 000001BD A1[1600]                        mov     ax,[px]
   229 000001C0 50                              push        ax
   230 000001C1 A1[1800]                        mov     ax,[py]
   231 000001C4 50                              push        ax
   232 000001C5 B81400                          mov     ax,20
   233 000001C8 50                              push        ax
   234 000001C9 E83E04                          call    full_circle
   235 000001CC C3                              ret
   236                                  
   237                                  moveesquerda:
   238 000001CD E8E8FF                          call limpa_bola
   239 000001D0 A1[2A00]                		mov ax, [vx]
   240 000001D3 F7D8                            neg ax
   241 000001D5 89C3                            mov bx, ax
   242 000001D7 891E[2A00]                      mov [vx], bx
   243 000001DB E946FF                          jmp continua
   244                                  
   245                                  movedireita:
   246 000001DE E8D7FF                  		call limpa_bola
   247 000001E1 A1[2A00]                        mov ax, [vx]
   248 000001E4 F7D8                            neg ax
   249 000001E6 89C3                            mov bx, ax
   250 000001E8 891E[2A00]                      mov [vx], bx
   251 000001EC E935FF                          jmp continua
   252                                  
   253                                  intermediateNaoApaga
   254 000001EF E99D01                  	jmp	nao_apaga
   255                                  
   256                                  intermediateVerifTeclas: ;	Função intermediária para pular para outra parte do código
   257 000001F2 E9B401                  	jmp verificar_teclas
   258                                  
   259                                  movecima:
   260 000001F5 A1[2C00]                        mov ax, [vy]
   261 000001F8 F7D8                            neg ax
   262 000001FA 89C3                            mov bx, ax
   263 000001FC 891E[2C00]                      mov [vy], bx
   264 00000200 E921FF                          jmp continua
   265                                  
   266                                  intermediateSobeMais:
   267 00000203 E989FF                  	jmp	sobe_mais
   268                                  
   269                                  ; NA PARTE DE DEVOLVER A BOLA PARA BAIXO, É FEITA A VERIFICAÇÃO DA COLISÃO COM UM QUADRADO
   270                                  movebaixo:
   271 00000206 B80500                  		mov ax, 5 ; Quadrado 1
   272 00000209 3906[1600]              		cmp [px], ax
   273 0000020D 7D2D                    		jge	verifica_quad1 ; Pula para verificar se acertou no limite do quadrado (todos repetem essa lógica)
   274                                  volta1:
   275 0000020F B86E00                  		mov ax, 110 ; Quadrado 2
   276 00000212 3906[1600]              		cmp [px], ax
   277 00000216 7D4E                    		jge	verifica_quad2
   278                                  volta2:
   279 00000218 B8D700                  		mov ax, 215 ; Quadrado 3
   280 0000021B 3906[1600]              		cmp [px], ax
   281 0000021F 7D7E                    		jge	verifica_quad3
   282                                  volta3:
   283 00000221 B84001                  		mov ax, 320 ; Quadrado 4
   284 00000224 3906[1600]              		cmp [px], ax
   285 00000228 7D6C                    		jge	intermediateVerificaQuad4
   286                                  volta4:
   287 0000022A B8A901                  		mov ax, 425 ; Quadrado 5
   288 0000022D 3906[1600]              		cmp [px], ax
   289 00000231 7D66                    		jge	intermediateVerificaQuad5
   290                                  volta5:
   291 00000233 B81202                  		mov ax, 530 ; Quadrado 6
   292 00000236 3906[1600]              		cmp [px], ax
   293 0000023A 7D60                    		jge	intermediateVerificaQuad6
   294                                  
   295                                  
   296                                  verifica_quad1:
   297 0000023C B86900                  		mov ax, 105
   298 0000023F 3906[1600]              		cmp	[px], ax
   299 00000243 7FCA                    		jg volta1 ; Se não acertou, volta para verificar o próximo quadrado
   300 00000245 B80100                  		mov	ax, 1
   301 00000248 3B06[1A00]              		cmp ax, word[bloco_quebrado1]
   302 0000024C 74B5                    		je	intermediateSobeMais
   303 0000024E C706[0E00]0500          		mov word[apaga1], 5
   304 00000254 C706[1000]6900          		mov word[apaga2], 105
   305 0000025A B80100                  		mov	ax, 1
   306 0000025D A3[1A00]                		mov	word[bloco_quebrado1], ax
   307 00000260 E9DB00                  		jmp	apaga_quad ; Se acertou no limite, apaga o quadrado e rebate a bola
   308                                  
   309                                  intermediateSobeMais2:
   310 00000263 E99DFF                  	jmp intermediateSobeMais
   311                                  
   312                                  verifica_quad2:
   313 00000266 B8D200                  		mov ax, 210
   314 00000269 3906[1600]              		cmp	[px], ax
   315 0000026D 7FA9                    		jg volta2
   316 0000026F B80100                  		mov	ax, 1
   317 00000272 3B06[1C00]              		cmp ax, [bloco_quebrado2]
   318 00000276 748B                    		je	intermediateSobeMais
   319 00000278 C706[0E00]6E00          		mov word[apaga1], 110
   320 0000027E C706[1000]D200          		mov word[apaga2], 210
   321 00000284 B80100                  		mov ax, 1
   322 00000287 A3[1C00]                		mov	word[bloco_quebrado2], ax
   323 0000028A E9B100                  		jmp	apaga_quad
   324                                  nas
   325                                  ;	Funções intermediárias para resolver o 'short jump'
   326                                  intermediateVolta4:
   327 0000028D E99AFF                  	jmp	volta4
   328                                  
   329                                  intermediateVolta3:
   330 00000290 E98EFF                  	jmp	volta3
   331                                  
   332                                  intermediateVolta5:
   333 00000293 E99DFF                  	jmp	volta5
   334                                  
   335                                  intermediateVerificaQuad4:
   336 00000296 E93000                  	jmp verifica_quad4
   337                                  
   338                                  intermediateVerificaQuad5:
   339 00000299 E95400                  	jmp verifica_quad5
   340                                  
   341                                  intermediateVerificaQuad6:
   342 0000029C E97800                  	jmp verifica_quad6
   343                                  
   344                                  
   345                                  verifica_quad3:
   346 0000029F B83B01                  		mov ax, 315
   347 000002A2 3906[1600]              		cmp	[px], ax
   348 000002A6 7DE8                    		jge intermediateVolta3
   349 000002A8 B80100                  		mov	ax, 1
   350 000002AB 3B06[1E00]              		cmp ax, [bloco_quebrado3]
   351 000002AF 74B2                    		je	intermediateSobeMais2
   352 000002B1 C706[0E00]D700          		mov word[apaga1], 215
   353 000002B7 C706[1000]3B01          		mov word[apaga2], 315
   354 000002BD B80100                  		mov	ax, 1
   355 000002C0 A3[1E00]                		mov	word[bloco_quebrado3], ax
   356 000002C3 E97800                  		jmp	apaga_quad
   357                                  
   358                                  intermediateSobeMais3
   359 000002C6 E99AFF                  	jmp intermediateSobeMais2
   360                                  
   361                                  verifica_quad4:
   362 000002C9 B8A401                  		mov ax, 420
   363 000002CC 3906[1600]              		cmp	[px], ax
   364 000002D0 7DBB                    		jge intermediateVolta4
   365 000002D2 B80100                  		mov	ax, 1
   366 000002D5 3B06[2000]              		cmp ax, [bloco_quebrado4]
   367 000002D9 7488                    		je	intermediateSobeMais2
   368 000002DB C706[0E00]4001          		mov word[apaga1], 320
   369 000002E1 C706[1000]A401          		mov word[apaga2], 420
   370 000002E7 B80100                  		mov	ax, 1
   371 000002EA A3[2000]                		mov	word[bloco_quebrado4], ax
   372 000002ED E94E00                  		jmp	apaga_quad
   373                                  
   374                                  verifica_quad5:
   375 000002F0 B80D02                  		mov ax, 525
   376 000002F3 3906[1600]              		cmp	[px], ax
   377 000002F7 7D9A                    		jge intermediateVolta5
   378 000002F9 B80100                  		mov	ax, 1
   379 000002FC 3B06[2200]              		cmp ax, [bloco_quebrado5]
   380 00000300 74C4                    		je	intermediateSobeMais3
   381 00000302 C706[0E00]A901          		mov word[apaga1], 425
   382 00000308 C706[1000]0D02          		mov word[apaga2], 525
   383 0000030E B80100                  		mov	ax, 1
   384 00000311 A3[2200]                		mov	word[bloco_quebrado5], ax
   385 00000314 E92700                  		jmp	apaga_quad
   386                                  
   387                                  verifica_quad6:
   388 00000317 B87602                  		mov ax, 630
   389 0000031A 3906[1600]              		cmp	[px], ax
   390 0000031E 7D6F                    		jge nao_apaga
   391 00000320 B80100                  		mov	ax, 1
   392 00000323 3B06[2400]              		cmp ax, [bloco_quebrado6]
   393 00000327 749D                    		je	intermediateSobeMais3
   394 00000329 C706[0E00]1202          		mov word[apaga1], 530
   395 0000032F C706[1000]7602          		mov word[apaga2], 630
   396 00000335 B80100                  		mov	ax, 1
   397 00000338 A3[2400]                		mov	word[bloco_quebrado6], ax
   398 0000033B E90000                  		jmp	apaga_quad
   399                                  
   400                                  
   401                                  apaga_quad:
   402 0000033E C606[0000]00            		mov		byte[cor], preto
   403 00000343 A1[0E00]                		mov		ax, word[apaga1]
   404 00000346 50                      		push 	ax
   405 00000347 A1[2600]                		mov		ax, word[yToDelete1]
   406 0000034A 50                      		push	ax
   407 0000034B A1[1000]                		mov		ax, word[apaga2]
   408 0000034E 50                      		push 	ax
   409 0000034F A1[2600]                		mov		ax, word[yToDelete1]
   410 00000352 50                      		push	ax
   411 00000353 E87103                  		call	line
   412                                  		
   413 00000356 A1[1000]                		mov		ax, word[apaga2]
   414 00000359 50                      		push 	ax
   415 0000035A A1[2600]                		mov		ax, word[yToDelete1]
   416 0000035D 50                      		push	ax
   417 0000035E A1[1000]                		mov		ax, word[apaga2]
   418 00000361 50                      		push 	ax
   419 00000362 A1[2800]                		mov		ax, word[yToDelete2]
   420 00000365 50                      		push	ax
   421 00000366 E85E03                  		call	line
   422                                  		
   423 00000369 A1[1000]                		mov		ax, word[apaga2]
   424 0000036C 50                      		push 	ax
   425 0000036D A1[2800]                		mov		ax, word[yToDelete2]
   426 00000370 50                      		push	ax
   427 00000371 A1[0E00]                		mov		ax, word[apaga1]
   428 00000374 50                      		push 	ax
   429 00000375 A1[2800]                		mov		ax, word[yToDelete2]
   430 00000378 50                      		push	ax
   431 00000379 E84B03                  		call	line
   432                                  		
   433 0000037C A1[0E00]                		mov		ax, word[apaga1]
   434 0000037F 50                      		push 	ax
   435 00000380 A1[2800]                		mov		ax, word[yToDelete2]
   436 00000383 50                      		push	ax
   437 00000384 A1[0E00]                		mov		ax, word[apaga1]
   438 00000387 50                      		push 	ax
   439 00000388 A1[2600]                		mov		ax, word[yToDelete1]
   440 0000038B 50                      		push	ax
   441 0000038C E83803                  		call	line
   442                                  
   443                                  nao_apaga:
   444 0000038F A1[2C00]                        mov ax, [vy]
   445 00000392 F7D8                            neg ax
   446 00000394 89C3                            mov bx, ax
   447 00000396 891E[2C00]                      mov [vy], bx
   448 0000039A E987FD                          jmp continua
   449                                  
   450                                  sai:
   451 0000039D B400                            mov ah,0 ; set video mode
   452 0000039F A0[0500]                        mov al,[modo_anterior] ; recupera o modo anterior
   453 000003A2 CD10                            int 10h
   454 000003A4 B8004C                          mov ax,4c00h
   455 000003A7 CD21                            int 21h
   456                                  		
   457                                  
   458                                  verificar_teclas: ;Estrutura para decidir o que será feito durante o jogo
   459 000003A9 55                              push bp
   460 000003AA 89E5                            mov bp, sp
   461 000003AC B408                            mov ah, 08h
   462 000003AE CD21                            int 21h
   463 000003B0 3C70                    		cmp al, 70h ; Código ASCII para a tecla 'p'
   464 000003B2 742B                    		je	pausa
   465 000003B4 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   466 000003B6 74E5                            je sai
   467 000003B8 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   468 000003BA 752E                            jne verificar_baixo
   469 000003BC E8B500                          call limpa_raquete ;Se 'd' não for pressionado, ele pula para baixo e mexe a raquete
   470 000003BF B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   471 000003C2 BB7602                          mov bx, 630 ;testa se já chegou no limite
   472 000003C5 391E[1400]                      cmp [player_x2], bx
   473 000003C9 7D46                            jge fim_verificar_teclas
   474 000003CB 0306[1200]                      add ax, [player_x1]
   475 000003CF A3[1200]                        mov [player_x1], ax
   476 000003D2 B81400                          mov ax, 20
   477 000003D5 0306[1400]                      add ax, [player_x2]
   478 000003D9 A3[1400]                        mov [player_x2], ax
   479 000003DC E93200                          jmp fim_verificar_teclas
   480                                  
   481                                  
   482                                  pausa:
   483 000003DF B408                            mov ah, 08h
   484 000003E1 CD21                            int 21h
   485 000003E3 3C70                    		cmp al, 70h ;Compara a tecla com a letra 'p', fica parado aqui até apertar 'p' novamente
   486 000003E5 75F8                    		jne pausa
   487 000003E7 E93AFD                  		jmp continua
   488                                  
   489                                  verificar_baixo:
   490 000003EA 3C61                            cmp al, 61h
   491 000003EC 7523                            jne fim_verificar_teclas
   492 000003EE E88300                          call limpa_raquete
   493 000003F1 B8ECFF                          mov ax, -20
   494 000003F4 BB0A00                          mov bx, 10
   495 000003F7 391E[1200]                      cmp [player_x1], bx
   496 000003FB 7E14                            jle fim_verificar_teclas
   497 000003FD 0306[1200]                      add ax, [player_x1]
   498 00000401 A3[1200]                        mov [player_x1], ax
   499 00000404 B8ECFF                          mov ax, -20
   500 00000407 0306[1400]                      add ax, [player_x2]
   501 0000040B A3[1400]                        mov [player_x2], ax
   502 0000040E E90000                          jmp fim_verificar_teclas
   503                                  
   504                                  fim_verificar_teclas:
   505 00000411 5D                              pop bp
   506 00000412 E90FFD                          jmp continua
   507                                  
   508                                  calcular_colisao_raquete:
   509 00000415 B81E00                          mov ax, 30
   510 00000418 3906[1800]                      cmp [py], ax
   511 0000041C 7403                            je verifica_colisao_raquete
   512 0000041E 7C6D                    		jl game_over
   513 00000420 C3                              ret
   514                                  
   515                                  verifica_colisao_raquete:
   516 00000421 8B1E[1400]                      mov bx, [player_x2]
   517 00000425 81C31000                        add bx, 16
   518 00000429 391E[1600]                      cmp [px], bx
   519 0000042D 7E0F                            jle rebate_cima1
   520 0000042F 8B1E[1200]                      mov bx, [player_x1]
   521 00000433 81EB1000                        sub bx, 16
   522 00000437 391E[1600]                      cmp [px], bx
   523 0000043B 7D1C                            jge rebate_baixo1
   524 0000043D C3                              ret
   525                                  
   526                                  ;FUNÇÕES RESPONSÁVEIS POR REBATER A BOLA E ALTERAR A DIREÇÃO (ESQUERDA OU DIREITA)
   527                                  rebate_cima1:
   528 0000043E 8B1E[1200]              		mov bx, [player_x1]
   529 00000442 81EB1000                		sub bx, 16
   530 00000446 391E[1600]              		cmp [px], bx
   531 0000044A 7D01                    		jge rebate_cima2
   532 0000044C C3                              ret
   533                                  
   534                                  rebate_cima2:
   535 0000044D A1[2C00]                        mov ax, [vy]
   536 00000450 F7D8                            neg ax
   537 00000452 89C3                            mov bx, ax
   538 00000454 891E[2C00]              		mov [vy], bx
   539 00000458 C3                              ret
   540                                  
   541                                  rebate_baixo1:
   542 00000459 8B1E[1400]                      mov bx, [player_x2]
   543 0000045D 81C31000                        add bx, 16
   544 00000461 391E[1600]                      cmp [px], bx
   545 00000465 7E01                            jle rebate_baixo2
   546 00000467 C3                              ret
   547                                  
   548                                  rebate_baixo2:
   549 00000468 A1[2C00]                        mov ax, [vy]
   550 0000046B F7D8                            neg ax
   551 0000046D 89C3                            mov bx, ax
   552 0000046F 891E[2C00]                      mov [vy], bx
   553 00000473 C3                              ret
   554                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   555                                  
   556                                  limpa_raquete: ;FUNÇÃO UTILIZADA PARA ATUALIZAR A POSIÇÃO DA RAQUETE 
   557 00000474 C606[0000]00                    mov     byte[cor], preto
   558 00000479 A1[1200]                        mov     ax,[player_x1]
   559 0000047C 50                              push    ax
   560 0000047D B80A00                          mov     ax,10
   561 00000480 50                              push    ax
   562 00000481 A1[1400]                        mov     ax,[player_x2]
   563 00000484 50                              push    ax
   564 00000485 B80A00                          mov     ax,10
   565 00000488 50                              push    ax
   566 00000489 E83B02                          call    line
   567 0000048C C3                              ret
   568                                  
   569                                  game_over: ;;Escreve a mensagem na tela e espera a tecla do jogador
   570 0000048D B92300                  		mov     	cx,35			;número de caracteres
   571 00000490 BB0000                      	mov     	bx,0
   572 00000493 B60A                        	mov     	dh,10			
   573 00000495 B20A                        	mov     	dl,10
   574 00000497 C606[0000]0F            		mov		byte[cor],branco_intenso
   575                                  
   576                                  repete_para_escrever:
   577 0000049C E83100                  		call	cursor
   578 0000049F 8A87[2E00]                  	mov     al,[bx+mens_3]
   579 000004A3 E84100                  		call	caracter
   580 000004A6 43                          	inc     bx			;proximo caracter
   581 000004A7 FEC2                    		inc		dl			;avanca a coluna
   582 000004A9 E2F1                        	loop    repete_para_escrever
   583                                  
   584                                  verfica_continua_ou_nao:
   585 000004AB 55                      		push bp
   586 000004AC 89E5                            mov bp, sp
   587                                  
   588 000004AE B408                    		mov ah, 08h
   589 000004B0 CD21                            int 21h
   590 000004B2 3C6E                    		cmp al, 6eh
   591 000004B4 7407                    		je	acaba
   592 000004B6 3C79                    		cmp al, 79h
   593 000004B8 7413                    		je limpa_tudo
   594 000004BA E9EEFF                  		jmp	verfica_continua_ou_nao
   595                                  
   596                                  acaba: ;Finalizando o programa
   597 000004BD B408                    		mov    	ah,08h
   598 000004BF CD21                    		int     21h
   599 000004C1 B400                    	    mov  	ah,0   					; set video mode
   600 000004C3 A0[0500]                	    mov  	al,[modo_anterior]   	; modo anterior
   601 000004C6 CD10                    	    int  	10h
   602 000004C8 B8004C                  		mov     ax,4c00h
   603 000004CB CD21                    		int     21h
   604                                  
   605                                  limpa_tudo: ;FUNÇÃO PARA LIMPAR O CAMPO TODO E VOLTAR PARA O ZERO
   606 000004CD E84AFB                  	call reset_game
   607                                  
   608                                  ;***************************************************************************
   609                                  ;
   610                                  ;   função cursor
   611                                  ;
   612                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   613                                  cursor:
   614 000004D0 9C                      		pushf
   615 000004D1 50                      		push 		ax
   616 000004D2 53                      		push 		bx
   617 000004D3 51                      		push		cx
   618 000004D4 52                      		push		dx
   619 000004D5 56                      		push		si
   620 000004D6 57                      		push		di
   621 000004D7 55                      		push		bp
   622 000004D8 B402                    		mov     	ah,2
   623 000004DA B700                    		mov     	bh,0
   624 000004DC CD10                    		int     	10h
   625 000004DE 5D                      		pop		bp
   626 000004DF 5F                      		pop		di
   627 000004E0 5E                      		pop		si
   628 000004E1 5A                      		pop		dx
   629 000004E2 59                      		pop		cx
   630 000004E3 5B                      		pop		bx
   631 000004E4 58                      		pop		ax
   632 000004E5 9D                      		popf
   633 000004E6 C3                      		ret
   634                                  ;_____________________________________________________________________________
   635                                  ;
   636                                  ;   fun��o caracter escrito na posi��o do cursor
   637                                  ;
   638                                  ; al= caracter a ser escrito
   639                                  ; cor definida na variavel cor
   640                                  caracter:
   641 000004E7 9C                      		pushf
   642 000004E8 50                      		push 		ax
   643 000004E9 53                      		push 		bx
   644 000004EA 51                      		push		cx
   645 000004EB 52                      		push		dx
   646 000004EC 56                      		push		si
   647 000004ED 57                      		push		di
   648 000004EE 55                      		push		bp
   649 000004EF B409                        	mov     	ah,9
   650 000004F1 B700                        	mov     	bh,0
   651 000004F3 B90100                      	mov     	cx,1
   652 000004F6 8A1E[0000]                 		mov     	bl,[cor]
   653 000004FA CD10                        	int     	10h
   654 000004FC 5D                      		pop			bp
   655 000004FD 5F                      		pop			di
   656 000004FE 5E                      		pop			si
   657 000004FF 5A                      		pop			dx
   658 00000500 59                      		pop			cx
   659 00000501 5B                      		pop			bx
   660 00000502 58                      		pop			ax
   661 00000503 9D                      		popf
   662 00000504 C3                      		ret
   663                                  ;_____________________________________________________________________________
   664                                  ;
   665                                  ;   fun��o plot_xy
   666                                  ;
   667                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   668                                  ; cor definida na variavel cor
   669                                  plot_xy:
   670 00000505 55                      		push		bp
   671 00000506 89E5                    		mov			bp,sp
   672 00000508 9C                      		pushf
   673 00000509 50                      		push 		ax
   674 0000050A 53                      		push 		bx
   675 0000050B 51                      		push		cx
   676 0000050C 52                      		push		dx
   677 0000050D 56                      		push		si
   678 0000050E 57                      		push		di
   679 0000050F B40C                    	    mov     	ah,0ch
   680 00000511 A0[0000]                	    mov     	al,[cor]
   681 00000514 B700                    	    mov     	bh,0
   682 00000516 BADF01                  	    mov     	dx,479
   683 00000519 2B5604                  		sub			dx,[bp+4]
   684 0000051C 8B4E06                  	    mov     	cx,[bp+6]
   685 0000051F CD10                    	    int     	10h
   686 00000521 5F                      		pop			di
   687 00000522 5E                      		pop			si
   688 00000523 5A                      		pop			dx
   689 00000524 59                      		pop			cx
   690 00000525 5B                      		pop			bx
   691 00000526 58                      		pop			ax
   692 00000527 9D                      		popf	
   693 00000528 5D                      		pop			bp
   694 00000529 C20400                  		ret			4
   695                                  ;_____________________________________________________________________________
   696                                  ;    fun��o circle
   697                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   698                                  ; cor definida na variavel cor
   699                                  circle:
   700 0000052C 55                      		push 	bp
   701 0000052D 89E5                    		mov	 	bp,sp
   702 0000052F 9C                      		pushf                        ;coloca os flags na pilha
   703 00000530 50                      		push 	ax
   704 00000531 53                      		push 	bx
   705 00000532 51                      		push	cx
   706 00000533 52                      		push	dx
   707 00000534 56                      		push	si
   708 00000535 57                      		push	di
   709                                  		
   710 00000536 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   711 00000539 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   712 0000053C 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   713                                  		
   714 0000053F 89DA                    		mov 	dx,bx	
   715 00000541 01CA                    		add		dx,cx       ;ponto extremo superior
   716 00000543 50                      		push    ax			
   717 00000544 52                      		push	dx
   718 00000545 E8BDFF                  		call plot_xy
   719                                  		
   720 00000548 89DA                    		mov		dx,bx
   721 0000054A 29CA                    		sub		dx,cx       ;ponto extremo inferior
   722 0000054C 50                      		push    ax			
   723 0000054D 52                      		push	dx
   724 0000054E E8B4FF                  		call plot_xy
   725                                  		
   726 00000551 89C2                    		mov 	dx,ax	
   727 00000553 01CA                    		add		dx,cx       ;ponto extremo direita
   728 00000555 52                      		push    dx			
   729 00000556 53                      		push	bx
   730 00000557 E8ABFF                  		call plot_xy
   731                                  		
   732 0000055A 89C2                    		mov		dx,ax
   733 0000055C 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   734 0000055E 52                      		push    dx			
   735 0000055F 53                      		push	bx
   736 00000560 E8A2FF                  		call plot_xy
   737                                  			
   738 00000563 89CF                    		mov		di,cx
   739 00000565 81EF0100                		sub		di,1	 ;di=r-1
   740 00000569 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   741                                  		
   742                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   743                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   744                                  ;valores positivos para d
   745                                  
   746                                  stay:				;loop
   747 0000056C 89FE                    		mov		si,di
   748 0000056E 81FE0000                		cmp		si,0
   749 00000572 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   750 00000574 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   751 00000576 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   752 00000578 81C60300                		add		si,3
   753 0000057C 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   754 0000057E 42                      		inc		dx		;incrementa dx
   755 0000057F E90E00                  		jmp		plotar
   756                                  inf:	
   757 00000582 89D6                    		mov		si,dx
   758 00000584 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   759 00000586 D1E6                    		sal		si,1
   760 00000588 81C60500                		add		si,5
   761 0000058C 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   762 0000058E 42                      		inc		dx		;incrementa x (dx)
   763 0000058F 49                      		dec		cx		;decrementa y (cx)
   764                                  	
   765                                  plotar:	
   766 00000590 89D6                    		mov		si,dx
   767 00000592 01C6                    		add		si,ax
   768 00000594 56                      		push    si			;coloca a abcisa x+xc na pilha
   769 00000595 89CE                    		mov		si,cx
   770 00000597 01DE                    		add		si,bx
   771 00000599 56                      		push    si			;coloca a ordenada y+yc na pilha
   772 0000059A E868FF                  		call plot_xy		;toma conta do segundo octante
   773 0000059D 89C6                    		mov		si,ax
   774 0000059F 01D6                    		add		si,dx
   775 000005A1 56                      		push    si			;coloca a abcisa xc+x na pilha
   776 000005A2 89DE                    		mov		si,bx
   777 000005A4 29CE                    		sub		si,cx
   778 000005A6 56                      		push    si			;coloca a ordenada yc-y na pilha
   779 000005A7 E85BFF                  		call plot_xy		;toma conta do s�timo octante
   780 000005AA 89C6                    		mov		si,ax
   781 000005AC 01CE                    		add		si,cx
   782 000005AE 56                      		push    si			;coloca a abcisa xc+y na pilha
   783 000005AF 89DE                    		mov		si,bx
   784 000005B1 01D6                    		add		si,dx
   785 000005B3 56                      		push    si			;coloca a ordenada yc+x na pilha
   786 000005B4 E84EFF                  		call plot_xy		;toma conta do segundo octante
   787 000005B7 89C6                    		mov		si,ax
   788 000005B9 01CE                    		add		si,cx
   789 000005BB 56                      		push    si			;coloca a abcisa xc+y na pilha
   790 000005BC 89DE                    		mov		si,bx
   791 000005BE 29D6                    		sub		si,dx
   792 000005C0 56                      		push    si			;coloca a ordenada yc-x na pilha
   793 000005C1 E841FF                  		call plot_xy		;toma conta do oitavo octante
   794 000005C4 89C6                    		mov		si,ax
   795 000005C6 29D6                    		sub		si,dx
   796 000005C8 56                      		push    si			;coloca a abcisa xc-x na pilha
   797 000005C9 89DE                    		mov		si,bx
   798 000005CB 01CE                    		add		si,cx
   799 000005CD 56                      		push    si			;coloca a ordenada yc+y na pilha
   800 000005CE E834FF                  		call plot_xy		;toma conta do terceiro octante
   801 000005D1 89C6                    		mov		si,ax
   802 000005D3 29D6                    		sub		si,dx
   803 000005D5 56                      		push    si			;coloca a abcisa xc-x na pilha
   804 000005D6 89DE                    		mov		si,bx
   805 000005D8 29CE                    		sub		si,cx
   806 000005DA 56                      		push    si			;coloca a ordenada yc-y na pilha
   807 000005DB E827FF                  		call plot_xy		;toma conta do sexto octante
   808 000005DE 89C6                    		mov		si,ax
   809 000005E0 29CE                    		sub		si,cx
   810 000005E2 56                      		push    si			;coloca a abcisa xc-y na pilha
   811 000005E3 89DE                    		mov		si,bx
   812 000005E5 29D6                    		sub		si,dx
   813 000005E7 56                      		push    si			;coloca a ordenada yc-x na pilha
   814 000005E8 E81AFF                  		call plot_xy		;toma conta do quinto octante
   815 000005EB 89C6                    		mov		si,ax
   816 000005ED 29CE                    		sub		si,cx
   817 000005EF 56                      		push    si			;coloca a abcisa xc-y na pilha
   818 000005F0 89DE                    		mov		si,bx
   819 000005F2 01D6                    		add		si,dx
   820 000005F4 56                      		push    si			;coloca a ordenada yc-x na pilha
   821 000005F5 E80DFF                  		call plot_xy		;toma conta do quarto octante
   822                                  		
   823 000005F8 39D1                    		cmp		cx,dx
   824 000005FA 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   825 000005FC E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   826                                  		
   827                                  fim_circle:
   828 000005FF 5F                      		pop		di
   829 00000600 5E                      		pop		si
   830 00000601 5A                      		pop		dx
   831 00000602 59                      		pop		cx
   832 00000603 5B                      		pop		bx
   833 00000604 58                      		pop		ax
   834 00000605 9D                      		popf
   835 00000606 5D                      		pop		bp
   836 00000607 C20600                  		ret		6
   837                                  ;-----------------------------------------------------------------------------
   838                                  ;    fun��o full_circle
   839                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   840                                  ; cor definida na variavel cor					  
   841                                  full_circle:
   842 0000060A 55                      		push 	bp
   843 0000060B 89E5                    		mov	 	bp,sp
   844 0000060D 9C                      		pushf                        ;coloca os flags na pilha
   845 0000060E 50                      		push 	ax
   846 0000060F 53                      		push 	bx
   847 00000610 51                      		push	cx
   848 00000611 52                      		push	dx
   849 00000612 56                      		push	si
   850 00000613 57                      		push	di
   851                                  
   852 00000614 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   853 00000617 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   854 0000061A 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   855                                  		
   856 0000061D 89DE                    		mov		si,bx
   857 0000061F 29CE                    		sub		si,cx
   858 00000621 50                      		push    ax			;coloca xc na pilha			
   859 00000622 56                      		push	si			;coloca yc-r na pilha
   860 00000623 89DE                    		mov		si,bx
   861 00000625 01CE                    		add		si,cx
   862 00000627 50                      		push	ax		;coloca xc na pilha
   863 00000628 56                      		push	si		;coloca yc+r na pilha
   864 00000629 E89B00                  		call line
   865                                  		
   866                                  			
   867 0000062C 89CF                    		mov		di,cx
   868 0000062E 81EF0100                		sub		di,1	 ;di=r-1
   869 00000632 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   870                                  		
   871                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   872                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   873                                  ;valores positivos para d
   874                                  
   875                                  stay_full:				;loop
   876 00000635 89FE                    		mov		si,di
   877 00000637 81FE0000                		cmp		si,0
   878 0000063B 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   879 0000063D 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   880 0000063F D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   881 00000641 81C60300                		add		si,3
   882 00000645 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   883 00000647 42                      		inc		dx		;incrementa dx
   884 00000648 E90E00                  		jmp		plotar_full
   885                                  
   886                                  inf_full:	
   887 0000064B 89D6                    		mov		si,dx
   888 0000064D 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   889 0000064F D1E6                    		sal		si,1
   890 00000651 81C60500                		add		si,5
   891 00000655 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   892 00000657 42                      		inc		dx		;incrementa x (dx)
   893 00000658 49                      		dec		cx		;decrementa y (cx)
   894                                  	
   895                                  plotar_full:	
   896 00000659 89C6                    		mov		si,ax
   897 0000065B 01CE                    		add		si,cx
   898 0000065D 56                      		push	si		;coloca a abcisa y+xc na pilha			
   899 0000065E 89DE                    		mov		si,bx
   900 00000660 29D6                    		sub		si,dx
   901 00000662 56                      		push    si		;coloca a ordenada yc-x na pilha
   902 00000663 89C6                    		mov		si,ax
   903 00000665 01CE                    		add		si,cx
   904 00000667 56                      		push	si		;coloca a abcisa y+xc na pilha	
   905 00000668 89DE                    		mov		si,bx
   906 0000066A 01D6                    		add		si,dx
   907 0000066C 56                      		push    si		;coloca a ordenada yc+x na pilha	
   908 0000066D E85700                  		call 	line
   909                                  		
   910 00000670 89C6                    		mov		si,ax
   911 00000672 01D6                    		add		si,dx
   912 00000674 56                      		push	si		;coloca a abcisa xc+x na pilha			
   913 00000675 89DE                    		mov		si,bx
   914 00000677 29CE                    		sub		si,cx
   915 00000679 56                      		push    si		;coloca a ordenada yc-y na pilha
   916 0000067A 89C6                    		mov		si,ax
   917 0000067C 01D6                    		add		si,dx
   918 0000067E 56                      		push	si		;coloca a abcisa xc+x na pilha	
   919 0000067F 89DE                    		mov		si,bx
   920 00000681 01CE                    		add		si,cx
   921 00000683 56                      		push    si		;coloca a ordenada yc+y na pilha	
   922 00000684 E84000                  		call	line
   923                                  		
   924 00000687 89C6                    		mov		si,ax
   925 00000689 29D6                    		sub		si,dx
   926 0000068B 56                      		push	si		;coloca a abcisa xc-x na pilha			
   927 0000068C 89DE                    		mov		si,bx
   928 0000068E 29CE                    		sub		si,cx
   929 00000690 56                      		push    si		;coloca a ordenada yc-y na pilha
   930 00000691 89C6                    		mov		si,ax
   931 00000693 29D6                    		sub		si,dx
   932 00000695 56                      		push	si		;coloca a abcisa xc-x na pilha	
   933 00000696 89DE                    		mov		si,bx
   934 00000698 01CE                    		add		si,cx
   935 0000069A 56                      		push    si		;coloca a ordenada yc+y na pilha	
   936 0000069B E82900                  		call	line
   937                                  		
   938 0000069E 89C6                    		mov		si,ax
   939 000006A0 29CE                    		sub		si,cx
   940 000006A2 56                      		push	si		;coloca a abcisa xc-y na pilha			
   941 000006A3 89DE                    		mov		si,bx
   942 000006A5 29D6                    		sub		si,dx
   943 000006A7 56                      		push    si		;coloca a ordenada yc-x na pilha
   944 000006A8 89C6                    		mov		si,ax
   945 000006AA 29CE                    		sub		si,cx
   946 000006AC 56                      		push	si		;coloca a abcisa xc-y na pilha	
   947 000006AD 89DE                    		mov		si,bx
   948 000006AF 01D6                    		add		si,dx
   949 000006B1 56                      		push    si		;coloca a ordenada yc+x na pilha	
   950 000006B2 E81200                  		call	line
   951                                  		
   952 000006B5 39D1                    		cmp		cx,dx
   953 000006B7 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   954 000006B9 E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   955                                  			
   956                                  fim_full_circle:
   957 000006BC 5F                      		pop		di
   958 000006BD 5E                      		pop		si
   959 000006BE 5A                      		pop		dx
   960 000006BF 59                      		pop		cx
   961 000006C0 5B                      		pop		bx
   962 000006C1 58                      		pop		ax
   963 000006C2 9D                      		popf
   964 000006C3 5D                      		pop		bp
   965 000006C4 C20600                  		ret		6
   966                                  ;-----------------------------------------------------------------------------
   967                                  ;
   968                                  ;   fun��o line
   969                                  ;
   970                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   971                                  line:
   972 000006C7 55                      		push		bp
   973 000006C8 89E5                    		mov		bp,sp
   974 000006CA 9C                      		pushf                        ;coloca os flags na pilha
   975 000006CB 50                      		push 		ax
   976 000006CC 53                      		push 		bx
   977 000006CD 51                      		push		cx
   978 000006CE 52                      		push		dx
   979 000006CF 56                      		push		si
   980 000006D0 57                      		push		di
   981 000006D1 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   982 000006D4 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   983 000006D7 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   984 000006DA 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   985 000006DD 39C8                    		cmp		ax,cx
   986 000006DF 7408                    		je		line2
   987 000006E1 721C                    		jb		line1
   988 000006E3 91                      		xchg		ax,cx
   989 000006E4 87DA                    		xchg		bx,dx
   990 000006E6 E91600                  		jmp		line1
   991                                  
   992                                  line2:		; deltax=0
   993 000006E9 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   994 000006EB 7202                    		jb		line3
   995 000006ED 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   996                                  
   997                                  line3:	; dx > bx
   998 000006EF 50                      		push		ax
   999 000006F0 53                      		push		bx
  1000 000006F1 E811FE                  		call 		plot_xy
  1001 000006F4 39D3                    		cmp		bx,dx
  1002 000006F6 7503                    		jne		line31
  1003 000006F8 E9C600                  		jmp		fim_line
  1004                                  line31:		
  1005 000006FB 43                      		inc		bx
  1006 000006FC E9F0FF                  		jmp		line3
  1007                                  ;deltax <>0
  1008                                  line1:
  1009                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1010                                  	; cx > ax
  1011 000006FF 51                      		push		cx
  1012 00000700 29C1                    		sub		cx,ax
  1013 00000702 890E[0100]              		mov		[deltax],cx
  1014 00000706 59                      		pop		cx
  1015 00000707 52                      		push		dx
  1016 00000708 29DA                    		sub		dx,bx
  1017 0000070A 7702                    		ja		line32
  1018 0000070C F7DA                    		neg		dx
  1019                                  line32:		
  1020 0000070E 8916[0300]              		mov		[deltay],dx
  1021 00000712 5A                      		pop		dx
  1022                                  
  1023 00000713 50                      		push		ax
  1024 00000714 A1[0100]                		mov		ax,[deltax]
  1025 00000717 3B06[0300]              		cmp		ax,[deltay]
  1026 0000071B 58                      		pop		ax
  1027 0000071C 724D                    		jb		line5
  1028                                  
  1029                                  	; cx > ax e deltax>deltay
  1030 0000071E 51                      		push		cx
  1031 0000071F 29C1                    		sub		cx,ax
  1032 00000721 890E[0100]              		mov		[deltax],cx
  1033 00000725 59                      		pop		cx
  1034 00000726 52                      		push		dx
  1035 00000727 29DA                    		sub		dx,bx
  1036 00000729 8916[0300]              		mov		[deltay],dx
  1037 0000072D 5A                      		pop		dx
  1038                                  
  1039 0000072E 89C6                    		mov		si,ax
  1040                                  line4:
  1041 00000730 50                      		push		ax
  1042 00000731 52                      		push		dx
  1043 00000732 56                      		push		si
  1044 00000733 29C6                    		sub		si,ax	;(x-x1)
  1045 00000735 A1[0300]                		mov		ax,[deltay]
  1046 00000738 F7EE                    		imul		si
  1047 0000073A 8B36[0100]              		mov		si,[deltax]		;arredondar
  1048 0000073E D1EE                    		shr		si,1
  1049                                  ; se numerador (DX)>0 soma se <0 subtrai
  1050 00000740 81FA0000                		cmp		dx,0
  1051 00000744 7C09                    		jl		ar1
  1052 00000746 01F0                    		add		ax,si
  1053 00000748 81D20000                		adc		dx,0
  1054 0000074C E90600                  		jmp		arc1
  1055 0000074F 29F0                    ar1:		sub		ax,si
  1056 00000751 81DA0000                		sbb		dx,0
  1057                                  arc1:
  1058 00000755 F73E[0100]              		idiv		word [deltax]
  1059 00000759 01D8                    		add		ax,bx
  1060 0000075B 5E                      		pop		si
  1061 0000075C 56                      		push		si
  1062 0000075D 50                      		push		ax
  1063 0000075E E8A4FD                  		call		plot_xy
  1064 00000761 5A                      		pop		dx
  1065 00000762 58                      		pop		ax
  1066 00000763 39CE                    		cmp		si,cx
  1067 00000765 745A                    		je		fim_line
  1068 00000767 46                      		inc		si
  1069 00000768 E9C5FF                  		jmp		line4
  1070                                  
  1071 0000076B 39D3                    line5:		cmp		bx,dx
  1072 0000076D 7203                    		jb 		line7
  1073 0000076F 91                      		xchg		ax,cx
  1074 00000770 87DA                    		xchg		bx,dx
  1075                                  line7:
  1076 00000772 51                      		push		cx
  1077 00000773 29C1                    		sub		cx,ax
  1078 00000775 890E[0100]              		mov		[deltax],cx
  1079 00000779 59                      		pop		cx
  1080 0000077A 52                      		push		dx
  1081 0000077B 29DA                    		sub		dx,bx
  1082 0000077D 8916[0300]              		mov		[deltay],dx
  1083 00000781 5A                      		pop		dx
  1084 00000782 89DE                    		mov		si,bx
  1085                                  line6:
  1086 00000784 52                      		push		dx
  1087 00000785 56                      		push		si
  1088 00000786 50                      		push		ax
  1089 00000787 29DE                    		sub		si,bx	;(y-y1)
  1090 00000789 A1[0100]                		mov		ax,[deltax]
  1091 0000078C F7EE                    		imul		si
  1092 0000078E 8B36[0300]              		mov		si,[deltay]		;arredondar
  1093 00000792 D1EE                    		shr		si,1
  1094                                  ; se numerador (DX)>0 soma se <0 subtrai
  1095 00000794 81FA0000                		cmp		dx,0
  1096 00000798 7C09                    		jl		ar2
  1097 0000079A 01F0                    		add		ax,si
  1098 0000079C 81D20000                		adc		dx,0
  1099 000007A0 E90600                  		jmp		arc2
  1100                                  ar2:		
  1101 000007A3 29F0                    		sub		ax,si
  1102 000007A5 81EA0000                		sub		dx,0
  1103                                  arc2:
  1104 000007A9 F73E[0300]              		idiv		word [deltay]
  1105 000007AD 89C7                    		mov		di,ax
  1106 000007AF 58                      		pop		ax
  1107 000007B0 01C7                    		add		di,ax
  1108 000007B2 5E                      		pop		si
  1109 000007B3 57                      		push		di
  1110 000007B4 56                      		push		si
  1111 000007B5 E84DFD                  		call		plot_xy
  1112 000007B8 5A                      		pop		dx
  1113 000007B9 39D6                    		cmp		si,dx
  1114 000007BB 7404                    		je		fim_line
  1115 000007BD 46                      		inc		si
  1116 000007BE E9C3FF                  		jmp		line6
  1117                                  
  1118                                  fim_line:
  1119 000007C1 5F                      		pop		di
  1120 000007C2 5E                      		pop		si
  1121 000007C3 5A                      		pop		dx
  1122 000007C4 59                      		pop		cx
  1123 000007C5 5B                      		pop		bx
  1124 000007C6 58                      		pop		ax
  1125 000007C7 9D                      		popf
  1126 000007C8 5D                      		pop		bp
  1127 000007C9 C20800                  		ret		8
  1128                                  ;*******************************************************************
  1129                                  segment data
  1130                                  
  1131                                  ;	I R G B COR
  1132                                  ;	0 0 0 0 preto
  1133                                  ;	0 0 0 1 azul
  1134                                  ;	0 0 1 0 verde
  1135                                  ;	0 0 1 1 cyan
  1136                                  ;	0 1 0 0 vermelho
  1137                                  ;	0 1 0 1 magenta
  1138                                  ;	0 1 1 0 marrom
  1139                                  ;	0 1 1 1 branco
  1140                                  ;	1 0 0 0 cinza
  1141                                  ;	1 0 0 1 azul claro
  1142                                  ;	1 0 1 0 verde claro
  1143                                  ;	1 0 1 1 cyan claro
  1144                                  ;	1 1 0 0 rosa
  1145                                  ;	1 1 0 1 magenta claro
  1146                                  ;	1 1 1 0 amarelo
  1147                                  ;	1 1 1 1 branco intenso
  1148                                  
  1149                                  
  1150 00000000 0F                      cor				db		branco_intenso
  1151                                  preto			equ		0
  1152                                  azul			equ		1
  1153                                  verde			equ		2
  1154                                  cyan			equ		3
  1155                                  vermelho		equ		4
  1156                                  magenta			equ		5
  1157                                  marrom			equ		6
  1158                                  branco			equ		7
  1159                                  cinza			equ		8
  1160                                  azul_claro		equ		9
  1161                                  verde_claro		equ		10
  1162                                  cyan_claro		equ		11
  1163                                  rosa			equ		12
  1164                                  magenta_claro	equ		13
  1165                                  amarelo			equ		14
  1166                                  branco_intenso	equ		15
  1167 00000001 0000                    deltax			dw		0
  1168 00000003 0000                    deltay			dw		0
  1169 00000005 00                      modo_anterior	db		0
  1170                                  
  1171 00000006 0500                    x1A				dw		5	;Usados para printar os quadrados
  1172 00000008 6900                    x2A				dw		105
  1173 0000000A 0500                    x1B 			dw		5
  1174 0000000C 6900                    x2B  			dw		105
  1175                                  
  1176 0000000E 0000                    apaga1			dw		0	;Variáveis para pegar qual quadrado apagar
  1177 00000010 0000                    apaga2			dw		0
  1178                                  
  1179 00000012 0E01                    player_x1    	dw      270	;Posição da raquete
  1180 00000014 7201                    player_x2    	dw      370
  1181                                  
  1182 00000016 4001                    px      		dw      320	;Posição da bola
  1183 00000018 1E00                    py      		dw      30
  1184                                  
  1185 0000001A 0000                    bloco_quebrado1	dw		0	;Variável para testar se a bola pode subir mais
  1186 0000001C 0000                    bloco_quebrado2	dw		0
  1187 0000001E 0000                    bloco_quebrado3	dw		0
  1188 00000020 0000                    bloco_quebrado4	dw		0
  1189 00000022 0000                    bloco_quebrado5	dw		0
  1190 00000024 0000                    bloco_quebrado6	dw		0
  1191                                  
  1192 00000026 0000                    yToDelete1		dw		0
  1193 00000028 0000                    yToDelete2		dw		0
  1194                                  
  1195 0000002A 0500                    vx      		dw      5	;Velocidade que a bola anda
  1196 0000002C 0500                    vy      		dw      5
  1197 0000002E 47414D45204F564552-     mens_3      	db          'GAME OVER. Deseja continuar? Y ou N'
  1198 00000037 2E20446573656A6120-
  1199 00000040 636F6E74696E756172-
  1200 00000049 3F2059206F75204E   
  1201                                  
  1202                                  ;*************************************************************************
  1203                                  segment stack stack
  1204 00000000 <res 00000200>              		resb 		512
  1205                                  stacktop:
