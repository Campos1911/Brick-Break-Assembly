     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0100]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  ; Desenhando o campo (bordas brancas)
    21 0000001A C606[0000]0F            		mov		byte[cor],branco_intenso
    22 0000001F B80000                  		mov		ax, 0
    23 00000022 50                      		push 	ax
    24 00000023 B80000                  		mov		ax, 0
    25 00000026 50                      		push	ax
    26 00000027 B80000                  		mov		ax, 0
    27 0000002A 50                      		push 	ax
    28 0000002B B8DF01                  		mov		ax, 479
    29 0000002E 50                      		push	ax
    30 0000002F E8B904                  		call	line
    31                                  
    32 00000032 B80000                  		mov		ax, 0
    33 00000035 50                      		push 	ax
    34 00000036 B8DF01                  		mov		ax, 479
    35 00000039 50                      		push	ax
    36 0000003A B87F02                  		mov		ax, 639
    37 0000003D 50                      		push 	ax
    38 0000003E B8DF01                  		mov		ax, 479
    39 00000041 50                      		push	ax
    40 00000042 E8A604                  		call	line
    41                                  		
    42 00000045 B87F02                  		mov		ax, 639
    43 00000048 50                      		push 	ax
    44 00000049 B8DF01                  		mov		ax, 479
    45 0000004C 50                      		push	ax
    46 0000004D B87F02                  		mov		ax, 639
    47 00000050 50                      		push 	ax
    48 00000051 B80000                  		mov		ax, 0
    49 00000054 50                      		push	ax
    50 00000055 E89304                  		call	line
    51                                  
    52                                  ; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    53 00000058 B90600                  		mov		cx, 6
    54 0000005B C606[0000]01            		mov		byte[cor], azul
    55                                  	
    56                                  ; Primeira linha de quadrados (linha superior)
    57                                  fazQuadrado1:
    58 00000060 FE06[0000]              		inc		byte[cor]
    59 00000064 A1[0A00]                		mov		ax, word[x1A]
    60 00000067 50                      		push 	ax
    61 00000068 B8DD01                  		mov		ax, 477
    62 0000006B 50                      		push	ax
    63 0000006C A1[0C00]                		mov		ax, word[x2A]
    64 0000006F 50                      		push 	ax
    65 00000070 B8DD01                  		mov		ax, 477
    66 00000073 50                      		push	ax
    67 00000074 E87404                  		call	line
    68                                  		
    69 00000077 A1[0C00]                		mov		ax, word[x2A]
    70 0000007A 50                      		push 	ax
    71 0000007B B8DD01                  		mov		ax, 477
    72 0000007E 50                      		push	ax
    73 0000007F A1[0C00]                		mov		ax, word[x2A]
    74 00000082 50                      		push 	ax
    75 00000083 B8B501                  		mov		ax, 437
    76 00000086 50                      		push	ax
    77 00000087 E86104                  		call	line
    78                                  		
    79 0000008A A1[0C00]                		mov		ax, word[x2A]
    80 0000008D 50                      		push 	ax
    81 0000008E B8B501                  		mov		ax, 437
    82 00000091 50                      		push	ax
    83 00000092 A1[0A00]                		mov		ax, word[x1A]
    84 00000095 50                      		push 	ax
    85 00000096 B8B501                  		mov		ax, 437
    86 00000099 50                      		push	ax
    87 0000009A E84E04                  		call	line
    88                                  		
    89 0000009D A1[0A00]                		mov		ax, word[x1A]
    90 000000A0 50                      		push 	ax
    91 000000A1 B8B501                  		mov		ax, 437
    92 000000A4 50                      		push	ax
    93 000000A5 A1[0A00]                		mov		ax, word[x1A]
    94 000000A8 50                      		push 	ax
    95 000000A9 B8DD01                  		mov		ax, 477
    96 000000AC 50                      		push	ax
    97 000000AD E83B04                  		call	line
    98 000000B0 8106[0C00]6900          		add		word[x2A], 105
    99 000000B6 8106[0A00]6900          		add		word[x1A] , 105
   100 000000BC E2A2                    		loop 	fazQuadrado1
   101                                  		
   102                                  	; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   103 000000BE B90600                  		mov		cx, 6
   104 000000C1 C606[0000]08            		mov		byte[cor], cinza
   105                                  		
   106                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   107 000000C6 FE06[0000]              		inc		byte[cor]
   108 000000CA A1[0E00]                		mov		ax, word[x1B]
   109 000000CD 50                      		push 	ax
   110 000000CE B8AB01                  		mov		ax, 427
   111 000000D1 50                      		push	ax
   112 000000D2 A1[1000]                		mov		ax, word[x2B]
   113 000000D5 50                      		push 	ax
   114 000000D6 B8AB01                  		mov		ax, 427
   115 000000D9 50                      		push	ax
   116 000000DA E80E04                  		call	line
   117                                  		
   118 000000DD A1[1000]                		mov		ax, word[x2B]
   119 000000E0 50                      		push 	ax
   120 000000E1 B8AB01                  		mov		ax, 427
   121 000000E4 50                      		push	ax
   122 000000E5 A1[1000]                		mov		ax, word[x2B]
   123 000000E8 50                      		push 	ax
   124 000000E9 B88301                  		mov		ax, 387
   125 000000EC 50                      		push	ax
   126 000000ED E8FB03                  		call	line
   127                                  		
   128 000000F0 A1[1000]                		mov		ax, word[x2B]
   129 000000F3 50                      		push 	ax
   130 000000F4 B88301                  		mov		ax, 387
   131 000000F7 50                      		push	ax
   132 000000F8 A1[0E00]                		mov		ax, word[x1B]
   133 000000FB 50                      		push 	ax
   134 000000FC B88301                  		mov		ax, 387
   135 000000FF 50                      		push	ax
   136 00000100 E8E803                  		call	line
   137                                  		
   138 00000103 A1[0E00]                		mov		ax, word[x1B]
   139 00000106 50                      		push 	ax
   140 00000107 B88301                  		mov		ax, 387
   141 0000010A 50                      		push	ax
   142 0000010B A1[0E00]                		mov		ax, word[x1B]
   143 0000010E 50                      		push 	ax
   144 0000010F B8AB01                  		mov		ax, 427
   145 00000112 50                      		push	ax
   146 00000113 E8D503                  		call	line
   147 00000116 8106[1000]6900          		add		word[x2B], 105
   148 0000011C 8106[0E00]6900          		add		word[x1B] , 105
   149 00000122 E2A2                    		loop 	fazQuadrado2
   150                                  
   151                                  
   152                                  
   153                                  
   154                                  
   155                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   156                                  
   157                                  
   158                                  continua:
   159 00000124 E87C00                      	call limpa_bola
   160                                  
   161 00000127 8B1E[2800]                      mov bx, [vx]
   162 0000012B 011E[2400]                      add [px], bx
   163 0000012F 8B1E[2A00]                      mov bx, [vy]
   164 00000133 011E[2600]                      add [py], bx
   165                                  
   166 00000137 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   167 0000013C A1[2400]                		mov		ax,[px]
   168 0000013F 50                      		push		ax
   169 00000140 A1[2600]                		mov		ax,[py]
   170 00000143 50                      		push		ax
   171 00000144 B81000                  		mov		ax,16
   172 00000147 50                      		push		ax
   173 00000148 E8E302                  		call	full_circle
   174                                  
   175 0000014B A1[2000]                		mov		ax, [player_x1] ; Desenhando a raquete
   176 0000014E 50                      		push 	ax
   177 0000014F B80A00                  		mov		ax, 10
   178 00000152 50                      		push	ax
   179 00000153 A1[2200]                		mov		ax, [player_x2]
   180 00000156 50                      		push 	ax
   181 00000157 B80A00                  		mov		ax, 10
   182 0000015A 50                      		push	ax
   183 0000015B E88D03                  		call	line
   184                                         
   185 0000015E 59                              pop cx ; Recupera cx da pilha
   186 0000015F E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   187 00000161 E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   188 00000163 C3                              ret
   189                                  
   190                                  del2:
   191 00000164 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   192 00000165 B90008                          mov cx, 0800h ; Teste modificando este valor
   193                                  
   194                                  del1:
   195 00000168 BB6702                          mov bx, 615
   196 0000016B 391E[2400]                      cmp [px], bx
   197 0000016F 7D47                            jge moveesquerda
   198                                  
   199 00000171 BB1400                          mov bx, 20
   200 00000174 391E[2400]                      cmp [px], bx
   201 00000178 7E4F                            jle movedireita
   202                                  
   203 0000017A BB6801                          mov bx, 360
   204 0000017D 391E[2600]                      cmp [py], bx
   205 00000181 7D57                            jge movebaixo
   206                                  
   207 00000183 BB0A00                          mov bx, 10
   208 00000186 391E[2600]                      cmp [py], bx
   209 0000018A 7E5C                            jle movecima
   210                                  
   211 0000018C B40B                            mov ah, 0bh      
   212 0000018E CD21                            int 21h
   213 00000190 3C00                            cmp al,0
   214 00000192 756E                            jne verificar_teclas
   215 00000194 E8D700                  		call calcular_colisao_raquete
   216 00000197 E98AFF                          jmp continua
   217                                  
   218 0000019A E887FF                  		call delay
   219 0000019D E8C8FF                  		call del1
   220 000001A0 E8C1FF                  		call del2
   221                                  
   222                                  limpa_bola:
   223 000001A3 C606[0000]00                    mov     byte[cor],preto ; limpa bola
   224 000001A8 A1[2400]                        mov     ax,[px]
   225 000001AB 50                              push        ax
   226 000001AC A1[2600]                        mov     ax,[py]
   227 000001AF 50                              push        ax
   228 000001B0 B81400                          mov     ax,20
   229 000001B3 50                              push        ax
   230 000001B4 E87702                          call    full_circle
   231 000001B7 C3                              ret
   232                                  
   233                                  moveesquerda:
   234 000001B8 E8E8FF                          call limpa_bola
   235 000001BB A1[2800]                		mov ax, [vx]
   236 000001BE F7D8                            neg ax
   237 000001C0 89C3                            mov bx, ax
   238 000001C2 891E[2800]                      mov [vx], bx
   239 000001C6 E95BFF                          jmp continua
   240                                  
   241                                  movedireita:
   242                                  
   243 000001C9 E8D7FF                  		call limpa_bola
   244 000001CC A1[2800]                        mov ax, [vx]
   245 000001CF F7D8                            neg ax
   246 000001D1 89C3                            mov bx, ax
   247 000001D3 891E[2800]                      mov [vx], bx
   248 000001D7 E94AFF                          jmp continua
   249                                  
   250                                  movebaixo:
   251                                  
   252 000001DA A1[2A00]                        mov ax, [vy]
   253 000001DD F7D8                            neg ax
   254 000001DF 89C3                            mov bx, ax
   255 000001E1 891E[2A00]                      mov [vy], bx
   256 000001E5 E93CFF                          jmp continua
   257                                  
   258                                  movecima:
   259                                  
   260 000001E8 A1[2A00]                        mov ax, [vy]
   261 000001EB F7D8                            neg ax
   262 000001ED 89C3                            mov bx, ax
   263 000001EF 891E[2A00]                      mov [vy], bx
   264 000001F3 E92EFF                          jmp continua
   265                                  
   266                                  
   267                                  sai:
   268 000001F6 B400                            mov ah,0 ; set video mode
   269 000001F8 A0[0100]                        mov al,[modo_anterior] ; recupera o modo anterior
   270 000001FB CD10                            int 10h
   271 000001FD B8004C                          mov ax,4c00h
   272 00000200 CD21                            int 21h
   273                                  		
   274                                  
   275                                  verificar_teclas:
   276 00000202 55                              push bp
   277 00000203 89E5                            mov bp, sp
   278                                  
   279                                          ; Verifica se a tecla de seta para cima foi pressionada
   280 00000205 B408                            mov ah, 08h
   281 00000207 CD21                            int 21h
   282 00000209 3C70                    		cmp al, 70h
   283 0000020B 742B                    		je	pausa
   284 0000020D 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   285 0000020F 74E5                            je sai
   286 00000211 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   287 00000213 752E                            jne verificar_baixo
   288                                  
   289 00000215 E8B300                          call limpa_raquete
   290 00000218 B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   291 0000021B BB7602                          mov bx, 630 ;testa se já chegou no limite
   292 0000021E 391E[2200]                      cmp [player_x2], bx
   293 00000222 7D46                            jge fim_verificar_teclas
   294 00000224 0306[2000]                      add ax, [player_x1]
   295 00000228 A3[2000]                        mov [player_x1], ax
   296 0000022B B81400                          mov ax, 20
   297 0000022E 0306[2200]                      add ax, [player_x2]
   298 00000232 A3[2200]                        mov [player_x2], ax
   299                                  
   300 00000235 E93200                          jmp fim_verificar_teclas
   301                                  
   302                                  pausa:
   303 00000238 B408                            mov ah, 08h
   304 0000023A CD21                            int 21h
   305 0000023C 3C70                    		cmp al, 70h
   306 0000023E 75F8                    		jne pausa
   307 00000240 E9E1FE                  		jmp continua
   308                                  
   309                                  verificar_baixo:
   310                                          ;Verifica se a tecla de seta para baixo foi pressionada
   311 00000243 3C61                            cmp al, 61h
   312 00000245 7523                            jne fim_verificar_teclas ; Se a tecla de seta para baixo não foi pressionada, finaliza a função
   313                                  
   314 00000247 E88100                          call limpa_raquete
   315 0000024A B8ECFF                          mov ax, -20
   316 0000024D BB0A00                          mov bx, 10
   317 00000250 391E[2000]                      cmp [player_x1], bx
   318 00000254 7E14                            jle fim_verificar_teclas
   319 00000256 0306[2000]                      add ax, [player_x1]
   320 0000025A A3[2000]                        mov [player_x1], ax
   321 0000025D B8ECFF                          mov ax, -20
   322 00000260 0306[2200]                      add ax, [player_x2]
   323 00000264 A3[2200]                        mov [player_x2], ax
   324 00000267 E90000                          jmp fim_verificar_teclas
   325                                  
   326                                  fim_verificar_teclas:
   327 0000026A 5D                              pop bp
   328 0000026B E9B6FE                          jmp continua
   329                                  
   330                                  calcular_colisao_raquete:
   331 0000026E B81E00                          mov ax, 30
   332 00000271 3906[2600]                      cmp [py], ax
   333 00000275 7401                            je verifica1
   334 00000277 C3                              ret
   335                                  
   336                                  verifica1:
   337 00000278 8B1E[2200]                      mov bx, [player_x2]
   338 0000027C 81C31000                        add bx, 16
   339 00000280 391E[2400]                      cmp [px], bx
   340 00000284 7E0F                            jle rebate_cima1
   341 00000286 8B1E[2000]                      mov bx, [player_x1]
   342 0000028A 81EB1000                        sub bx, 16
   343 0000028E 391E[2400]                      cmp [px], bx
   344 00000292 7D1C                            jge rebate_baixo1
   345 00000294 C3                              ret
   346                                  
   347                                   rebate_cima1:
   348 00000295 8B1E[2000]              		mov bx, [player_x1]
   349 00000299 81EB1000                		sub bx, 16
   350 0000029D 391E[2400]              		cmp [px], bx
   351 000002A1 7D01                    		jge rebate_cima2
   352 000002A3 C3                              ret
   353                                  
   354                                   rebate_cima2:
   355 000002A4 A1[2A00]                        mov ax, [vy]
   356 000002A7 F7D8                            neg ax
   357 000002A9 89C3                            mov bx, ax
   358 000002AB 891E[2A00]              		mov [vy], bx
   359 000002AF C3                              ret
   360                                  
   361                                  rebate_baixo1:
   362 000002B0 8B1E[2200]                      mov bx, [player_x2]
   363 000002B4 81C31000                        add bx, 16
   364 000002B8 391E[2400]                      cmp [px], bx
   365 000002BC 7E01                            jle rebate_baixo2
   366 000002BE C3                              ret
   367                                  
   368                                  rebate_baixo2:
   369 000002BF A1[2A00]                        mov ax, [vy]
   370 000002C2 F7D8                            neg ax
   371 000002C4 89C3                            mov bx, ax
   372 000002C6 891E[2A00]                      mov [vy], bx
   373 000002CA C3                              ret
   374                                  
   375                                  limpa_raquete:
   376 000002CB C606[0000]00                    mov     byte[cor], preto    ;limpa raquete
   377 000002D0 A1[2000]                        mov     ax,[player_x1]
   378 000002D3 50                              push    ax
   379 000002D4 B80A00                          mov     ax,10
   380 000002D7 50                              push    ax
   381 000002D8 A1[2200]                        mov     ax,[player_x2]
   382 000002DB 50                              push    ax
   383 000002DC B80A00                          mov     ax,10
   384 000002DF 50                              push    ax
   385 000002E0 E80802                          call    line
   386 000002E3 C3                              ret
   387                                  		
   388                                  ; Finalizando o programa
   389 000002E4 B408                    		mov    	ah,08h
   390 000002E6 CD21                    		int     21h
   391 000002E8 B400                    	    mov  	ah,0   					; set video mode
   392 000002EA A0[0100]                	    mov  	al,[modo_anterior]   	; modo anterior
   393 000002ED CD10                    	    int  	10h
   394 000002EF B8004C                  		mov     ax,4c00h
   395 000002F2 CD21                    		int     21h
   396                                  
   397                                  
   398                                  ;***************************************************************************
   399                                  ;
   400                                  ;   função cursor
   401                                  ;
   402                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   403                                  cursor:
   404 000002F4 9C                      		pushf
   405 000002F5 50                      		push 		ax
   406 000002F6 53                      		push 		bx
   407 000002F7 51                      		push		cx
   408 000002F8 52                      		push		dx
   409 000002F9 56                      		push		si
   410 000002FA 57                      		push		di
   411 000002FB 55                      		push		bp
   412 000002FC B402                    		mov     	ah,2
   413 000002FE B700                    		mov     	bh,0
   414 00000300 CD10                    		int     	10h
   415 00000302 5D                      		pop		bp
   416 00000303 5F                      		pop		di
   417 00000304 5E                      		pop		si
   418 00000305 5A                      		pop		dx
   419 00000306 59                      		pop		cx
   420 00000307 5B                      		pop		bx
   421 00000308 58                      		pop		ax
   422 00000309 9D                      		popf
   423 0000030A C3                      		ret
   424                                  ;_____________________________________________________________________________
   425                                  ;
   426                                  ;   fun��o caracter escrito na posi��o do cursor
   427                                  ;
   428                                  ; al= caracter a ser escrito
   429                                  ; cor definida na variavel cor
   430                                  caracter:
   431 0000030B 9C                      		pushf
   432 0000030C 50                      		push 		ax
   433 0000030D 53                      		push 		bx
   434 0000030E 51                      		push		cx
   435 0000030F 52                      		push		dx
   436 00000310 56                      		push		si
   437 00000311 57                      		push		di
   438 00000312 55                      		push		bp
   439 00000313 B409                        	mov     	ah,9
   440 00000315 B700                        	mov     	bh,0
   441 00000317 B90100                      	mov     	cx,1
   442 0000031A 8A1E[0000]                 		mov     	bl,[cor]
   443 0000031E CD10                        	int     	10h
   444 00000320 5D                      		pop			bp
   445 00000321 5F                      		pop			di
   446 00000322 5E                      		pop			si
   447 00000323 5A                      		pop			dx
   448 00000324 59                      		pop			cx
   449 00000325 5B                      		pop			bx
   450 00000326 58                      		pop			ax
   451 00000327 9D                      		popf
   452 00000328 C3                      		ret
   453                                  ;_____________________________________________________________________________
   454                                  ;
   455                                  ;   fun��o plot_xy
   456                                  ;
   457                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   458                                  ; cor definida na variavel cor
   459                                  plot_xy:
   460 00000329 55                      		push		bp
   461 0000032A 89E5                    		mov			bp,sp
   462 0000032C 9C                      		pushf
   463 0000032D 50                      		push 		ax
   464 0000032E 53                      		push 		bx
   465 0000032F 51                      		push		cx
   466 00000330 52                      		push		dx
   467 00000331 56                      		push		si
   468 00000332 57                      		push		di
   469 00000333 B40C                    	    mov     	ah,0ch
   470 00000335 A0[0000]                	    mov     	al,[cor]
   471 00000338 B700                    	    mov     	bh,0
   472 0000033A BADF01                  	    mov     	dx,479
   473 0000033D 2B5604                  		sub			dx,[bp+4]
   474 00000340 8B4E06                  	    mov     	cx,[bp+6]
   475 00000343 CD10                    	    int     	10h
   476 00000345 5F                      		pop			di
   477 00000346 5E                      		pop			si
   478 00000347 5A                      		pop			dx
   479 00000348 59                      		pop			cx
   480 00000349 5B                      		pop			bx
   481 0000034A 58                      		pop			ax
   482 0000034B 9D                      		popf	
   483 0000034C 5D                      		pop			bp
   484 0000034D C20400                  		ret			4
   485                                  ;_____________________________________________________________________________
   486                                  ;    fun��o circle
   487                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   488                                  ; cor definida na variavel cor
   489                                  circle:
   490 00000350 55                      		push 	bp
   491 00000351 89E5                    		mov	 	bp,sp
   492 00000353 9C                      		pushf                        ;coloca os flags na pilha
   493 00000354 50                      		push 	ax
   494 00000355 53                      		push 	bx
   495 00000356 51                      		push	cx
   496 00000357 52                      		push	dx
   497 00000358 56                      		push	si
   498 00000359 57                      		push	di
   499                                  		
   500 0000035A 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   501 0000035D 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   502 00000360 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   503                                  		
   504 00000363 89DA                    		mov 	dx,bx	
   505 00000365 01CA                    		add		dx,cx       ;ponto extremo superior
   506 00000367 50                      		push    ax			
   507 00000368 52                      		push	dx
   508 00000369 E8BDFF                  		call plot_xy
   509                                  		
   510 0000036C 89DA                    		mov		dx,bx
   511 0000036E 29CA                    		sub		dx,cx       ;ponto extremo inferior
   512 00000370 50                      		push    ax			
   513 00000371 52                      		push	dx
   514 00000372 E8B4FF                  		call plot_xy
   515                                  		
   516 00000375 89C2                    		mov 	dx,ax	
   517 00000377 01CA                    		add		dx,cx       ;ponto extremo direita
   518 00000379 52                      		push    dx			
   519 0000037A 53                      		push	bx
   520 0000037B E8ABFF                  		call plot_xy
   521                                  		
   522 0000037E 89C2                    		mov		dx,ax
   523 00000380 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   524 00000382 52                      		push    dx			
   525 00000383 53                      		push	bx
   526 00000384 E8A2FF                  		call plot_xy
   527                                  			
   528 00000387 89CF                    		mov		di,cx
   529 00000389 81EF0100                		sub		di,1	 ;di=r-1
   530 0000038D BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   531                                  		
   532                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   533                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   534                                  ;valores positivos para d
   535                                  
   536                                  stay:				;loop
   537 00000390 89FE                    		mov		si,di
   538 00000392 81FE0000                		cmp		si,0
   539 00000396 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   540 00000398 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   541 0000039A D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   542 0000039C 81C60300                		add		si,3
   543 000003A0 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   544 000003A2 42                      		inc		dx		;incrementa dx
   545 000003A3 E90E00                  		jmp		plotar
   546                                  inf:	
   547 000003A6 89D6                    		mov		si,dx
   548 000003A8 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   549 000003AA D1E6                    		sal		si,1
   550 000003AC 81C60500                		add		si,5
   551 000003B0 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   552 000003B2 42                      		inc		dx		;incrementa x (dx)
   553 000003B3 49                      		dec		cx		;decrementa y (cx)
   554                                  	
   555                                  plotar:	
   556 000003B4 89D6                    		mov		si,dx
   557 000003B6 01C6                    		add		si,ax
   558 000003B8 56                      		push    si			;coloca a abcisa x+xc na pilha
   559 000003B9 89CE                    		mov		si,cx
   560 000003BB 01DE                    		add		si,bx
   561 000003BD 56                      		push    si			;coloca a ordenada y+yc na pilha
   562 000003BE E868FF                  		call plot_xy		;toma conta do segundo octante
   563 000003C1 89C6                    		mov		si,ax
   564 000003C3 01D6                    		add		si,dx
   565 000003C5 56                      		push    si			;coloca a abcisa xc+x na pilha
   566 000003C6 89DE                    		mov		si,bx
   567 000003C8 29CE                    		sub		si,cx
   568 000003CA 56                      		push    si			;coloca a ordenada yc-y na pilha
   569 000003CB E85BFF                  		call plot_xy		;toma conta do s�timo octante
   570 000003CE 89C6                    		mov		si,ax
   571 000003D0 01CE                    		add		si,cx
   572 000003D2 56                      		push    si			;coloca a abcisa xc+y na pilha
   573 000003D3 89DE                    		mov		si,bx
   574 000003D5 01D6                    		add		si,dx
   575 000003D7 56                      		push    si			;coloca a ordenada yc+x na pilha
   576 000003D8 E84EFF                  		call plot_xy		;toma conta do segundo octante
   577 000003DB 89C6                    		mov		si,ax
   578 000003DD 01CE                    		add		si,cx
   579 000003DF 56                      		push    si			;coloca a abcisa xc+y na pilha
   580 000003E0 89DE                    		mov		si,bx
   581 000003E2 29D6                    		sub		si,dx
   582 000003E4 56                      		push    si			;coloca a ordenada yc-x na pilha
   583 000003E5 E841FF                  		call plot_xy		;toma conta do oitavo octante
   584 000003E8 89C6                    		mov		si,ax
   585 000003EA 29D6                    		sub		si,dx
   586 000003EC 56                      		push    si			;coloca a abcisa xc-x na pilha
   587 000003ED 89DE                    		mov		si,bx
   588 000003EF 01CE                    		add		si,cx
   589 000003F1 56                      		push    si			;coloca a ordenada yc+y na pilha
   590 000003F2 E834FF                  		call plot_xy		;toma conta do terceiro octante
   591 000003F5 89C6                    		mov		si,ax
   592 000003F7 29D6                    		sub		si,dx
   593 000003F9 56                      		push    si			;coloca a abcisa xc-x na pilha
   594 000003FA 89DE                    		mov		si,bx
   595 000003FC 29CE                    		sub		si,cx
   596 000003FE 56                      		push    si			;coloca a ordenada yc-y na pilha
   597 000003FF E827FF                  		call plot_xy		;toma conta do sexto octante
   598 00000402 89C6                    		mov		si,ax
   599 00000404 29CE                    		sub		si,cx
   600 00000406 56                      		push    si			;coloca a abcisa xc-y na pilha
   601 00000407 89DE                    		mov		si,bx
   602 00000409 29D6                    		sub		si,dx
   603 0000040B 56                      		push    si			;coloca a ordenada yc-x na pilha
   604 0000040C E81AFF                  		call plot_xy		;toma conta do quinto octante
   605 0000040F 89C6                    		mov		si,ax
   606 00000411 29CE                    		sub		si,cx
   607 00000413 56                      		push    si			;coloca a abcisa xc-y na pilha
   608 00000414 89DE                    		mov		si,bx
   609 00000416 01D6                    		add		si,dx
   610 00000418 56                      		push    si			;coloca a ordenada yc-x na pilha
   611 00000419 E80DFF                  		call plot_xy		;toma conta do quarto octante
   612                                  		
   613 0000041C 39D1                    		cmp		cx,dx
   614 0000041E 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   615 00000420 E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   616                                  		
   617                                  fim_circle:
   618 00000423 5F                      		pop		di
   619 00000424 5E                      		pop		si
   620 00000425 5A                      		pop		dx
   621 00000426 59                      		pop		cx
   622 00000427 5B                      		pop		bx
   623 00000428 58                      		pop		ax
   624 00000429 9D                      		popf
   625 0000042A 5D                      		pop		bp
   626 0000042B C20600                  		ret		6
   627                                  ;-----------------------------------------------------------------------------
   628                                  ;    fun��o full_circle
   629                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   630                                  ; cor definida na variavel cor					  
   631                                  full_circle:
   632 0000042E 55                      		push 	bp
   633 0000042F 89E5                    		mov	 	bp,sp
   634 00000431 9C                      		pushf                        ;coloca os flags na pilha
   635 00000432 50                      		push 	ax
   636 00000433 53                      		push 	bx
   637 00000434 51                      		push	cx
   638 00000435 52                      		push	dx
   639 00000436 56                      		push	si
   640 00000437 57                      		push	di
   641                                  
   642 00000438 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   643 0000043B 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   644 0000043E 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   645                                  		
   646 00000441 89DE                    		mov		si,bx
   647 00000443 29CE                    		sub		si,cx
   648 00000445 50                      		push    ax			;coloca xc na pilha			
   649 00000446 56                      		push	si			;coloca yc-r na pilha
   650 00000447 89DE                    		mov		si,bx
   651 00000449 01CE                    		add		si,cx
   652 0000044B 50                      		push	ax		;coloca xc na pilha
   653 0000044C 56                      		push	si		;coloca yc+r na pilha
   654 0000044D E89B00                  		call line
   655                                  		
   656                                  			
   657 00000450 89CF                    		mov		di,cx
   658 00000452 81EF0100                		sub		di,1	 ;di=r-1
   659 00000456 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   660                                  		
   661                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   662                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   663                                  ;valores positivos para d
   664                                  
   665                                  stay_full:				;loop
   666 00000459 89FE                    		mov		si,di
   667 0000045B 81FE0000                		cmp		si,0
   668 0000045F 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   669 00000461 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   670 00000463 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   671 00000465 81C60300                		add		si,3
   672 00000469 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   673 0000046B 42                      		inc		dx		;incrementa dx
   674 0000046C E90E00                  		jmp		plotar_full
   675                                  
   676                                  inf_full:	
   677 0000046F 89D6                    		mov		si,dx
   678 00000471 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   679 00000473 D1E6                    		sal		si,1
   680 00000475 81C60500                		add		si,5
   681 00000479 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   682 0000047B 42                      		inc		dx		;incrementa x (dx)
   683 0000047C 49                      		dec		cx		;decrementa y (cx)
   684                                  	
   685                                  plotar_full:	
   686 0000047D 89C6                    		mov		si,ax
   687 0000047F 01CE                    		add		si,cx
   688 00000481 56                      		push	si		;coloca a abcisa y+xc na pilha			
   689 00000482 89DE                    		mov		si,bx
   690 00000484 29D6                    		sub		si,dx
   691 00000486 56                      		push    si		;coloca a ordenada yc-x na pilha
   692 00000487 89C6                    		mov		si,ax
   693 00000489 01CE                    		add		si,cx
   694 0000048B 56                      		push	si		;coloca a abcisa y+xc na pilha	
   695 0000048C 89DE                    		mov		si,bx
   696 0000048E 01D6                    		add		si,dx
   697 00000490 56                      		push    si		;coloca a ordenada yc+x na pilha	
   698 00000491 E85700                  		call 	line
   699                                  		
   700 00000494 89C6                    		mov		si,ax
   701 00000496 01D6                    		add		si,dx
   702 00000498 56                      		push	si		;coloca a abcisa xc+x na pilha			
   703 00000499 89DE                    		mov		si,bx
   704 0000049B 29CE                    		sub		si,cx
   705 0000049D 56                      		push    si		;coloca a ordenada yc-y na pilha
   706 0000049E 89C6                    		mov		si,ax
   707 000004A0 01D6                    		add		si,dx
   708 000004A2 56                      		push	si		;coloca a abcisa xc+x na pilha	
   709 000004A3 89DE                    		mov		si,bx
   710 000004A5 01CE                    		add		si,cx
   711 000004A7 56                      		push    si		;coloca a ordenada yc+y na pilha	
   712 000004A8 E84000                  		call	line
   713                                  		
   714 000004AB 89C6                    		mov		si,ax
   715 000004AD 29D6                    		sub		si,dx
   716 000004AF 56                      		push	si		;coloca a abcisa xc-x na pilha			
   717 000004B0 89DE                    		mov		si,bx
   718 000004B2 29CE                    		sub		si,cx
   719 000004B4 56                      		push    si		;coloca a ordenada yc-y na pilha
   720 000004B5 89C6                    		mov		si,ax
   721 000004B7 29D6                    		sub		si,dx
   722 000004B9 56                      		push	si		;coloca a abcisa xc-x na pilha	
   723 000004BA 89DE                    		mov		si,bx
   724 000004BC 01CE                    		add		si,cx
   725 000004BE 56                      		push    si		;coloca a ordenada yc+y na pilha	
   726 000004BF E82900                  		call	line
   727                                  		
   728 000004C2 89C6                    		mov		si,ax
   729 000004C4 29CE                    		sub		si,cx
   730 000004C6 56                      		push	si		;coloca a abcisa xc-y na pilha			
   731 000004C7 89DE                    		mov		si,bx
   732 000004C9 29D6                    		sub		si,dx
   733 000004CB 56                      		push    si		;coloca a ordenada yc-x na pilha
   734 000004CC 89C6                    		mov		si,ax
   735 000004CE 29CE                    		sub		si,cx
   736 000004D0 56                      		push	si		;coloca a abcisa xc-y na pilha	
   737 000004D1 89DE                    		mov		si,bx
   738 000004D3 01D6                    		add		si,dx
   739 000004D5 56                      		push    si		;coloca a ordenada yc+x na pilha	
   740 000004D6 E81200                  		call	line
   741                                  		
   742 000004D9 39D1                    		cmp		cx,dx
   743 000004DB 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   744 000004DD E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   745                                  			
   746                                  fim_full_circle:
   747 000004E0 5F                      		pop		di
   748 000004E1 5E                      		pop		si
   749 000004E2 5A                      		pop		dx
   750 000004E3 59                      		pop		cx
   751 000004E4 5B                      		pop		bx
   752 000004E5 58                      		pop		ax
   753 000004E6 9D                      		popf
   754 000004E7 5D                      		pop		bp
   755 000004E8 C20600                  		ret		6
   756                                  ;-----------------------------------------------------------------------------
   757                                  ;
   758                                  ;   fun��o line
   759                                  ;
   760                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   761                                  line:
   762 000004EB 55                      		push		bp
   763 000004EC 89E5                    		mov		bp,sp
   764 000004EE 9C                      		pushf                        ;coloca os flags na pilha
   765 000004EF 50                      		push 		ax
   766 000004F0 53                      		push 		bx
   767 000004F1 51                      		push		cx
   768 000004F2 52                      		push		dx
   769 000004F3 56                      		push		si
   770 000004F4 57                      		push		di
   771 000004F5 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   772 000004F8 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   773 000004FB 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   774 000004FE 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   775 00000501 39C8                    		cmp		ax,cx
   776 00000503 7408                    		je		line2
   777 00000505 721C                    		jb		line1
   778 00000507 91                      		xchg		ax,cx
   779 00000508 87DA                    		xchg		bx,dx
   780 0000050A E91600                  		jmp		line1
   781                                  
   782                                  line2:		; deltax=0
   783 0000050D 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   784 0000050F 7202                    		jb		line3
   785 00000511 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   786                                  
   787                                  line3:	; dx > bx
   788 00000513 50                      		push		ax
   789 00000514 53                      		push		bx
   790 00000515 E811FE                  		call 		plot_xy
   791 00000518 39D3                    		cmp		bx,dx
   792 0000051A 7503                    		jne		line31
   793 0000051C E9C600                  		jmp		fim_line
   794                                  line31:		
   795 0000051F 43                      		inc		bx
   796 00000520 E9F0FF                  		jmp		line3
   797                                  ;deltax <>0
   798                                  line1:
   799                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
   800                                  	; cx > ax
   801 00000523 51                      		push		cx
   802 00000524 29C1                    		sub		cx,ax
   803 00000526 890E[0600]              		mov		[deltax],cx
   804 0000052A 59                      		pop		cx
   805 0000052B 52                      		push		dx
   806 0000052C 29DA                    		sub		dx,bx
   807 0000052E 7702                    		ja		line32
   808 00000530 F7DA                    		neg		dx
   809                                  line32:		
   810 00000532 8916[0800]              		mov		[deltay],dx
   811 00000536 5A                      		pop		dx
   812                                  
   813 00000537 50                      		push		ax
   814 00000538 A1[0600]                		mov		ax,[deltax]
   815 0000053B 3B06[0800]              		cmp		ax,[deltay]
   816 0000053F 58                      		pop		ax
   817 00000540 724D                    		jb		line5
   818                                  
   819                                  	; cx > ax e deltax>deltay
   820 00000542 51                      		push		cx
   821 00000543 29C1                    		sub		cx,ax
   822 00000545 890E[0600]              		mov		[deltax],cx
   823 00000549 59                      		pop		cx
   824 0000054A 52                      		push		dx
   825 0000054B 29DA                    		sub		dx,bx
   826 0000054D 8916[0800]              		mov		[deltay],dx
   827 00000551 5A                      		pop		dx
   828                                  
   829 00000552 89C6                    		mov		si,ax
   830                                  line4:
   831 00000554 50                      		push		ax
   832 00000555 52                      		push		dx
   833 00000556 56                      		push		si
   834 00000557 29C6                    		sub		si,ax	;(x-x1)
   835 00000559 A1[0800]                		mov		ax,[deltay]
   836 0000055C F7EE                    		imul		si
   837 0000055E 8B36[0600]              		mov		si,[deltax]		;arredondar
   838 00000562 D1EE                    		shr		si,1
   839                                  ; se numerador (DX)>0 soma se <0 subtrai
   840 00000564 81FA0000                		cmp		dx,0
   841 00000568 7C09                    		jl		ar1
   842 0000056A 01F0                    		add		ax,si
   843 0000056C 81D20000                		adc		dx,0
   844 00000570 E90600                  		jmp		arc1
   845 00000573 29F0                    ar1:		sub		ax,si
   846 00000575 81DA0000                		sbb		dx,0
   847                                  arc1:
   848 00000579 F73E[0600]              		idiv		word [deltax]
   849 0000057D 01D8                    		add		ax,bx
   850 0000057F 5E                      		pop		si
   851 00000580 56                      		push		si
   852 00000581 50                      		push		ax
   853 00000582 E8A4FD                  		call		plot_xy
   854 00000585 5A                      		pop		dx
   855 00000586 58                      		pop		ax
   856 00000587 39CE                    		cmp		si,cx
   857 00000589 745A                    		je		fim_line
   858 0000058B 46                      		inc		si
   859 0000058C E9C5FF                  		jmp		line4
   860                                  
   861 0000058F 39D3                    line5:		cmp		bx,dx
   862 00000591 7203                    		jb 		line7
   863 00000593 91                      		xchg		ax,cx
   864 00000594 87DA                    		xchg		bx,dx
   865                                  line7:
   866 00000596 51                      		push		cx
   867 00000597 29C1                    		sub		cx,ax
   868 00000599 890E[0600]              		mov		[deltax],cx
   869 0000059D 59                      		pop		cx
   870 0000059E 52                      		push		dx
   871 0000059F 29DA                    		sub		dx,bx
   872 000005A1 8916[0800]              		mov		[deltay],dx
   873 000005A5 5A                      		pop		dx
   874 000005A6 89DE                    		mov		si,bx
   875                                  line6:
   876 000005A8 52                      		push		dx
   877 000005A9 56                      		push		si
   878 000005AA 50                      		push		ax
   879 000005AB 29DE                    		sub		si,bx	;(y-y1)
   880 000005AD A1[0600]                		mov		ax,[deltax]
   881 000005B0 F7EE                    		imul		si
   882 000005B2 8B36[0800]              		mov		si,[deltay]		;arredondar
   883 000005B6 D1EE                    		shr		si,1
   884                                  ; se numerador (DX)>0 soma se <0 subtrai
   885 000005B8 81FA0000                		cmp		dx,0
   886 000005BC 7C09                    		jl		ar2
   887 000005BE 01F0                    		add		ax,si
   888 000005C0 81D20000                		adc		dx,0
   889 000005C4 E90600                  		jmp		arc2
   890                                  ar2:		
   891 000005C7 29F0                    		sub		ax,si
   892 000005C9 81EA0000                		sub		dx,0
   893                                  arc2:
   894 000005CD F73E[0800]              		idiv		word [deltay]
   895 000005D1 89C7                    		mov		di,ax
   896 000005D3 58                      		pop		ax
   897 000005D4 01C7                    		add		di,ax
   898 000005D6 5E                      		pop		si
   899 000005D7 57                      		push		di
   900 000005D8 56                      		push		si
   901 000005D9 E84DFD                  		call		plot_xy
   902 000005DC 5A                      		pop		dx
   903 000005DD 39D6                    		cmp		si,dx
   904 000005DF 7404                    		je		fim_line
   905 000005E1 46                      		inc		si
   906 000005E2 E9C3FF                  		jmp		line6
   907                                  
   908                                  fim_line:
   909 000005E5 5F                      		pop		di
   910 000005E6 5E                      		pop		si
   911 000005E7 5A                      		pop		dx
   912 000005E8 59                      		pop		cx
   913 000005E9 5B                      		pop		bx
   914 000005EA 58                      		pop		ax
   915 000005EB 9D                      		popf
   916 000005EC 5D                      		pop		bp
   917 000005ED C20800                  		ret		8
   918                                  ;*******************************************************************
   919                                  segment data
   920                                  
   921 00000000 0F                      cor		db		branco_intenso
   922                                  
   923                                  ;	I R G B COR
   924                                  ;	0 0 0 0 preto
   925                                  ;	0 0 0 1 azul
   926                                  ;	0 0 1 0 verde
   927                                  ;	0 0 1 1 cyan
   928                                  ;	0 1 0 0 vermelho
   929                                  ;	0 1 0 1 magenta
   930                                  ;	0 1 1 0 marrom
   931                                  ;	0 1 1 1 branco
   932                                  ;	1 0 0 0 cinza
   933                                  ;	1 0 0 1 azul claro
   934                                  ;	1 0 1 0 verde claro
   935                                  ;	1 0 1 1 cyan claro
   936                                  ;	1 1 0 0 rosa
   937                                  ;	1 1 0 1 magenta claro
   938                                  ;	1 1 1 0 amarelo
   939                                  ;	1 1 1 1 branco intenso
   940                                  
   941                                  preto			equ		0
   942                                  azul			equ		1
   943                                  verde			equ		2
   944                                  cyan			equ		3
   945                                  vermelho		equ		4
   946                                  magenta			equ		5
   947                                  marrom			equ		6
   948                                  branco			equ		7
   949                                  cinza			equ		8
   950                                  azul_claro		equ		9
   951                                  verde_claro		equ		10
   952                                  cyan_claro		equ		11
   953                                  rosa			equ		12
   954                                  magenta_claro	equ		13
   955                                  amarelo			equ		14
   956                                  branco_intenso	equ		15
   957                                  
   958 00000001 00                      modo_anterior	db		0
   959 00000002 0000                    linha   		dw  		0
   960 00000004 0000                    coluna  		dw  		0
   961 00000006 0000                    deltax			dw		0
   962 00000008 0000                    deltay			dw		0
   963 0000000A 0500                    x1A				dw		5
   964 0000000C 6900                    x2A				dw		105
   965 0000000E 0500                    x1B 			dw		5
   966 00000010 6900                    x2B  			dw		105
   967 00000012 46756E63616F204772-     mens    		db  		'Funcao Grafica'
   968 0000001B 6166696361         
   969                                  
   970 00000020 0E01                    player_x1    	dw      270
   971 00000022 7201                    player_x2    	dw      370
   972 00000024 4001                    px      		dw      320
   973 00000026 1E00                    py      		dw      30
   974 00000028 0500                    vx      		dw      5
   975 0000002A 0500                    vy      		dw      5
   976 0000002C 506175736520            mens_2      	db          'Pause '
   977 00000032 47414D45204F564552      mens_3      	db          'GAME OVER'
   978                                  
   979                                  ;*************************************************************************
   980                                  segment stack stack
   981 00000000 <res 00000200>              		resb 		512
   982                                  stacktop:
