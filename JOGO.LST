     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                    	mov 		ax,data
     4 00000003 8ED8                        	mov 		ds,ax
     5 00000005 B8[0000]                		mov 		ax,stack
     6 00000008 8ED0                    		mov 		ss,ax
     7 0000000A BC[0002]                		mov 		sp,stacktop
     8                                  
     9                                  ; salvar modo corrente de video(vendo como est� o modo de video da maquina)
    10 0000000D B40F                    		mov  		ah,0Fh
    11 0000000F CD10                    		int  		10h
    12 00000011 A2[0500]                		mov  		[modo_anterior],al   
    13                                  
    14                                  ; alterar modo de video para gráfico 640x480 16 cores
    15 00000014 B012                        	mov     	al,12h
    16 00000016 B400                       		mov     	ah,0
    17 00000018 CD10                        	int     	10h
    18                                  		
    19                                  
    20                                  reset_game:
    21                                  ; Desenhando o campo (bordas brancas)
    22 0000001A C606[0000]0F            		mov		byte[cor],branco_intenso
    23 0000001F B80000                  		mov		ax, 0
    24 00000022 50                      		push 	ax
    25 00000023 B80000                  		mov		ax, 0
    26 00000026 50                      		push	ax
    27 00000027 B80000                  		mov		ax, 0
    28 0000002A 50                      		push 	ax
    29 0000002B B8DF01                  		mov		ax, 479
    30 0000002E 50                      		push	ax
    31 0000002F E87B06                  		call	line
    32                                  
    33 00000032 B80000                  		mov		ax, 0
    34 00000035 50                      		push 	ax
    35 00000036 B8DF01                  		mov		ax, 479
    36 00000039 50                      		push	ax
    37 0000003A B87F02                  		mov		ax, 639
    38 0000003D 50                      		push 	ax
    39 0000003E B8DF01                  		mov		ax, 479
    40 00000041 50                      		push	ax
    41 00000042 E86806                  		call	line
    42                                  		
    43 00000045 B87F02                  		mov		ax, 639
    44 00000048 50                      		push 	ax
    45 00000049 B8DF01                  		mov		ax, 479
    46 0000004C 50                      		push	ax
    47 0000004D B87F02                  		mov		ax, 639
    48 00000050 50                      		push 	ax
    49 00000051 B80000                  		mov		ax, 0
    50 00000054 50                      		push	ax
    51 00000055 E85506                  		call	line
    52                                  
    53                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
    54 00000058 B90600                  		mov		cx, 6
    55 0000005B C606[0000]01            		mov		byte[cor], azul
    56                                  	
    57                                  ; Primeira linha de quadrados (linha superior)
    58                                  fazQuadrado1:
    59 00000060 FE06[0000]              		inc		byte[cor]
    60 00000064 A1[0600]                		mov		ax, word[x1A]
    61 00000067 50                      		push 	ax
    62 00000068 B8DD01                  		mov		ax, 477
    63 0000006B 50                      		push	ax
    64 0000006C A1[0800]                		mov		ax, word[x2A]
    65 0000006F 50                      		push 	ax
    66 00000070 B8DD01                  		mov		ax, 477
    67 00000073 50                      		push	ax
    68 00000074 E83606                  		call	line
    69                                  		
    70 00000077 A1[0800]                		mov		ax, word[x2A]
    71 0000007A 50                      		push 	ax
    72 0000007B B8DD01                  		mov		ax, 477
    73 0000007E 50                      		push	ax
    74 0000007F A1[0800]                		mov		ax, word[x2A]
    75 00000082 50                      		push 	ax
    76 00000083 B8B501                  		mov		ax, 437
    77 00000086 50                      		push	ax
    78 00000087 E82306                  		call	line
    79                                  		
    80 0000008A A1[0800]                		mov		ax, word[x2A]
    81 0000008D 50                      		push 	ax
    82 0000008E B8B501                  		mov		ax, 437
    83 00000091 50                      		push	ax
    84 00000092 A1[0600]                		mov		ax, word[x1A]
    85 00000095 50                      		push 	ax
    86 00000096 B8B501                  		mov		ax, 437
    87 00000099 50                      		push	ax
    88 0000009A E81006                  		call	line
    89                                  		
    90 0000009D A1[0600]                		mov		ax, word[x1A]
    91 000000A0 50                      		push 	ax
    92 000000A1 B8B501                  		mov		ax, 437
    93 000000A4 50                      		push	ax
    94 000000A5 A1[0600]                		mov		ax, word[x1A]
    95 000000A8 50                      		push 	ax
    96 000000A9 B8DD01                  		mov		ax, 477
    97 000000AC 50                      		push	ax
    98 000000AD E8FD05                  		call	line
    99 000000B0 8106[0800]6900          		add		word[x2A], 105
   100 000000B6 8106[0600]6900          		add		word[x1A] , 105
   101 000000BC E2A2                    		loop 	fazQuadrado1
   102                                  		
   103                                  		; Carregando cx para fazer o loop e printar os quadrados (a cor é definida fora para ser incrementada dentro do loop)
   104 000000BE B90600                  		mov		cx, 6
   105 000000C1 C606[0000]08            		mov		byte[cor], cinza
   106                                  		
   107                                  fazQuadrado2: ; Segunda linha de quadrados (linha inferior)
   108 000000C6 FE06[0000]              		inc		byte[cor]
   109 000000CA A1[0A00]                		mov		ax, word[x1B]
   110 000000CD 50                      		push 	ax
   111 000000CE B8AB01                  		mov		ax, 427
   112 000000D1 50                      		push	ax
   113 000000D2 A1[0C00]                		mov		ax, word[x2B]
   114 000000D5 50                      		push 	ax
   115 000000D6 B8AB01                  		mov		ax, 427
   116 000000D9 50                      		push	ax
   117 000000DA E8D005                  		call	line
   118                                  		
   119 000000DD A1[0C00]                		mov		ax, word[x2B]
   120 000000E0 50                      		push 	ax
   121 000000E1 B8AB01                  		mov		ax, 427
   122 000000E4 50                      		push	ax
   123 000000E5 A1[0C00]                		mov		ax, word[x2B]
   124 000000E8 50                      		push 	ax
   125 000000E9 B88301                  		mov		ax, 387
   126 000000EC 50                      		push	ax
   127 000000ED E8BD05                  		call	line
   128                                  		
   129 000000F0 A1[0C00]                		mov		ax, word[x2B]
   130 000000F3 50                      		push 	ax
   131 000000F4 B88301                  		mov		ax, 387
   132 000000F7 50                      		push	ax
   133 000000F8 A1[0A00]                		mov		ax, word[x1B]
   134 000000FB 50                      		push 	ax
   135 000000FC B88301                  		mov		ax, 387
   136 000000FF 50                      		push	ax
   137 00000100 E8AA05                  		call	line
   138                                  		
   139 00000103 A1[0A00]                		mov		ax, word[x1B]
   140 00000106 50                      		push 	ax
   141 00000107 B88301                  		mov		ax, 387
   142 0000010A 50                      		push	ax
   143 0000010B A1[0A00]                		mov		ax, word[x1B]
   144 0000010E 50                      		push 	ax
   145 0000010F B8AB01                  		mov		ax, 427
   146 00000112 50                      		push	ax
   147 00000113 E89705                  		call	line
   148 00000116 8106[0C00]6900          		add		word[x2B], 105
   149 0000011C 8106[0A00]6900          		add		word[x1B] , 105
   150 00000122 E2A2                    		loop 	fazQuadrado2
   151                                  
   152                                  
   153                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   154                                  
   155                                  continua:
   156 00000124 E88500                      	call limpa_bola
   157                                  
   158 00000127 8B1E[2600]                      mov bx, [vx]
   159 0000012B 011E[1600]                      add [px], bx
   160 0000012F 8B1E[2800]                      mov bx, [vy]
   161 00000133 011E[1800]                      add [py], bx
   162                                  
   163 00000137 C606[0000]0F            		mov		byte[cor],	branco_intenso ; Bola branca
   164 0000013C A1[1600]                		mov		ax,[px]
   165 0000013F 50                      		push		ax
   166 00000140 A1[1800]                		mov		ax,[py]
   167 00000143 50                      		push		ax
   168 00000144 B81000                  		mov		ax,16
   169 00000147 50                      		push		ax
   170 00000148 E8A504                  		call	full_circle
   171                                  
   172 0000014B A1[1200]                		mov		ax, [player_x1] ; Desenhando a raquete
   173 0000014E 50                      		push 	ax
   174 0000014F B80A00                  		mov		ax, 10
   175 00000152 50                      		push	ax
   176 00000153 A1[1400]                		mov		ax, [player_x2]
   177 00000156 50                      		push 	ax
   178 00000157 B80A00                  		mov		ax, 10
   179 0000015A 50                      		push	ax
   180 0000015B E84F05                  		call	line
   181                                  
   182 0000015E 59                              pop cx ; Recupera cx da pilha
   183 0000015F E207                            loop del1 ; No loop del1, cx é decrementado até que volte a ser zero
   184 00000161 E201                            loop del2 ; No loop del2, cx é decrementado até que seja zero
   185 00000163 C3                              ret
   186                                  
   187                                  del2:
   188 00000164 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   189 00000165 B90008                          mov cx, 0800h ; Teste modificando este valor
   190                                  
   191                                  del1:
   192 00000168 BB6702                          mov bx, 615 ;Limita o campo na parte da direita
   193 0000016B 391E[1600]                      cmp [px], bx
   194 0000016F 7D50                            jge moveesquerda
   195                                  
   196 00000171 BB1400                          mov bx, 20 ; Limita o campo na parte da esquerda
   197 00000174 391E[1600]                      cmp [px], bx
   198 00000178 7E58                            jle movedireita
   199                                  
   200 0000017A BB6C01                          mov bx, 364 ; Limita o campo na parte de cima
   201 0000017D 391E[1800]                      cmp [py], bx
   202 00000181 7D77                    		jge movebaixo
   203                                  
   204                                  sobe_mais:
   205 00000183 BB9E01                  		mov	bx, 414
   206 00000186 391E[1800]              		cmp	[py], bx
   207 0000018A 7D57                    		jge	intermediateNaoApaga
   208                                  
   209 0000018C BB0A00                          mov bx, 10 ; Limita o campo na parte de baixo
   210 0000018F 391E[1800]                      cmp [py], bx
   211 00000193 7E54                            jle movecima
   212                                  
   213 00000195 B40B                            mov ah, 0bh      
   214 00000197 CD21                            int 21h
   215 00000199 3C00                            cmp al,0
   216 0000019B 7549                            jne intermediateVerifTeclas
   217 0000019D E85B02                  		call calcular_colisao_raquete
   218 000001A0 E981FF                          jmp continua
   219                                  
   220 000001A3 E87EFF                  		call delay
   221 000001A6 E8BFFF                  		call del1
   222 000001A9 E8B8FF                  		call del2
   223                                  
   224                                  limpa_bola:
   225 000001AC C606[0000]00                    mov     byte[cor],preto ; limpa bola
   226 000001B1 A1[1600]                        mov     ax,[px]
   227 000001B4 50                              push        ax
   228 000001B5 A1[1800]                        mov     ax,[py]
   229 000001B8 50                              push        ax
   230 000001B9 B81400                          mov     ax,20
   231 000001BC 50                              push        ax
   232 000001BD E83004                          call    full_circle
   233 000001C0 C3                              ret
   234                                  
   235                                  moveesquerda:
   236 000001C1 E8E8FF                          call limpa_bola
   237 000001C4 A1[2600]                		mov ax, [vx]
   238 000001C7 F7D8                            neg ax
   239 000001C9 89C3                            mov bx, ax
   240 000001CB 891E[2600]                      mov [vx], bx
   241 000001CF E952FF                          jmp continua
   242                                  
   243                                  movedireita:
   244 000001D2 E8D7FF                  		call limpa_bola
   245 000001D5 A1[2600]                        mov ax, [vx]
   246 000001D8 F7D8                            neg ax
   247 000001DA 89C3                            mov bx, ax
   248 000001DC 891E[2600]                      mov [vx], bx
   249 000001E0 E941FF                          jmp continua
   250                                  
   251                                  intermediateNaoApaga
   252 000001E3 E98F01                  	jmp	nao_apaga
   253                                  
   254                                  intermediateVerifTeclas: ;	Função intermediária para pular para outra parte do código
   255 000001E6 E9A601                  	jmp verificar_teclas
   256                                  
   257                                  movecima:
   258 000001E9 A1[2800]                        mov ax, [vy]
   259 000001EC F7D8                            neg ax
   260 000001EE 89C3                            mov bx, ax
   261 000001F0 891E[2800]                      mov [vy], bx
   262 000001F4 E92DFF                          jmp continua
   263                                  
   264                                  intermediateSobeMais:
   265 000001F7 E989FF                  	jmp	sobe_mais
   266                                  
   267                                  ; NA PARTE DE DEVOLVER A BOLA PARA BAIXO, É FEITA A VERIFICAÇÃO DA COLISÃO COM UM QUADRADO
   268                                  movebaixo:
   269 000001FA B80500                  		mov ax, 5 ; Quadrado 1
   270 000001FD 3906[1600]              		cmp [px], ax
   271 00000201 7D2D                    		jge	verifica_quad1 ; Pula para verificar se acertou no limite do quadrado (todos repetem essa lógica)
   272                                  volta1:
   273 00000203 B86E00                  		mov ax, 110 ; Quadrado 2
   274 00000206 3906[1600]              		cmp [px], ax
   275 0000020A 7D46                    		jge	verifica_quad2
   276                                  volta2:
   277 0000020C B8D700                  		mov ax, 215 ; Quadrado 3
   278 0000020F 3906[1600]              		cmp [px], ax
   279 00000213 7D70                    		jge	verifica_quad3
   280                                  volta3:
   281 00000215 B84001                  		mov ax, 320 ; Quadrado 4
   282 00000218 3906[1600]              		cmp [px], ax
   283 0000021C 7D5E                    		jge	intermediateVerificaQuad4
   284                                  volta4:
   285 0000021E B8A901                  		mov ax, 425 ; Quadrado 5
   286 00000221 3906[1600]              		cmp [px], ax
   287 00000225 7D58                    		jge	intermediateVerificaQuad5
   288                                  volta5:
   289 00000227 B81202                  		mov ax, 530 ; Quadrado 6
   290 0000022A 3906[1600]              		cmp [px], ax
   291 0000022E 7D52                    		jge	intermediateVerificaQuad6
   292                                  
   293                                  
   294                                  verifica_quad1:
   295 00000230 B80100                  		mov	ax, 1
   296 00000233 3B06[1A00]              		cmp ax, word[bloco_quebrado1]
   297 00000237 B86900                  		mov ax, 105
   298 0000023A 3906[1600]              		cmp	[px], ax
   299 0000023E C706[0E00]0500          		mov word[apaga1], 5
   300 00000244 C706[1000]6900          		mov word[apaga2], 105
   301 0000024A 7FB7                    		jg volta1 ; Se não acertou, volta para verificar o próximo quadrado
   302 0000024C E9D500                  		jmp	apaga_quad ; Se acertou no limite, apaga o quadrado e rebate a bola
   303                                  
   304                                  intermediateSobeMais2:
   305 0000024F E9A5FF                  	jmp intermediateSobeMais
   306                                  
   307                                  verifica_quad2:
   308 00000252 B80100                  		mov	ax, 1
   309 00000255 3B06[1C00]              		cmp ax, [bloco_quebrado2]
   310 00000259 749C                    		je	intermediateSobeMais
   311 0000025B B8D200                  		mov ax, 210
   312 0000025E 3906[1600]              		cmp	[px], ax
   313 00000262 C706[0E00]6E00          		mov word[apaga1], 110
   314 00000268 C706[1000]D200          		mov word[apaga2], 210
   315 0000026E 7F9C                    		jg volta2
   316 00000270 E9B100                  		jmp	apaga_quad
   317                                  
   318                                  ;	Funções intermediárias para resolver o 'short jump'
   319                                  intermediateVolta4:
   320 00000273 E9A8FF                  	jmp	volta4
   321                                  
   322                                  intermediateVolta3:
   323 00000276 E99CFF                  	jmp	volta3
   324                                  
   325                                  intermediateVolta5:
   326 00000279 E9ABFF                  	jmp	volta5
   327                                  
   328                                  intermediateVerificaQuad4:
   329 0000027C E93000                  	jmp verifica_quad4
   330                                  
   331                                  intermediateVerificaQuad5:
   332 0000027F E95400                  	jmp verifica_quad5
   333                                  
   334                                  intermediateVerificaQuad6:
   335 00000282 E97800                  	jmp verifica_quad6
   336                                  
   337                                  
   338                                  verifica_quad3:
   339 00000285 B80100                  		mov	ax, 1
   340 00000288 3B06[1E00]              		cmp ax, [bloco_quebrado3]
   341 0000028C 74C1                    		je	intermediateSobeMais2
   342 0000028E B83B01                  		mov ax, 315
   343 00000291 3906[1600]              		cmp	[px], ax
   344 00000295 C706[0E00]D700          		mov word[apaga1], 215
   345 0000029B C706[1000]3B01          		mov word[apaga2], 315
   346 000002A1 7DD3                    		jge intermediateVolta3
   347 000002A3 B80100                  		mov	ax, 1
   348 000002A6 A3[1E00]                		mov	word[bloco_quebrado3], ax
   349 000002A9 E97800                  		jmp	apaga_quad
   350                                  
   351                                  intermediateSobeMais3
   352 000002AC E9A0FF                  	jmp intermediateSobeMais2
   353                                  
   354                                  verifica_quad4:
   355 000002AF B80100                  		mov	ax, 1
   356 000002B2 3B06[2000]              		cmp ax, [bloco_quebrado4]
   357 000002B6 7497                    		je	intermediateSobeMais2
   358 000002B8 B8A401                  		mov ax, 420
   359 000002BB 3906[1600]              		cmp	[px], ax
   360 000002BF C706[0E00]4001          		mov word[apaga1], 320
   361 000002C5 C706[1000]A401          		mov word[apaga2], 420
   362 000002CB 7DA6                    		jge intermediateVolta4
   363 000002CD B80100                  		mov	ax, 1
   364 000002D0 A3[2000]                		mov	word[bloco_quebrado4], ax
   365 000002D3 E94E00                  		jmp	apaga_quad
   366                                  
   367                                  verifica_quad5:
   368 000002D6 B80100                  		mov	ax, 1
   369 000002D9 3B06[2200]              		cmp ax, [bloco_quebrado5]
   370 000002DD 74CD                    		je	intermediateSobeMais3
   371 000002DF B80D02                  		mov ax, 525
   372 000002E2 3906[1600]              		cmp	[px], ax
   373 000002E6 C706[0E00]A901          		mov word[apaga1], 425
   374 000002EC C706[1000]0D02          		mov word[apaga2], 525
   375 000002F2 7D85                    		jge intermediateVolta5
   376 000002F4 B80100                  		mov	ax, 1
   377 000002F7 A3[2200]                		mov	word[bloco_quebrado5], ax
   378 000002FA E92700                  		jmp	apaga_quad
   379                                  
   380                                  verifica_quad6:
   381 000002FD B80100                  		mov	ax, 1
   382 00000300 3B06[2400]              		cmp ax, [bloco_quebrado6]
   383 00000304 74A6                    		je	intermediateSobeMais3
   384 00000306 B87602                  		mov ax, 630
   385 00000309 3906[1600]              		cmp	[px], ax
   386 0000030D C706[0E00]1202          		mov word[apaga1], 530
   387 00000313 C706[1000]7602          		mov word[apaga2], 630
   388 00000319 7D5A                    		jge nao_apaga
   389 0000031B B80100                  		mov	ax, 1
   390 0000031E A3[2400]                		mov	word[bloco_quebrado6], ax
   391 00000321 E90000                  		jmp	apaga_quad
   392                                  
   393                                  
   394                                  apaga_quad:
   395 00000324 C606[0000]00            		mov		byte[cor], preto
   396 00000329 A1[0E00]                		mov		ax, word[apaga1]
   397 0000032C 50                      		push 	ax
   398 0000032D B8AB01                  		mov		ax, 427
   399 00000330 50                      		push	ax
   400 00000331 A1[1000]                		mov		ax, word[apaga2]
   401 00000334 50                      		push 	ax
   402 00000335 B8AB01                  		mov		ax, 427
   403 00000338 50                      		push	ax
   404 00000339 E87103                  		call	line
   405                                  		
   406 0000033C A1[1000]                		mov		ax, word[apaga2]
   407 0000033F 50                      		push 	ax
   408 00000340 B8AB01                  		mov		ax, 427
   409 00000343 50                      		push	ax
   410 00000344 A1[1000]                		mov		ax, word[apaga2]
   411 00000347 50                      		push 	ax
   412 00000348 B88301                  		mov		ax, 387
   413 0000034B 50                      		push	ax
   414 0000034C E85E03                  		call	line
   415                                  		
   416 0000034F A1[1000]                		mov		ax, word[apaga2]
   417 00000352 50                      		push 	ax
   418 00000353 B88301                  		mov		ax, 387
   419 00000356 50                      		push	ax
   420 00000357 A1[0E00]                		mov		ax, word[apaga1]
   421 0000035A 50                      		push 	ax
   422 0000035B B88301                  		mov		ax, 387
   423 0000035E 50                      		push	ax
   424 0000035F E84B03                  		call	line
   425                                  		
   426 00000362 A1[0E00]                		mov		ax, word[apaga1]
   427 00000365 50                      		push 	ax
   428 00000366 B88301                  		mov		ax, 387
   429 00000369 50                      		push	ax
   430 0000036A A1[0E00]                		mov		ax, word[apaga1]
   431 0000036D 50                      		push 	ax
   432 0000036E B8AB01                  		mov		ax, 427
   433 00000371 50                      		push	ax
   434 00000372 E83803                  		call	line
   435                                  
   436                                  nao_apaga:
   437 00000375 A1[2800]                        mov ax, [vy]
   438 00000378 F7D8                            neg ax
   439 0000037A 89C3                            mov bx, ax
   440 0000037C 891E[2800]                      mov [vy], bx
   441 00000380 E9A1FD                          jmp continua
   442                                  
   443                                  sai:
   444 00000383 B400                            mov ah,0 ; set video mode
   445 00000385 A0[0500]                        mov al,[modo_anterior] ; recupera o modo anterior
   446 00000388 CD10                            int 10h
   447 0000038A B8004C                          mov ax,4c00h
   448 0000038D CD21                            int 21h
   449                                  		
   450                                  
   451                                  verificar_teclas: ;Estrutura para decidir o que será feito durante o jogo
   452 0000038F 55                              push bp
   453 00000390 89E5                            mov bp, sp
   454 00000392 B408                            mov ah, 08h
   455 00000394 CD21                            int 21h
   456 00000396 3C70                    		cmp al, 70h ; Código ASCII para a tecla 'p'
   457 00000398 742B                    		je	pausa
   458 0000039A 3C71                            cmp al, 71h ; Código ASCII para a tecla 'q'
   459 0000039C 74E5                            je sai
   460 0000039E 3C64                            cmp al, 64h ; Código ASCII para a tecla 'd'
   461 000003A0 752E                            jne verificar_baixo
   462 000003A2 E8B500                          call limpa_raquete ;Se 'd' não for pressionado, ele pula para baixo e mexe a raquete
   463 000003A5 B81400                          mov ax, 20 ;deslocamento de 20 em 20 da raquete
   464 000003A8 BB7602                          mov bx, 630 ;testa se já chegou no limite
   465 000003AB 391E[1400]                      cmp [player_x2], bx
   466 000003AF 7D46                            jge fim_verificar_teclas
   467 000003B1 0306[1200]                      add ax, [player_x1]
   468 000003B5 A3[1200]                        mov [player_x1], ax
   469 000003B8 B81400                          mov ax, 20
   470 000003BB 0306[1400]                      add ax, [player_x2]
   471 000003BF A3[1400]                        mov [player_x2], ax
   472 000003C2 E93200                          jmp fim_verificar_teclas
   473                                  
   474                                  
   475                                  pausa:
   476 000003C5 B408                            mov ah, 08h
   477 000003C7 CD21                            int 21h
   478 000003C9 3C70                    		cmp al, 70h ;Compara a tecla com a letra 'p', fica parado aqui até apertar 'p' novamente
   479 000003CB 75F8                    		jne pausa
   480 000003CD E954FD                  		jmp continua
   481                                  
   482                                  verificar_baixo:
   483 000003D0 3C61                            cmp al, 61h
   484 000003D2 7523                            jne fim_verificar_teclas
   485 000003D4 E88300                          call limpa_raquete
   486 000003D7 B8ECFF                          mov ax, -20
   487 000003DA BB0A00                          mov bx, 10
   488 000003DD 391E[1200]                      cmp [player_x1], bx
   489 000003E1 7E14                            jle fim_verificar_teclas
   490 000003E3 0306[1200]                      add ax, [player_x1]
   491 000003E7 A3[1200]                        mov [player_x1], ax
   492 000003EA B8ECFF                          mov ax, -20
   493 000003ED 0306[1400]                      add ax, [player_x2]
   494 000003F1 A3[1400]                        mov [player_x2], ax
   495 000003F4 E90000                          jmp fim_verificar_teclas
   496                                  
   497                                  fim_verificar_teclas:
   498 000003F7 5D                              pop bp
   499 000003F8 E929FD                          jmp continua
   500                                  
   501                                  calcular_colisao_raquete:
   502 000003FB B81E00                          mov ax, 30
   503 000003FE 3906[1800]                      cmp [py], ax
   504 00000402 7403                            je verifica_colisao_raquete
   505 00000404 7C6D                    		jl game_over
   506 00000406 C3                              ret
   507                                  
   508                                  verifica_colisao_raquete:
   509 00000407 8B1E[1400]                      mov bx, [player_x2]
   510 0000040B 81C31000                        add bx, 16
   511 0000040F 391E[1600]                      cmp [px], bx
   512 00000413 7E0F                            jle rebate_cima1
   513 00000415 8B1E[1200]                      mov bx, [player_x1]
   514 00000419 81EB1000                        sub bx, 16
   515 0000041D 391E[1600]                      cmp [px], bx
   516 00000421 7D1C                            jge rebate_baixo1
   517 00000423 C3                              ret
   518                                  
   519                                  ;FUNÇÕES RESPONSÁVEIS POR REBATER A BOLA E ALTERAR A DIREÇÃO (ESQUERDA OU DIREITA)
   520                                  rebate_cima1:
   521 00000424 8B1E[1200]              		mov bx, [player_x1]
   522 00000428 81EB1000                		sub bx, 16
   523 0000042C 391E[1600]              		cmp [px], bx
   524 00000430 7D01                    		jge rebate_cima2
   525 00000432 C3                              ret
   526                                  
   527                                  rebate_cima2:
   528 00000433 A1[2800]                        mov ax, [vy]
   529 00000436 F7D8                            neg ax
   530 00000438 89C3                            mov bx, ax
   531 0000043A 891E[2800]              		mov [vy], bx
   532 0000043E C3                              ret
   533                                  
   534                                  rebate_baixo1:
   535 0000043F 8B1E[1400]                      mov bx, [player_x2]
   536 00000443 81C31000                        add bx, 16
   537 00000447 391E[1600]                      cmp [px], bx
   538 0000044B 7E01                            jle rebate_baixo2
   539 0000044D C3                              ret
   540                                  
   541                                  rebate_baixo2:
   542 0000044E A1[2800]                        mov ax, [vy]
   543 00000451 F7D8                            neg ax
   544 00000453 89C3                            mov bx, ax
   545 00000455 891E[2800]                      mov [vy], bx
   546 00000459 C3                              ret
   547                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   548                                  
   549                                  limpa_raquete: ;FUNÇÃO UTILIZADA PARA ATUALIZAR A POSIÇÃO DA RAQUETE 
   550 0000045A C606[0000]00                    mov     byte[cor], preto
   551 0000045F A1[1200]                        mov     ax,[player_x1]
   552 00000462 50                              push    ax
   553 00000463 B80A00                          mov     ax,10
   554 00000466 50                              push    ax
   555 00000467 A1[1400]                        mov     ax,[player_x2]
   556 0000046A 50                              push    ax
   557 0000046B B80A00                          mov     ax,10
   558 0000046E 50                              push    ax
   559 0000046F E83B02                          call    line
   560 00000472 C3                              ret
   561                                  
   562                                  game_over: ;;Escreve a mensagem na tela e espera a tecla do jogador
   563 00000473 B92300                  		mov     	cx,35			;número de caracteres
   564 00000476 BB0000                      	mov     	bx,0
   565 00000479 B60A                        	mov     	dh,10			
   566 0000047B B20A                        	mov     	dl,10
   567 0000047D C606[0000]0F            		mov		byte[cor],branco_intenso
   568                                  
   569                                  repete_para_escrever:
   570 00000482 E83100                  		call	cursor
   571 00000485 8A87[2A00]                  	mov     al,[bx+mens_3]
   572 00000489 E84100                  		call	caracter
   573 0000048C 43                          	inc     bx			;proximo caracter
   574 0000048D FEC2                    		inc		dl			;avanca a coluna
   575 0000048F E2F1                        	loop    repete_para_escrever
   576                                  
   577                                  verfica_continua_ou_nao:
   578 00000491 55                      		push bp
   579 00000492 89E5                            mov bp, sp
   580                                  
   581 00000494 B408                    		mov ah, 08h
   582 00000496 CD21                            int 21h
   583 00000498 3C6E                    		cmp al, 6eh
   584 0000049A 7407                    		je	acaba
   585 0000049C 3C79                    		cmp al, 79h
   586 0000049E 7413                    		je limpa_tudo
   587 000004A0 E9EEFF                  		jmp	verfica_continua_ou_nao
   588                                  
   589                                  acaba: ;Finalizando o programa
   590 000004A3 B408                    		mov    	ah,08h
   591 000004A5 CD21                    		int     21h
   592 000004A7 B400                    	    mov  	ah,0   					; set video mode
   593 000004A9 A0[0500]                	    mov  	al,[modo_anterior]   	; modo anterior
   594 000004AC CD10                    	    int  	10h
   595 000004AE B8004C                  		mov     ax,4c00h
   596 000004B1 CD21                    		int     21h
   597                                  
   598                                  limpa_tudo: ;FUNÇÃO PARA LIMPAR O CAMPO TODO E VOLTAR PARA O ZERO
   599 000004B3 E864FB                  	call reset_game
   600                                  
   601                                  ;***************************************************************************
   602                                  ;
   603                                  ;   função cursor
   604                                  ;
   605                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   606                                  cursor:
   607 000004B6 9C                      		pushf
   608 000004B7 50                      		push 		ax
   609 000004B8 53                      		push 		bx
   610 000004B9 51                      		push		cx
   611 000004BA 52                      		push		dx
   612 000004BB 56                      		push		si
   613 000004BC 57                      		push		di
   614 000004BD 55                      		push		bp
   615 000004BE B402                    		mov     	ah,2
   616 000004C0 B700                    		mov     	bh,0
   617 000004C2 CD10                    		int     	10h
   618 000004C4 5D                      		pop		bp
   619 000004C5 5F                      		pop		di
   620 000004C6 5E                      		pop		si
   621 000004C7 5A                      		pop		dx
   622 000004C8 59                      		pop		cx
   623 000004C9 5B                      		pop		bx
   624 000004CA 58                      		pop		ax
   625 000004CB 9D                      		popf
   626 000004CC C3                      		ret
   627                                  ;_____________________________________________________________________________
   628                                  ;
   629                                  ;   fun��o caracter escrito na posi��o do cursor
   630                                  ;
   631                                  ; al= caracter a ser escrito
   632                                  ; cor definida na variavel cor
   633                                  caracter:
   634 000004CD 9C                      		pushf
   635 000004CE 50                      		push 		ax
   636 000004CF 53                      		push 		bx
   637 000004D0 51                      		push		cx
   638 000004D1 52                      		push		dx
   639 000004D2 56                      		push		si
   640 000004D3 57                      		push		di
   641 000004D4 55                      		push		bp
   642 000004D5 B409                        	mov     	ah,9
   643 000004D7 B700                        	mov     	bh,0
   644 000004D9 B90100                      	mov     	cx,1
   645 000004DC 8A1E[0000]                 		mov     	bl,[cor]
   646 000004E0 CD10                        	int     	10h
   647 000004E2 5D                      		pop			bp
   648 000004E3 5F                      		pop			di
   649 000004E4 5E                      		pop			si
   650 000004E5 5A                      		pop			dx
   651 000004E6 59                      		pop			cx
   652 000004E7 5B                      		pop			bx
   653 000004E8 58                      		pop			ax
   654 000004E9 9D                      		popf
   655 000004EA C3                      		ret
   656                                  ;_____________________________________________________________________________
   657                                  ;
   658                                  ;   fun��o plot_xy
   659                                  ;
   660                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   661                                  ; cor definida na variavel cor
   662                                  plot_xy:
   663 000004EB 55                      		push		bp
   664 000004EC 89E5                    		mov			bp,sp
   665 000004EE 9C                      		pushf
   666 000004EF 50                      		push 		ax
   667 000004F0 53                      		push 		bx
   668 000004F1 51                      		push		cx
   669 000004F2 52                      		push		dx
   670 000004F3 56                      		push		si
   671 000004F4 57                      		push		di
   672 000004F5 B40C                    	    mov     	ah,0ch
   673 000004F7 A0[0000]                	    mov     	al,[cor]
   674 000004FA B700                    	    mov     	bh,0
   675 000004FC BADF01                  	    mov     	dx,479
   676 000004FF 2B5604                  		sub			dx,[bp+4]
   677 00000502 8B4E06                  	    mov     	cx,[bp+6]
   678 00000505 CD10                    	    int     	10h
   679 00000507 5F                      		pop			di
   680 00000508 5E                      		pop			si
   681 00000509 5A                      		pop			dx
   682 0000050A 59                      		pop			cx
   683 0000050B 5B                      		pop			bx
   684 0000050C 58                      		pop			ax
   685 0000050D 9D                      		popf	
   686 0000050E 5D                      		pop			bp
   687 0000050F C20400                  		ret			4
   688                                  ;_____________________________________________________________________________
   689                                  ;    fun��o circle
   690                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   691                                  ; cor definida na variavel cor
   692                                  circle:
   693 00000512 55                      		push 	bp
   694 00000513 89E5                    		mov	 	bp,sp
   695 00000515 9C                      		pushf                        ;coloca os flags na pilha
   696 00000516 50                      		push 	ax
   697 00000517 53                      		push 	bx
   698 00000518 51                      		push	cx
   699 00000519 52                      		push	dx
   700 0000051A 56                      		push	si
   701 0000051B 57                      		push	di
   702                                  		
   703 0000051C 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   704 0000051F 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   705 00000522 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   706                                  		
   707 00000525 89DA                    		mov 	dx,bx	
   708 00000527 01CA                    		add		dx,cx       ;ponto extremo superior
   709 00000529 50                      		push    ax			
   710 0000052A 52                      		push	dx
   711 0000052B E8BDFF                  		call plot_xy
   712                                  		
   713 0000052E 89DA                    		mov		dx,bx
   714 00000530 29CA                    		sub		dx,cx       ;ponto extremo inferior
   715 00000532 50                      		push    ax			
   716 00000533 52                      		push	dx
   717 00000534 E8B4FF                  		call plot_xy
   718                                  		
   719 00000537 89C2                    		mov 	dx,ax	
   720 00000539 01CA                    		add		dx,cx       ;ponto extremo direita
   721 0000053B 52                      		push    dx			
   722 0000053C 53                      		push	bx
   723 0000053D E8ABFF                  		call plot_xy
   724                                  		
   725 00000540 89C2                    		mov		dx,ax
   726 00000542 29CA                    		sub		dx,cx       ;ponto extremo esquerda
   727 00000544 52                      		push    dx			
   728 00000545 53                      		push	bx
   729 00000546 E8A2FF                  		call plot_xy
   730                                  			
   731 00000549 89CF                    		mov		di,cx
   732 0000054B 81EF0100                		sub		di,1	 ;di=r-1
   733 0000054F BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   734                                  		
   735                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   736                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   737                                  ;valores positivos para d
   738                                  
   739                                  stay:				;loop
   740 00000552 89FE                    		mov		si,di
   741 00000554 81FE0000                		cmp		si,0
   742 00000558 7F0E                    		jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   743 0000055A 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   744 0000055C D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   745 0000055E 81C60300                		add		si,3
   746 00000562 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   747 00000564 42                      		inc		dx		;incrementa dx
   748 00000565 E90E00                  		jmp		plotar
   749                                  inf:	
   750 00000568 89D6                    		mov		si,dx
   751 0000056A 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   752 0000056C D1E6                    		sal		si,1
   753 0000056E 81C60500                		add		si,5
   754 00000572 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   755 00000574 42                      		inc		dx		;incrementa x (dx)
   756 00000575 49                      		dec		cx		;decrementa y (cx)
   757                                  	
   758                                  plotar:	
   759 00000576 89D6                    		mov		si,dx
   760 00000578 01C6                    		add		si,ax
   761 0000057A 56                      		push    si			;coloca a abcisa x+xc na pilha
   762 0000057B 89CE                    		mov		si,cx
   763 0000057D 01DE                    		add		si,bx
   764 0000057F 56                      		push    si			;coloca a ordenada y+yc na pilha
   765 00000580 E868FF                  		call plot_xy		;toma conta do segundo octante
   766 00000583 89C6                    		mov		si,ax
   767 00000585 01D6                    		add		si,dx
   768 00000587 56                      		push    si			;coloca a abcisa xc+x na pilha
   769 00000588 89DE                    		mov		si,bx
   770 0000058A 29CE                    		sub		si,cx
   771 0000058C 56                      		push    si			;coloca a ordenada yc-y na pilha
   772 0000058D E85BFF                  		call plot_xy		;toma conta do s�timo octante
   773 00000590 89C6                    		mov		si,ax
   774 00000592 01CE                    		add		si,cx
   775 00000594 56                      		push    si			;coloca a abcisa xc+y na pilha
   776 00000595 89DE                    		mov		si,bx
   777 00000597 01D6                    		add		si,dx
   778 00000599 56                      		push    si			;coloca a ordenada yc+x na pilha
   779 0000059A E84EFF                  		call plot_xy		;toma conta do segundo octante
   780 0000059D 89C6                    		mov		si,ax
   781 0000059F 01CE                    		add		si,cx
   782 000005A1 56                      		push    si			;coloca a abcisa xc+y na pilha
   783 000005A2 89DE                    		mov		si,bx
   784 000005A4 29D6                    		sub		si,dx
   785 000005A6 56                      		push    si			;coloca a ordenada yc-x na pilha
   786 000005A7 E841FF                  		call plot_xy		;toma conta do oitavo octante
   787 000005AA 89C6                    		mov		si,ax
   788 000005AC 29D6                    		sub		si,dx
   789 000005AE 56                      		push    si			;coloca a abcisa xc-x na pilha
   790 000005AF 89DE                    		mov		si,bx
   791 000005B1 01CE                    		add		si,cx
   792 000005B3 56                      		push    si			;coloca a ordenada yc+y na pilha
   793 000005B4 E834FF                  		call plot_xy		;toma conta do terceiro octante
   794 000005B7 89C6                    		mov		si,ax
   795 000005B9 29D6                    		sub		si,dx
   796 000005BB 56                      		push    si			;coloca a abcisa xc-x na pilha
   797 000005BC 89DE                    		mov		si,bx
   798 000005BE 29CE                    		sub		si,cx
   799 000005C0 56                      		push    si			;coloca a ordenada yc-y na pilha
   800 000005C1 E827FF                  		call plot_xy		;toma conta do sexto octante
   801 000005C4 89C6                    		mov		si,ax
   802 000005C6 29CE                    		sub		si,cx
   803 000005C8 56                      		push    si			;coloca a abcisa xc-y na pilha
   804 000005C9 89DE                    		mov		si,bx
   805 000005CB 29D6                    		sub		si,dx
   806 000005CD 56                      		push    si			;coloca a ordenada yc-x na pilha
   807 000005CE E81AFF                  		call plot_xy		;toma conta do quinto octante
   808 000005D1 89C6                    		mov		si,ax
   809 000005D3 29CE                    		sub		si,cx
   810 000005D5 56                      		push    si			;coloca a abcisa xc-y na pilha
   811 000005D6 89DE                    		mov		si,bx
   812 000005D8 01D6                    		add		si,dx
   813 000005DA 56                      		push    si			;coloca a ordenada yc-x na pilha
   814 000005DB E80DFF                  		call plot_xy		;toma conta do quarto octante
   815                                  		
   816 000005DE 39D1                    		cmp		cx,dx
   817 000005E0 7203                    		jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
   818 000005E2 E96DFF                  		jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
   819                                  		
   820                                  fim_circle:
   821 000005E5 5F                      		pop		di
   822 000005E6 5E                      		pop		si
   823 000005E7 5A                      		pop		dx
   824 000005E8 59                      		pop		cx
   825 000005E9 5B                      		pop		bx
   826 000005EA 58                      		pop		ax
   827 000005EB 9D                      		popf
   828 000005EC 5D                      		pop		bp
   829 000005ED C20600                  		ret		6
   830                                  ;-----------------------------------------------------------------------------
   831                                  ;    fun��o full_circle
   832                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   833                                  ; cor definida na variavel cor					  
   834                                  full_circle:
   835 000005F0 55                      		push 	bp
   836 000005F1 89E5                    		mov	 	bp,sp
   837 000005F3 9C                      		pushf                        ;coloca os flags na pilha
   838 000005F4 50                      		push 	ax
   839 000005F5 53                      		push 	bx
   840 000005F6 51                      		push	cx
   841 000005F7 52                      		push	dx
   842 000005F8 56                      		push	si
   843 000005F9 57                      		push	di
   844                                  
   845 000005FA 8B4608                  		mov		ax,[bp+8]    ; resgata xc
   846 000005FD 8B5E06                  		mov		bx,[bp+6]    ; resgata yc
   847 00000600 8B4E04                  		mov		cx,[bp+4]    ; resgata r
   848                                  		
   849 00000603 89DE                    		mov		si,bx
   850 00000605 29CE                    		sub		si,cx
   851 00000607 50                      		push    ax			;coloca xc na pilha			
   852 00000608 56                      		push	si			;coloca yc-r na pilha
   853 00000609 89DE                    		mov		si,bx
   854 0000060B 01CE                    		add		si,cx
   855 0000060D 50                      		push	ax		;coloca xc na pilha
   856 0000060E 56                      		push	si		;coloca yc+r na pilha
   857 0000060F E89B00                  		call line
   858                                  		
   859                                  			
   860 00000612 89CF                    		mov		di,cx
   861 00000614 81EF0100                		sub		di,1	 ;di=r-1
   862 00000618 BA0000                  		mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
   863                                  		
   864                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
   865                                  ;e as compara��es passaram a ser jl => jg, assim garante 
   866                                  ;valores positivos para d
   867                                  
   868                                  stay_full:				;loop
   869 0000061B 89FE                    		mov		si,di
   870 0000061D 81FE0000                		cmp		si,0
   871 00000621 7F0E                    		jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   872 00000623 89D6                    		mov		si,dx		;o jl � importante porque trata-se de conta com sinal
   873 00000625 D1E6                    		sal		si,1		;multiplica por doi (shift arithmetic left)
   874 00000627 81C60300                		add		si,3
   875 0000062B 01F7                    		add		di,si     ;nesse ponto d=d+2*dx+3
   876 0000062D 42                      		inc		dx		;incrementa dx
   877 0000062E E90E00                  		jmp		plotar_full
   878                                  
   879                                  inf_full:	
   880 00000631 89D6                    		mov		si,dx
   881 00000633 29CE                    		sub		si,cx  		;faz x - y (dx-cx), e salva em di 
   882 00000635 D1E6                    		sal		si,1
   883 00000637 81C60500                		add		si,5
   884 0000063B 01F7                    		add		di,si		;nesse ponto d=d+2*(dx-cx)+5
   885 0000063D 42                      		inc		dx		;incrementa x (dx)
   886 0000063E 49                      		dec		cx		;decrementa y (cx)
   887                                  	
   888                                  plotar_full:	
   889 0000063F 89C6                    		mov		si,ax
   890 00000641 01CE                    		add		si,cx
   891 00000643 56                      		push	si		;coloca a abcisa y+xc na pilha			
   892 00000644 89DE                    		mov		si,bx
   893 00000646 29D6                    		sub		si,dx
   894 00000648 56                      		push    si		;coloca a ordenada yc-x na pilha
   895 00000649 89C6                    		mov		si,ax
   896 0000064B 01CE                    		add		si,cx
   897 0000064D 56                      		push	si		;coloca a abcisa y+xc na pilha	
   898 0000064E 89DE                    		mov		si,bx
   899 00000650 01D6                    		add		si,dx
   900 00000652 56                      		push    si		;coloca a ordenada yc+x na pilha	
   901 00000653 E85700                  		call 	line
   902                                  		
   903 00000656 89C6                    		mov		si,ax
   904 00000658 01D6                    		add		si,dx
   905 0000065A 56                      		push	si		;coloca a abcisa xc+x na pilha			
   906 0000065B 89DE                    		mov		si,bx
   907 0000065D 29CE                    		sub		si,cx
   908 0000065F 56                      		push    si		;coloca a ordenada yc-y na pilha
   909 00000660 89C6                    		mov		si,ax
   910 00000662 01D6                    		add		si,dx
   911 00000664 56                      		push	si		;coloca a abcisa xc+x na pilha	
   912 00000665 89DE                    		mov		si,bx
   913 00000667 01CE                    		add		si,cx
   914 00000669 56                      		push    si		;coloca a ordenada yc+y na pilha	
   915 0000066A E84000                  		call	line
   916                                  		
   917 0000066D 89C6                    		mov		si,ax
   918 0000066F 29D6                    		sub		si,dx
   919 00000671 56                      		push	si		;coloca a abcisa xc-x na pilha			
   920 00000672 89DE                    		mov		si,bx
   921 00000674 29CE                    		sub		si,cx
   922 00000676 56                      		push    si		;coloca a ordenada yc-y na pilha
   923 00000677 89C6                    		mov		si,ax
   924 00000679 29D6                    		sub		si,dx
   925 0000067B 56                      		push	si		;coloca a abcisa xc-x na pilha	
   926 0000067C 89DE                    		mov		si,bx
   927 0000067E 01CE                    		add		si,cx
   928 00000680 56                      		push    si		;coloca a ordenada yc+y na pilha	
   929 00000681 E82900                  		call	line
   930                                  		
   931 00000684 89C6                    		mov		si,ax
   932 00000686 29CE                    		sub		si,cx
   933 00000688 56                      		push	si		;coloca a abcisa xc-y na pilha			
   934 00000689 89DE                    		mov		si,bx
   935 0000068B 29D6                    		sub		si,dx
   936 0000068D 56                      		push    si		;coloca a ordenada yc-x na pilha
   937 0000068E 89C6                    		mov		si,ax
   938 00000690 29CE                    		sub		si,cx
   939 00000692 56                      		push	si		;coloca a abcisa xc-y na pilha	
   940 00000693 89DE                    		mov		si,bx
   941 00000695 01D6                    		add		si,dx
   942 00000697 56                      		push    si		;coloca a ordenada yc+x na pilha	
   943 00000698 E81200                  		call	line
   944                                  		
   945 0000069B 39D1                    		cmp		cx,dx
   946 0000069D 7203                    		jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
   947 0000069F E979FF                  		jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
   948                                  			
   949                                  fim_full_circle:
   950 000006A2 5F                      		pop		di
   951 000006A3 5E                      		pop		si
   952 000006A4 5A                      		pop		dx
   953 000006A5 59                      		pop		cx
   954 000006A6 5B                      		pop		bx
   955 000006A7 58                      		pop		ax
   956 000006A8 9D                      		popf
   957 000006A9 5D                      		pop		bp
   958 000006AA C20600                  		ret		6
   959                                  ;-----------------------------------------------------------------------------
   960                                  ;
   961                                  ;   fun��o line
   962                                  ;
   963                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   964                                  line:
   965 000006AD 55                      		push		bp
   966 000006AE 89E5                    		mov		bp,sp
   967 000006B0 9C                      		pushf                        ;coloca os flags na pilha
   968 000006B1 50                      		push 		ax
   969 000006B2 53                      		push 		bx
   970 000006B3 51                      		push		cx
   971 000006B4 52                      		push		dx
   972 000006B5 56                      		push		si
   973 000006B6 57                      		push		di
   974 000006B7 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
   975 000006BA 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
   976 000006BD 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
   977 000006C0 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
   978 000006C3 39C8                    		cmp		ax,cx
   979 000006C5 7408                    		je		line2
   980 000006C7 721C                    		jb		line1
   981 000006C9 91                      		xchg		ax,cx
   982 000006CA 87DA                    		xchg		bx,dx
   983 000006CC E91600                  		jmp		line1
   984                                  
   985                                  line2:		; deltax=0
   986 000006CF 39D3                    		cmp		bx,dx  ;subtrai dx de bx
   987 000006D1 7202                    		jb		line3
   988 000006D3 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
   989                                  
   990                                  line3:	; dx > bx
   991 000006D5 50                      		push		ax
   992 000006D6 53                      		push		bx
   993 000006D7 E811FE                  		call 		plot_xy
   994 000006DA 39D3                    		cmp		bx,dx
   995 000006DC 7503                    		jne		line31
   996 000006DE E9C600                  		jmp		fim_line
   997                                  line31:		
   998 000006E1 43                      		inc		bx
   999 000006E2 E9F0FF                  		jmp		line3
  1000                                  ;deltax <>0
  1001                                  line1:
  1002                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1003                                  	; cx > ax
  1004 000006E5 51                      		push		cx
  1005 000006E6 29C1                    		sub		cx,ax
  1006 000006E8 890E[0100]              		mov		[deltax],cx
  1007 000006EC 59                      		pop		cx
  1008 000006ED 52                      		push		dx
  1009 000006EE 29DA                    		sub		dx,bx
  1010 000006F0 7702                    		ja		line32
  1011 000006F2 F7DA                    		neg		dx
  1012                                  line32:		
  1013 000006F4 8916[0300]              		mov		[deltay],dx
  1014 000006F8 5A                      		pop		dx
  1015                                  
  1016 000006F9 50                      		push		ax
  1017 000006FA A1[0100]                		mov		ax,[deltax]
  1018 000006FD 3B06[0300]              		cmp		ax,[deltay]
  1019 00000701 58                      		pop		ax
  1020 00000702 724D                    		jb		line5
  1021                                  
  1022                                  	; cx > ax e deltax>deltay
  1023 00000704 51                      		push		cx
  1024 00000705 29C1                    		sub		cx,ax
  1025 00000707 890E[0100]              		mov		[deltax],cx
  1026 0000070B 59                      		pop		cx
  1027 0000070C 52                      		push		dx
  1028 0000070D 29DA                    		sub		dx,bx
  1029 0000070F 8916[0300]              		mov		[deltay],dx
  1030 00000713 5A                      		pop		dx
  1031                                  
  1032 00000714 89C6                    		mov		si,ax
  1033                                  line4:
  1034 00000716 50                      		push		ax
  1035 00000717 52                      		push		dx
  1036 00000718 56                      		push		si
  1037 00000719 29C6                    		sub		si,ax	;(x-x1)
  1038 0000071B A1[0300]                		mov		ax,[deltay]
  1039 0000071E F7EE                    		imul		si
  1040 00000720 8B36[0100]              		mov		si,[deltax]		;arredondar
  1041 00000724 D1EE                    		shr		si,1
  1042                                  ; se numerador (DX)>0 soma se <0 subtrai
  1043 00000726 81FA0000                		cmp		dx,0
  1044 0000072A 7C09                    		jl		ar1
  1045 0000072C 01F0                    		add		ax,si
  1046 0000072E 81D20000                		adc		dx,0
  1047 00000732 E90600                  		jmp		arc1
  1048 00000735 29F0                    ar1:		sub		ax,si
  1049 00000737 81DA0000                		sbb		dx,0
  1050                                  arc1:
  1051 0000073B F73E[0100]              		idiv		word [deltax]
  1052 0000073F 01D8                    		add		ax,bx
  1053 00000741 5E                      		pop		si
  1054 00000742 56                      		push		si
  1055 00000743 50                      		push		ax
  1056 00000744 E8A4FD                  		call		plot_xy
  1057 00000747 5A                      		pop		dx
  1058 00000748 58                      		pop		ax
  1059 00000749 39CE                    		cmp		si,cx
  1060 0000074B 745A                    		je		fim_line
  1061 0000074D 46                      		inc		si
  1062 0000074E E9C5FF                  		jmp		line4
  1063                                  
  1064 00000751 39D3                    line5:		cmp		bx,dx
  1065 00000753 7203                    		jb 		line7
  1066 00000755 91                      		xchg		ax,cx
  1067 00000756 87DA                    		xchg		bx,dx
  1068                                  line7:
  1069 00000758 51                      		push		cx
  1070 00000759 29C1                    		sub		cx,ax
  1071 0000075B 890E[0100]              		mov		[deltax],cx
  1072 0000075F 59                      		pop		cx
  1073 00000760 52                      		push		dx
  1074 00000761 29DA                    		sub		dx,bx
  1075 00000763 8916[0300]              		mov		[deltay],dx
  1076 00000767 5A                      		pop		dx
  1077 00000768 89DE                    		mov		si,bx
  1078                                  line6:
  1079 0000076A 52                      		push		dx
  1080 0000076B 56                      		push		si
  1081 0000076C 50                      		push		ax
  1082 0000076D 29DE                    		sub		si,bx	;(y-y1)
  1083 0000076F A1[0100]                		mov		ax,[deltax]
  1084 00000772 F7EE                    		imul		si
  1085 00000774 8B36[0300]              		mov		si,[deltay]		;arredondar
  1086 00000778 D1EE                    		shr		si,1
  1087                                  ; se numerador (DX)>0 soma se <0 subtrai
  1088 0000077A 81FA0000                		cmp		dx,0
  1089 0000077E 7C09                    		jl		ar2
  1090 00000780 01F0                    		add		ax,si
  1091 00000782 81D20000                		adc		dx,0
  1092 00000786 E90600                  		jmp		arc2
  1093                                  ar2:		
  1094 00000789 29F0                    		sub		ax,si
  1095 0000078B 81EA0000                		sub		dx,0
  1096                                  arc2:
  1097 0000078F F73E[0300]              		idiv		word [deltay]
  1098 00000793 89C7                    		mov		di,ax
  1099 00000795 58                      		pop		ax
  1100 00000796 01C7                    		add		di,ax
  1101 00000798 5E                      		pop		si
  1102 00000799 57                      		push		di
  1103 0000079A 56                      		push		si
  1104 0000079B E84DFD                  		call		plot_xy
  1105 0000079E 5A                      		pop		dx
  1106 0000079F 39D6                    		cmp		si,dx
  1107 000007A1 7404                    		je		fim_line
  1108 000007A3 46                      		inc		si
  1109 000007A4 E9C3FF                  		jmp		line6
  1110                                  
  1111                                  fim_line:
  1112 000007A7 5F                      		pop		di
  1113 000007A8 5E                      		pop		si
  1114 000007A9 5A                      		pop		dx
  1115 000007AA 59                      		pop		cx
  1116 000007AB 5B                      		pop		bx
  1117 000007AC 58                      		pop		ax
  1118 000007AD 9D                      		popf
  1119 000007AE 5D                      		pop		bp
  1120 000007AF C20800                  		ret		8
  1121                                  ;*******************************************************************
  1122                                  segment data
  1123                                  
  1124                                  ;	I R G B COR
  1125                                  ;	0 0 0 0 preto
  1126                                  ;	0 0 0 1 azul
  1127                                  ;	0 0 1 0 verde
  1128                                  ;	0 0 1 1 cyan
  1129                                  ;	0 1 0 0 vermelho
  1130                                  ;	0 1 0 1 magenta
  1131                                  ;	0 1 1 0 marrom
  1132                                  ;	0 1 1 1 branco
  1133                                  ;	1 0 0 0 cinza
  1134                                  ;	1 0 0 1 azul claro
  1135                                  ;	1 0 1 0 verde claro
  1136                                  ;	1 0 1 1 cyan claro
  1137                                  ;	1 1 0 0 rosa
  1138                                  ;	1 1 0 1 magenta claro
  1139                                  ;	1 1 1 0 amarelo
  1140                                  ;	1 1 1 1 branco intenso
  1141                                  
  1142                                  
  1143 00000000 0F                      cor				db		branco_intenso
  1144                                  preto			equ		0
  1145                                  azul			equ		1
  1146                                  verde			equ		2
  1147                                  cyan			equ		3
  1148                                  vermelho		equ		4
  1149                                  magenta			equ		5
  1150                                  marrom			equ		6
  1151                                  branco			equ		7
  1152                                  cinza			equ		8
  1153                                  azul_claro		equ		9
  1154                                  verde_claro		equ		10
  1155                                  cyan_claro		equ		11
  1156                                  rosa			equ		12
  1157                                  magenta_claro	equ		13
  1158                                  amarelo			equ		14
  1159                                  branco_intenso	equ		15
  1160 00000001 0000                    deltax			dw		0
  1161 00000003 0000                    deltay			dw		0
  1162 00000005 00                      modo_anterior	db		0
  1163                                  
  1164 00000006 0500                    x1A				dw		5	;Usados para printar os quadrados
  1165 00000008 6900                    x2A				dw		105
  1166 0000000A 0500                    x1B 			dw		5
  1167 0000000C 6900                    x2B  			dw		105
  1168                                  
  1169 0000000E 0000                    apaga1			dw		0	;Variáveis para pegar qual quadrado apagar
  1170 00000010 0000                    apaga2			dw		0
  1171                                  
  1172 00000012 0E01                    player_x1    	dw      270	;Posição da raquete
  1173 00000014 7201                    player_x2    	dw      370
  1174                                  
  1175 00000016 4001                    px      		dw      320	;Posição da bola
  1176 00000018 1E00                    py      		dw      30
  1177                                  
  1178 0000001A 0000                    bloco_quebrado1	dw		0	;Variável para testar se a bola pode subir mais
  1179 0000001C 0000                    bloco_quebrado2	dw		0
  1180 0000001E 0000                    bloco_quebrado3	dw		0
  1181 00000020 0000                    bloco_quebrado4	dw		0
  1182 00000022 0000                    bloco_quebrado5	dw		0
  1183 00000024 0000                    bloco_quebrado6	dw		0
  1184                                  
  1185 00000026 0500                    vx      		dw      5	;Velocidade que a bola anda
  1186 00000028 0500                    vy      		dw      5
  1187 0000002A 47414D45204F564552-     mens_3      	db          'GAME OVER. Deseja continuar? Y ou N'
  1188 00000033 2E20446573656A6120-
  1189 0000003C 636F6E74696E756172-
  1190 00000045 3F2059206F75204E   
  1191                                  
  1192                                  ;*************************************************************************
  1193                                  segment stack stack
  1194 00000000 <res 00000200>              		resb 		512
  1195                                  stacktop:
