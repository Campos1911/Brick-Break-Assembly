     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                		MOV 	AX,dados	; Inicialização de Registradores
     4 00000003 8ED8                    		MOV 	DS,AX
     5 00000005 B8[0000]                		MOV 	AX,stack
     6 00000008 8ED0                    		MOV 	SS,AX
     7 0000000A BC[0001]                		MOV 	SP,stacktop 
     8                                  		
     9                                  ; AQUI COMECA A EXECUCAO DO PROGRAMA PRINCIPAL
    10 0000000D BA[0000]                		MOV 	DX,mensini 	; Carrega em DX o offset da mensagem de inicio
    11 00000010 B409                    		MOV 	AH,9		; Parametro para imprimir uma string no DOS
    12 00000012 CD21                    		INT 	21h			; Chama interrupção 21h do DOS para imprimir string [mensini] 
    13                                  					
    14 00000014 B80000                  		MOV 	AX,0 		; Primeiro elemento da série
    15 00000017 BB0100                  		MOV 	BX,1 		; Segundo elemento da série
    16                                  L10:
    17 0000001A 89C2                    		MOV 	DX,AX		; Carrega em AX o primeiro elemento da série
    18                                  		
    19 0000001C E81700                  		CALL	PrintNumb	; Chama a função PrintNumb para imprimir o número na tela
    20                                  							; Depois de retornar da função PrintNumb o programa retorna na seguinte instrução
    21 0000001F 01DA                    		ADD 	DX,BX 		; Calcula novo elemento da série DX = DX+BX
    22 00000021 89D8                    		MOV 	AX,BX		; Transfere o elemento anterior BX para AX
    23 00000023 89D3                    		MOV 	BX,DX		; Atualiza o valor atual (novo) da série em BX
    24                                  		
    25 00000025 81FAE803                		CMP 	DX, 1000		; Compara o valor atual da série DX com 100
    26 00000029 72EF                    		JB 		L10			; Se for menor pula para L10, se não, ele continua com a próxima linha
    27                                  
    28                                  ; AQUI TERMINA A EXECUCAO DO PROGRAMA PRINCIPAL
    29                                  exit:
    30 0000002B BA[2E00]                		MOV 	DX,mensfim 	; Carrega em DX o offset de Mensagem final
    31 0000002E B409                    		MOV 	AH,9		; Parametro para imprimir uma string no DOS
    32 00000030 CD21                    		INT	 	21h			; Chama interrupção 21h do DOS para imprimir string
    33                                  quit:
    34 00000032 B44C                    		MOV 	AH,4CH 		; retorna o controle para o DOS com código 0
    35 00000034 CD21                    		INT 	21h
    36                                  
    37                                  ;*****************************************************************
    38                                  
    39                                  PrintNumb:
    40 00000036 9C                      		PUSHF 					; Save the context
    41 00000037 50                      		PUSH 	AX
    42 00000038 53                      		PUSH 	BX
    43 00000039 51                      		PUSH	CX
    44 0000003A 52                      		PUSH 	DX
    45                                  				
    46 0000003B BF[3F00]                		MOV 	DI,saida		; Carrega em DI o offset da mensagem saida
    47 0000003E B90500                  		MOV		CX,5
    48 00000041 BE0000                  		MOV 	SI,0
    49 00000044 BB1027                  		MOV 	BX,10000
    50 00000047 E80D00                  		CALL 	bin2ascii		; Converte o valor decimal em ascii	
    51                                  
    52 0000004A BA[3F00]                		MOV 	DX,saida		; Carrega em DX o offset da mensagem de saída, ou seja, o número convertido pela função bin2ascii
    53 0000004D B409                    		MOV 	AH,9h			; Parametro para imprimir uma string no DOS
    54 0000004F CD21                    		INT 	21h         	; Chama o DOS para imprimir o valor da serie
    55                                  		
    56                                  ; Upgrade the context
    57 00000051 5A                      		POP 	DX
    58 00000052 59                      		POP 	CX
    59 00000053 5B                      		POP		BX
    60 00000054 58                      		POP 	AX
    61 00000055 9D                      		POPF
    62 00000056 C3                      		RET
    63                                  
    64                                  bin2ascii:	
    65 00000057 31D2                    	XOR 	DX,DX				; DX <- DX XOR DX. Zera o registrador DX.
    66 00000059 F7F3                    	DIV 	BX					; AX <- (DX AX) / BX | DX <- Resto. Divide DX:AX por BX.
    67 0000005B 0430                    	ADD	 	AL,0x30				; AL <- AL+0x30. Soma 0x30 em AL (0x30 = '0').
    68 0000005D 8884[3F00]              	MOV 	byte[saida+SI],AL	; [saida] <- AL. Salva o número em ASCII na variavel 'saida'.
    69                                  	
    70 00000061 52                      	PUSH	DX					; Empilha DX, Resto da divisão
    71 00000062 31D2                    	XOR 	DX,DX				; É necessário limpar o registrador para fazer a operação de divisão
    72 00000064 89D8                    	MOV		AX,BX				; Divide o Dividendo, ou seja 10000/10, 1000/10, 100/10 ou 10/10
    73 00000066 BB0A00                  	MOV 	BX,10
    74 00000069 F7F3                    	DIV		BX
    75 0000006B 89C3                    	MOV		BX,AX				; Atualiza o dividendo
    76 0000006D 5A                      	POP		DX					; Desempilha DX, Resto da divisão do valor en conversão
    77 0000006E 46                      	INC		SI					; SI <- SI+1. Incrementa o offset da variável saída 
    78 0000006F 89D0                    	MOV 	AX,DX				; AX <- DX. Passa valor de DX (Resto) para AX (novo valor a ser dividido). Atualiza o valor da conversão
    79 00000071 E2E4                    	LOOP	bin2ascii
    80 00000073 C3                      	RET
    81                                  		
    82                                  segment dados ;segmento de dados inicializados
    83                                  CR 		EQU		13			; Define simbolos de 
    84                                  LF 		EQU		10
    85 00000000 50726F6772616D6120-     mensini: 	db 'Programa que calcula a Serie de Fibonacci. ',CR,LF,'$'
    86 00000009 7175652063616C6375-
    87 00000012 6C6120612053657269-
    88 0000001B 65206465204669626F-
    89 00000024 6E616363692E200D0A-
    90 0000002D 24                 
    91 0000002E 46696D206461207365-     mensfim: 	db 'Fim da serie!!',CR,LF,'$'
    92 00000037 72696521210D0A24   
    93                                  ;saida: 		db '00000',CR,LF,'$'
    94 0000003F <res 00000005>          saida: 		resb 5 
    95 00000044 0D0A24                  			db CR,LF,'$'
    96                                  
    97                                  segment stack stack
    98 00000000 <res 00000100>          resb 256 					; Reserva 256 bytes para formar a pilha
    99                                  stacktop:
