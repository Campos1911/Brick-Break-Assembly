     1                                  segment code
     2                                  ..start:
     3 00000000 B8[0000]                		MOV 	AX,data					; Inicializa o registrador de Segmento de Dados DS
     4 00000003 8ED8                    		MOV 	DS,AX
     5 00000005 B8[0000]                		MOV 	AX,stack				; Inicializa o registrador de Segmento de Pilha SS
     6 00000008 8ED0                    		MOV 	SS,AX
     7 0000000A BC[0001]                		MOV 	sp,stacktop				; Inicializa o apontador de Pilha SP
     8                                  
     9 0000000D FA                      		CLI								; Deshabilita INTerrupções por hardware - pin INTR NÃO atende INTerrupções externas	
    10 0000000E 31C0                            XOR     AX, AX					; Limpa o registrador AX, é equivalente a fazer "MOV AX,0"
    11 00000010 8EC0                            MOV     ES, AX					; Inicializa o registrador de Segmento Extra ES para acessar à região de vetores de INTerrupção (posição zero de memoria)
    12 00000012 26A12400                        MOV     AX, [ES:INT9*4]			; Carrega em AX o valor do IP do vector de INTerrupção 9 
    13 00000016 A3[0200]                        MOV     [offset_dos], AX    	; Salva na variável offset_dos o valor do IP do vector de INTerrupção 9
    14 00000019 26A12600                        MOV     AX, [ES:INT9*4+2]   	; Carrega em AX o valor do CS do vector de INTerrupção 9
    15 0000001D A3[0000]                        MOV     [cs_dos], AX			; Salva na variável cs_dos o valor do CS do vector de INTerrupção 9     
    16 00000020 268C0E2600                      MOV     [ES:INT9*4+2], CS		; Atualiza o valor do CS do vector de INTerrupção 9 com o CS do programa atual 
    17 00000025 26C7062400[3000]                MOV     WORD [ES:INT9*4],looping	; Atualiza o valor do IP do vector de INTerrupção 9 com o offset "keyINT" do programa atual
    18 0000002C FB                              STI								; Habilita INTerrupções por hardware - pin INTR SIM atende INTerrupções externas
    19 0000002D B90500                  		MOV 	CX, 5
    20                                  		
    21                                  looping:
    22 00000030 B8[0000]                		MOV     AX,data					; Carrega em AX o endereço de "data" -> Região do código onde encontra-se o segemeto de dados "Segment data" 			
    23 00000033 8ED8                            MOV     DS,AX					; Atualiza registrador de segmento de dados DS, isso pode ser feito no inicio do programa!
    24 00000035 E460                            IN      AL, kb_data				; Le a porta 60h, que é onde está o byte do Make/Break da tecla. Esse valor é fornecido pelo chip "8255 PPI"
    25 00000037 88C2                    		MOV 	DL, AL
    26 00000039 B409                    		MOV 	AH, 9
    27 0000003B CD21                    		INT 	21h
    28 0000003D E2F1                    		LOOP	looping
    29                                  		
    30                                  segment data
    31                                          kb_data EQU 60h  				; PORTA DE LEITURA DE TECLADO
    32                                          kb_ctl  EQU 61h  				; PORTA DE RESET PARA PEDIR NOVA INTERRUPCAO
    33                                          pictrl  EQU 20h					; PORTA DO PIC DE TECLADO
    34                                          eoi     EQU 20h					; Byte de final de interrupção PIC - resgistrador
    35                                          INT9    EQU 9h					; Interrupção por hardware do teclado
    36 00000000 0100                            cs_dos  DW  1					; Variável de 2 bytes para armacenar o CS da INT 9
    37 00000002 0100                            offset_dos  DW 1				; Variável de 2 bytes para armacenar o IP da INT 9
    38 00000004 00                              tecla_u db 0
    39 00000005 <res 00000008>                  tecla   resb  8					; Variável de 8 bytes para armacenar a tecla presionada. Só precisa de 2 bytes!	 
    40 0000000D 0000                            p_i     dw  0   				; Indice p/ Interrupcao (Incrementa na ISR quando pressiona/solta qualquer tecla)  
    41 0000000F 0000                            p_t     dw  0   				; Indice p/ Interrupcao (Incrementa após retornar da ISR quando pressiona/solta qualquer tecla)    
    42 00000011 00000D0A24                      teclasc DB  0,0,13,10,'$'		; Variável tipo char para printar o código Make/Break em hexadecimal
    43                                  
    44                                  segment stack stack						; Segmento da pilha -> SS
    45 00000000 <res 00000100>              resb 256							; Reserva 256 bytes para a pilha
    46                                  stacktop:								; Define ponteiro do topo da pilha -> SP
